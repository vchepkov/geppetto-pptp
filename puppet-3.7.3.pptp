<?xml version="1.0" encoding="ASCII"?>
<pptp:PuppetDistribution xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:pptp="http://www.puppetlabs.com/geppetto/1.0.0/PPTP" description="Puppet Distribution" version="3.7.3" label="puppet">
  <contents xsi:type="pptp:NameSpace" name="settings" reserved="true">
    <contents xsi:type="pptp:TPVariable" name="allow_duplicate_certs" documentation="Whether to allow a new certificate request to overwrite an existing certificate."/>
    <contents xsi:type="pptp:TPVariable" name="archive_file_server" documentation="During an inspect run, the file bucket server to archive files to if archive_files is set."/>
    <contents xsi:type="pptp:TPVariable" name="archive_files" documentation="During an inspect run, whether to archive files whose contents are audited to a file bucket."/>
    <contents xsi:type="pptp:TPVariable" name="async_storeconfigs" documentation="Whether to use a queueing system to provide asynchronous database integration. Requires that puppetqd be running and that &#x2018;PSON&#x2019; support for ruby be installed."/>
    <contents xsi:type="pptp:TPVariable" name="authconfig" documentation="The configuration file that defines the rights to the different namespaces and methods. This can be used as a coarse-grained authorization system for both puppet agent and puppet master."/>
    <contents xsi:type="pptp:TPVariable" name="autoflush" documentation="Whether log files should always flush to disk."/>
    <contents xsi:type="pptp:TPVariable" name="autosign" documentation="Whether to enable autosign. Valid values are true (which autosigns any key request, and is a very bad idea), false (which never autosigns any key request), and the path to a file, which uses that configuration file to determine which keys to sign."/>
    <contents xsi:type="pptp:TPVariable" name="bindaddress" documentation="The address a listening server should bind to."/>
    <contents xsi:type="pptp:TPVariable" name="bucketdir" documentation="Where FileBucket files are stored."/>
    <contents xsi:type="pptp:TPVariable" name="ca" documentation="Wether the master should function as a certificate authority."/>
    <contents xsi:type="pptp:TPVariable" name="ca_days" documentation="How long a certificate should be valid. This parameter is deprecated, use ca_ttl instead." deprecated="true"/>
    <contents xsi:type="pptp:TPVariable" name="ca_md" documentation="The type of hash used in certificates."/>
    <contents xsi:type="pptp:TPVariable" name="ca_name" documentation="The name to use the Certificate Authority certificate."/>
    <contents xsi:type="pptp:TPVariable" name="ca_port" documentation="The port to use for the certificate authority."/>
    <contents xsi:type="pptp:TPVariable" name="ca_server" documentation="The server to use for certificate authority requests. It&#x2019;s a separate server because it cannot and does not need to horizontally scale."/>
    <contents xsi:type="pptp:TPVariable" name="ca_ttl" documentation="The default TTL for new certificates; valid values must be an integer, optionally followed by one of the units &#x2018;y&#x2019; (years of 365 days), &#x2018;d&#x2019; (days), &#x2018;h&#x2019; (hours), or &#x2018;s&#x2019; (seconds). The unit defaults to seconds. If this parameter is set, ca_days is ignored. Examples are &#x2018;3600&#x2019; (one hour) and &#x2018;1825d&#x2019;, which is the same as &#x2018;5y&#x2019; (5 years)."/>
    <contents xsi:type="pptp:TPVariable" name="cacert" documentation="The CA certificate."/>
    <contents xsi:type="pptp:TPVariable" name="cacrl" documentation="The certificate revocation list (CRL) for the CA. Will be used if present but otherwise ignored."/>
    <contents xsi:type="pptp:TPVariable" name="cadir" documentation="The root directory for the certificate authority."/>
    <contents xsi:type="pptp:TPVariable" name="cakey" documentation="The CA private key."/>
    <contents xsi:type="pptp:TPVariable" name="capass" documentation="Where the CA stores the password for the private key"/>
    <contents xsi:type="pptp:TPVariable" name="caprivatedir" documentation="Where the CA stores private certificate information."/>
    <contents xsi:type="pptp:TPVariable" name="capub" documentation="The CA public key."/>
    <contents xsi:type="pptp:TPVariable" name="catalog_format" documentation="(Deprecated for &#x2018;preferred_serialization_format&#x2019;) What format to use to dump the catalog. Only supports &#x2018;marshal&#x2019; and &#x2018;yaml&#x2019;. Only matters on the client, since it asks the server for a specific format." deprecated="true"/>
    <contents xsi:type="pptp:TPVariable" name="catalog_terminus" documentation="Where to get node catalogs. This is useful to change if, for instance, you&#x2019;d like to pre-compile catalogs and store them in memcached or some other easily-accessed store."/>
    <contents xsi:type="pptp:TPVariable" name="cert_inventory" documentation="A Complete listing of all certificates"/>
    <contents xsi:type="pptp:TPVariable" name="certdir" documentation="The certificate directory."/>
    <contents xsi:type="pptp:TPVariable" name="certdnsnames" documentation="The DNS names on the Server certificate as a colon-separated list. If it&#x2019;s anything other than an empty string, it will be used as an alias in the created certificate. By default, only the server gets an alias set up, and only for &#x2018;puppet&#x2019;."/>
    <contents xsi:type="pptp:TPVariable" name="certificate_revocation" documentation="Whether certificate revocation should be supported by downloading a Certificate Revocation List (CRL) to all clients. If enabled, CA chaining will almost definitely not work."/>
    <contents xsi:type="pptp:TPVariable" name="certname" documentation="The name to use when handling certificates. Defaults to the fully qualified domain name."/>
    <contents xsi:type="pptp:TPVariable" name="classfile" documentation="The file in which puppet agent stores a list of the classes associated with the retrieved configuration. Can be loaded in the separate puppet executable using the --loadclasses option."/>
    <contents xsi:type="pptp:TPVariable" name="client_datadir" documentation="The directory in which serialized data is stored on the client."/>
    <contents xsi:type="pptp:TPVariable" name="clientbucketdir" documentation="Where FileBucket files are stored locally."/>
    <contents xsi:type="pptp:TPVariable" name="clientyamldir" documentation="The directory in which client-side YAML data is stored."/>
    <contents xsi:type="pptp:TPVariable" name="code" documentation="Code to parse directly. This is essentially only used by puppet, and should only be set if you&#x2019;re writing your own Puppet executable."/>
    <contents xsi:type="pptp:TPVariable" name="color" documentation="Whether to use colors when logging to the console. Valid values are ansi (equivalent to true), html (mostly used during testing with TextMate), and false, which produces no color."/>
    <contents xsi:type="pptp:TPVariable" name="confdir" documentation="The main Puppet configuration directory. The default for this parameter is calculated based on the user. If the process is running as root or the user that Puppet is supposed to run as, it defaults to a system directory, but if it&#x2019;s running as any other user, it defaults to being in the user&#x2019;s home directory."/>
    <contents xsi:type="pptp:TPVariable" name="config" documentation="The configuration file for doc."/>
    <contents xsi:type="pptp:TPVariable" name="config_version" documentation="How to determine the configuration version. By default, it will be the time that the configuration is parsed, but you can provide a shell script to override how the version is determined. The output of this script will be added to every log message in the reports, allowing you to correlate changes on your hosts to the source version on the server."/>
    <contents xsi:type="pptp:TPVariable" name="configprint" documentation="Print the value of a specific configuration parameter. If a parameter is provided for this, then the value is printed and puppet exits. Comma-separate multiple values. For a list of all values, specify &#x2018;all&#x2019;. This feature is only available in Puppet versions higher than 0.18.4."/>
    <contents xsi:type="pptp:TPVariable" name="configtimeout" documentation="How long the client should wait for the configuration to be retrieved before considering it a failure. This can help reduce flapping if too many clients contact the server at one time."/>
    <contents xsi:type="pptp:TPVariable" name="couchdb_url" documentation="The url where the puppet couchdb database will be created"/>
    <contents xsi:type="pptp:TPVariable" name="csrdir" documentation="Where the CA stores certificate requests"/>
    <contents xsi:type="pptp:TPVariable" name="daemonize" documentation="Send the process into the background. This is the default."/>
    <contents xsi:type="pptp:TPVariable" name="dbadapter" documentation="The type of database to use."/>
    <contents xsi:type="pptp:TPVariable" name="dbconnections" documentation="The number of database connections for networked databases. Will be ignored unless the value is a positive integer."/>
    <contents xsi:type="pptp:TPVariable" name="dblocation" documentation="The database cache for client configurations. Used for querying within the language."/>
    <contents xsi:type="pptp:TPVariable" name="dbmigrate" documentation="Whether to automatically migrate the database."/>
    <contents xsi:type="pptp:TPVariable" name="dbname" documentation="The name of the database to use."/>
    <contents xsi:type="pptp:TPVariable" name="dbpassword" documentation="The database password for caching. Only used when networked databases are used."/>
    <contents xsi:type="pptp:TPVariable" name="dbport" documentation="The database password for caching. Only used when networked databases are used."/>
    <contents xsi:type="pptp:TPVariable" name="dbserver" documentation="The database server for caching. Only used when networked databases are used."/>
    <contents xsi:type="pptp:TPVariable" name="dbsocket" documentation="The database socket location. Only used when networked databases are used. Will be ignored if the value is an empty string."/>
    <contents xsi:type="pptp:TPVariable" name="dbuser" documentation="The database user for caching. Only used when networked databases are used."/>
    <contents xsi:type="pptp:TPVariable" name="deviceconfig" documentation="Path to the device config file for puppet device"/>
    <contents xsi:type="pptp:TPVariable" name="devicedir" documentation="The root directory of devices&#x2019; $vardir"/>
    <contents xsi:type="pptp:TPVariable" name="diff" documentation="Which diff command to use when printing differences between files."/>
    <contents xsi:type="pptp:TPVariable" name="diff_args" documentation="Which arguments to pass to the diff command when printing differences between files."/>
    <contents xsi:type="pptp:TPVariable" name="document_all" documentation="Document all resources"/>
    <contents xsi:type="pptp:TPVariable" name="downcasefacts" documentation="Whether facts should be made all lowercase when sent to the server."/>
    <contents xsi:type="pptp:TPVariable" name="dynamicfacts" documentation="Facts that are dynamic; these facts will be ignored when deciding whether changed facts should result in a recompile. Multiple facts should be comma-separated."/>
    <contents xsi:type="pptp:TPVariable" name="environment" documentation="The environment Puppet is running in. For clients (e.g., puppet agent) this determines the environment itself, which is used to find modules and much more. For servers (i.e., puppet master) this provides the default environment for nodes we know nothing about."/>
    <contents xsi:type="pptp:TPVariable" name="evaltrace" documentation="Whether each resource should log when it is being evaluated. This allows you to interactively see exactly what is being done."/>
    <contents xsi:type="pptp:TPVariable" name="external_nodes" documentation="An external command that can produce node information. The output must be a YAML dump of a hash, and that hash must have one or both of classes and parameters, where classes is an array and parameters is a hash. For unknown nodes, the commands should exit with a non-zero exit code. This command makes it straightforward to store your node mapping information in other data sources like databases."/>
    <contents xsi:type="pptp:TPVariable" name="factdest" documentation="Where Puppet should store facts that it pulls down from the central server."/>
    <contents xsi:type="pptp:TPVariable" name="factpath" documentation="Where Puppet should look for facts. Multiple directories should be colon-separated, like normal PATH variables."/>
    <contents xsi:type="pptp:TPVariable" name="facts_terminus" documentation="The node facts terminus."/>
    <contents xsi:type="pptp:TPVariable" name="factsignore" documentation="What files to ignore when pulling down facts."/>
    <contents xsi:type="pptp:TPVariable" name="factsource" documentation="From where to retrieve facts. The standard Puppet file type is used for retrieval, so anything that is a valid file source can be used here."/>
    <contents xsi:type="pptp:TPVariable" name="factsync" documentation="Whether facts should be synced with the central server."/>
    <contents xsi:type="pptp:TPVariable" name="fileserverconfig" documentation="Where the fileserver configuration is stored."/>
    <contents xsi:type="pptp:TPVariable" name="filetimeout" documentation="The minimum time to wait (in seconds) between checking for updates in configuration files. This timeout determines how quickly Puppet checks whether a file (such as manifests or templates) has changed on disk."/>
    <contents xsi:type="pptp:TPVariable" name="freeze_main" documentation="Freezes the &#x2018;main&#x2019; class, disallowing any code to be added to it. This essentially means that you can&#x2019;t have any code outside of a node, class, or definition other than in the site manifest."/>
    <contents xsi:type="pptp:TPVariable" name="genconfig" documentation="Whether to just print a configuration to stdout and exit. Only makes sense when used interactively. Takes into account arguments specified on the CLI."/>
    <contents xsi:type="pptp:TPVariable" name="genmanifest" documentation="Whether to just print a manifest to stdout and exit. Only makes sense when used interactively. Takes into account arguments specified on the CLI."/>
    <contents xsi:type="pptp:TPVariable" name="graph" documentation="Whether to create dot graph files for the different configuration graphs. These dot files can be interpreted by tools like OmniGraffle or dot (which is part of ImageMagick)."/>
    <contents xsi:type="pptp:TPVariable" name="graphdir" documentation="Where to store dot-outputted graphs."/>
    <contents xsi:type="pptp:TPVariable" name="group" documentation="The group puppet master should run as."/>
    <contents xsi:type="pptp:TPVariable" name="hostcert" documentation="Where individual hosts store and look for their certificates."/>
    <contents xsi:type="pptp:TPVariable" name="hostcrl" documentation="Where the host&#x2019;s certificate revocation list can be found. This is distinct from the certificate authority&#x2019;s CRL."/>
    <contents xsi:type="pptp:TPVariable" name="hostcsr" documentation="Where individual hosts store and look for their certificate requests."/>
    <contents xsi:type="pptp:TPVariable" name="hostprivkey" documentation="Where individual hosts store and look for their private key."/>
    <contents xsi:type="pptp:TPVariable" name="hostpubkey" documentation="Where individual hosts store and look for their public key."/>
    <contents xsi:type="pptp:TPVariable" name="http_compression" documentation="Allow http compression in REST communication with the master. This setting might improve performance for agent -> master communications over slow WANs. Your puppet master needs to support compression (usually by activating some settings in a reverse-proxy in front of the puppet master, which rules out webrick). It is harmless to activate this settings if your master doesn&#x2019;t support compression, but if it supports it, this setting might reduce performance on high-speed LANs."/>
    <contents xsi:type="pptp:TPVariable" name="http_proxy_host" documentation="The HTTP proxy host to use for outgoing connections. Note: You may need to use a FQDN for the server hostname when using a proxy."/>
    <contents xsi:type="pptp:TPVariable" name="http_proxy_port" documentation="The HTTP proxy port to use for outgoing connections"/>
    <contents xsi:type="pptp:TPVariable" name="httplog" documentation="Where the puppet agent web server logs."/>
    <contents xsi:type="pptp:TPVariable" name="ignorecache" documentation="Ignore cache and always recompile the configuration. This is useful for testing new configurations, where the local cache may in fact be stale even if the timestamps are up to date - if the facts change or if the server changes."/>
    <contents xsi:type="pptp:TPVariable" name="ignoreimport" documentation="A parameter that can be used in commit hooks, since it enables you to parse-check a single file rather than requiring that all files exist."/>
    <contents xsi:type="pptp:TPVariable" name="ignoreschedules" documentation="Boolean; whether puppet agent should ignore schedules. This is useful for initial puppet agent runs."/>
    <contents xsi:type="pptp:TPVariable" name="inventory_port" documentation="The port to communicate with the inventory_server."/>
    <contents xsi:type="pptp:TPVariable" name="inventory_server" documentation="The server to send facts to."/>
    <contents xsi:type="pptp:TPVariable" name="inventory_terminus" documentation="Should usually be the same as the facts terminus"/>
    <contents xsi:type="pptp:TPVariable" name="keylength" documentation="The bit length of keys."/>
    <contents xsi:type="pptp:TPVariable" name="lastrunfile" documentation="Where puppet agent stores the last run report summary in yaml format."/>
    <contents xsi:type="pptp:TPVariable" name="lastrunreport" documentation="Where puppet agent stores the last run report in yaml format."/>
    <contents xsi:type="pptp:TPVariable" name="ldapattrs" documentation="The LDAP attributes to include when querying LDAP for nodes. All returned attributes are set as variables in the top-level scope. Multiple values should be comma-separated. The value &#x2018;all&#x2019; returns all attributes."/>
    <contents xsi:type="pptp:TPVariable" name="ldapbase" documentation="The search base for LDAP searches. It&#x2019;s impossible to provide a meaningful default here, although the LDAP libraries might have one already set. Generally, it should be the &#x2018;ou=Hosts&#x2019; branch under your main directory."/>
    <contents xsi:type="pptp:TPVariable" name="ldapclassattrs" documentation="The LDAP attributes to use to define Puppet classes. Values should be comma-separated."/>
    <contents xsi:type="pptp:TPVariable" name="ldapnodes" documentation="Whether to search for node configurations in LDAP. See http://projects.puppetlabs.com/projects/puppet/wiki/LDAP_Nodes for more information."/>
    <contents xsi:type="pptp:TPVariable" name="ldapparentattr" documentation="The attribute to use to define the parent node."/>
    <contents xsi:type="pptp:TPVariable" name="ldappassword" documentation="The password to use to connect to LDAP."/>
    <contents xsi:type="pptp:TPVariable" name="ldapport" documentation="The LDAP port. Only used if ldapnodes is enabled."/>
    <contents xsi:type="pptp:TPVariable" name="ldapserver" documentation="The LDAP server. Only used if ldapnodes is enabled."/>
    <contents xsi:type="pptp:TPVariable" name="ldapssl" documentation="Whether SSL should be used when searching for nodes. Defaults to false because SSL usually requires certificates to be set up on the client side."/>
    <contents xsi:type="pptp:TPVariable" name="ldapstackedattrs" documentation="The LDAP attributes that should be stacked to arrays by adding the values in all hierarchy elements of the tree. Values should be comma-separated."/>
    <contents xsi:type="pptp:TPVariable" name="ldapstring" documentation="The search string used to find an LDAP node."/>
    <contents xsi:type="pptp:TPVariable" name="ldaptls" documentation="Whether TLS should be used when searching for nodes. Defaults to false because TLS usually requires certificates to be set up on the client side."/>
    <contents xsi:type="pptp:TPVariable" name="ldapuser" documentation="The user to use to connect to LDAP. Must be specified as a full DN."/>
    <contents xsi:type="pptp:TPVariable" name="lexical" documentation="Whether to use lexical scoping (vs. dynamic)."/>
    <contents xsi:type="pptp:TPVariable" name="libdir" documentation="An extra search path for Puppet. This is only useful for those files that Puppet will load on demand, and is only guaranteed to work for those cases. In fact, the autoload mechanism is responsible for making sure this directory is in Ruby&#x2019;s search path"/>
    <contents xsi:type="pptp:TPVariable" name="listen" documentation="Whether puppet agent should listen for connections. If this is true, then puppet agent will accept incoming REST API requests, subject to the default ACLs and the ACLs set in the rest_authconfig file. Puppet agent can respond usefully to requests on the run, facts, certificate, and resource endpoints."/>
    <contents xsi:type="pptp:TPVariable" name="localcacert" documentation="Where each client stores the CA certificate."/>
    <contents xsi:type="pptp:TPVariable" name="localconfig" documentation="Where puppet agent caches the local configuration. An extension indicating the cache format is added automatically."/>
    <contents xsi:type="pptp:TPVariable" name="logdir" documentation="The Puppet log directory."/>
    <contents xsi:type="pptp:TPVariable" name="manage_internal_file_permissions" documentation="Whether Puppet should manage the owner, group, and mode of files it uses internally"/>
    <contents xsi:type="pptp:TPVariable" name="manifest" documentation="The entry-point manifest for puppet master."/>
    <contents xsi:type="pptp:TPVariable" name="manifestdir" documentation="Where puppet master looks for its manifests."/>
    <contents xsi:type="pptp:TPVariable" name="masterhttplog" documentation="Where the puppet master web server logs."/>
    <contents xsi:type="pptp:TPVariable" name="masterlog" documentation="Where puppet master logs. This is generally not used, since syslog is the default log destination."/>
    <contents xsi:type="pptp:TPVariable" name="masterport" documentation="Which port puppet master listens on."/>
    <contents xsi:type="pptp:TPVariable" name="maximum_uid" documentation="The maximum allowed UID. Some platforms use negative UIDs but then ship with tools that do not know how to handle signed ints, so the UIDs show up as huge numbers that can then not be fed back into the system. This is a hackish way to fail in a slightly more useful way when that happens."/>
    <contents xsi:type="pptp:TPVariable" name="mkusers" documentation="Whether to create the necessary user and group that puppet agent will run as."/>
    <contents xsi:type="pptp:TPVariable" name="modulepath" documentation="The search path for modules as a list of directories separated by the &#x2018;:&#x2019; character."/>
    <contents xsi:type="pptp:TPVariable" name="name" documentation="The name of the application, if we are running as one. The default is essentially $0 without the path or .rb."/>
    <contents xsi:type="pptp:TPVariable" name="node_name" documentation="How the puppet master determines the client&#x2019;s identity and sets the &#x2018;hostname&#x2019;, &#x2018;fqdn&#x2019; and &#x2018;domain&#x2019; facts for use in the manifest, in particular for determining which &#x2018;node&#x2019; statement applies to the client. Possible values are &#x2018;cert&#x2019; (use the subject&#x2019;s CN in the client&#x2019;s certificate) and &#x2018;facter&#x2019; (use the hostname that the client reported in its facts)"/>
    <contents xsi:type="pptp:TPVariable" name="node_name_fact" documentation="The fact name used to determine the node name used for all requests the agent makes to the master. WARNING: This setting is mutually exclusive with node_name_value. Changing this setting also requires changes to the default auth.conf configuration on the Puppet Master. Please see http://links.puppetlabs.com/node_name_fact for more information."/>
    <contents xsi:type="pptp:TPVariable" name="node_name_value" documentation="The explicit value used for the node name for all requests the agent makes to the master. WARNING: This setting is mutually exclusive with node_name_fact. Changing this setting also requires changes to the default auth.conf configuration on the Puppet Master. Please see http://links.puppetlabs.com/node_name_value for more information."/>
    <contents xsi:type="pptp:TPVariable" name="node_terminus" documentation="Where to find information about nodes."/>
    <contents xsi:type="pptp:TPVariable" name="noop" documentation="Whether puppet agent should be run in noop mode."/>
    <contents xsi:type="pptp:TPVariable" name="onetime" documentation="Run the configuration once, rather than as a long-running daemon. This is useful for interactively running puppetd."/>
    <contents xsi:type="pptp:TPVariable" name="passfile" documentation="Where puppet agent stores the password for its private key. Generally unused."/>
    <contents xsi:type="pptp:TPVariable" name="path" documentation="The shell search path. Defaults to whatever is inherited from the parent process."/>
    <contents xsi:type="pptp:TPVariable" name="pidfile" documentation="The pid file"/>
    <contents xsi:type="pptp:TPVariable" name="plugindest" documentation="Where Puppet should store plugins that it pulls down from the central server."/>
    <contents xsi:type="pptp:TPVariable" name="pluginsignore" documentation="What files to ignore when pulling down plugins."/>
    <contents xsi:type="pptp:TPVariable" name="pluginsource" documentation="From where to retrieve plugins. The standard Puppet file type is used for retrieval, so anything that is a valid file source can be used here."/>
    <contents xsi:type="pptp:TPVariable" name="pluginsync" documentation="Whether plugins should be synced with the central server."/>
    <contents xsi:type="pptp:TPVariable" name="postrun_command" documentation="A command to run after every agent run. If this command returns a non-zero return code, the entire Puppet run will be considered to have failed, even though it might have performed work during the normal run."/>
    <contents xsi:type="pptp:TPVariable" name="preferred_serialization_format" documentation="The preferred means of serializing ruby instances for passing over the wire. This won&#x2019;t guarantee that all instances will be serialized using this method, since not all classes can be guaranteed to support this format, but it will be used for all classes that support it."/>
    <contents xsi:type="pptp:TPVariable" name="prerun_command" documentation="A command to run before every agent run. If this command returns a non-zero return code, the entire Puppet run will fail."/>
    <contents xsi:type="pptp:TPVariable" name="privatedir" documentation="Where the client stores private certificate information."/>
    <contents xsi:type="pptp:TPVariable" name="privatekeydir" documentation="The private key directory."/>
    <contents xsi:type="pptp:TPVariable" name="publickeydir" documentation="The public key directory."/>
    <contents xsi:type="pptp:TPVariable" name="puppetdlockfile" documentation="A lock file to temporarily stop puppet agent from doing anything."/>
    <contents xsi:type="pptp:TPVariable" name="puppetdlog" documentation="The log file for puppet agent. This is generally not used."/>
    <contents xsi:type="pptp:TPVariable" name="puppetport" documentation="Which port puppet agent listens on."/>
    <contents xsi:type="pptp:TPVariable" name="queue_source" documentation="Which type of queue to use for asynchronous processing. If your stomp server requires authentication, you can include it in the URI as long as your stomp client library is at least 1.1.1"/>
    <contents xsi:type="pptp:TPVariable" name="queue_type" documentation="Which type of queue to use for asynchronous processing."/>
    <contents xsi:type="pptp:TPVariable" name="rails_loglevel" documentation="The log level for Rails connections. The value must be a valid log level within Rails. Production environments normally use info and other environments normally use debug."/>
    <contents xsi:type="pptp:TPVariable" name="railslog" documentation="Where Rails-specific logs are sent"/>
    <contents xsi:type="pptp:TPVariable" name="report" documentation="Whether to send reports after every transaction."/>
    <contents xsi:type="pptp:TPVariable" name="report_port" documentation="The port to communicate with the report_server."/>
    <contents xsi:type="pptp:TPVariable" name="report_server" documentation="The server to send transaction reports to."/>
    <contents xsi:type="pptp:TPVariable" name="reportdir" documentation="The directory in which to store reports received from the client. Each client gets a separate subdirectory."/>
    <contents xsi:type="pptp:TPVariable" name="reportfrom" documentation="The &#x2018;from&#x2019; email address for the reports."/>
    <contents xsi:type="pptp:TPVariable" name="reports" documentation="The list of reports to generate. All reports are looked for in puppet/reports/name.rb, and multiple report names should be comma-separated (whitespace is okay)."/>
    <contents xsi:type="pptp:TPVariable" name="reportserver" documentation="(Deprecated for &#x2018;report_server&#x2019;) The server to which to send transaction reports." deprecated="true"/>
    <contents xsi:type="pptp:TPVariable" name="reporturl" documentation="The URL used by the http reports processor to send reports"/>
    <contents xsi:type="pptp:TPVariable" name="req_bits" documentation="The bit length of the certificates."/>
    <contents xsi:type="pptp:TPVariable" name="requestdir" documentation="Where host certificate requests are stored."/>
    <contents xsi:type="pptp:TPVariable" name="resourcefile" documentation="The file in which puppet agent stores a list of the resources associated with the retrieved configuration."/>
    <contents xsi:type="pptp:TPVariable" name="rest_authconfig" documentation="The configuration file that defines the rights to the different rest indirections. This can be used as a fine-grained authorization system for puppet master."/>
    <contents xsi:type="pptp:TPVariable" name="route_file" documentation="The YAML file containing indirector route configuration."/>
    <contents xsi:type="pptp:TPVariable" name="rrddir" documentation="The directory where RRD database files are stored. Directories for each reporting host will be created under this directory."/>
    <contents xsi:type="pptp:TPVariable" name="rrdinterval" documentation="How often RRD should expect data. This should match how often the hosts report back to the server."/>
    <contents xsi:type="pptp:TPVariable" name="run_mode" documentation="The effective &#x2018;run mode&#x2019; of the application: master, agent, or user."/>
    <contents xsi:type="pptp:TPVariable" name="rundir" documentation="Where Puppet PID files are kept."/>
    <contents xsi:type="pptp:TPVariable" name="runinterval" documentation="How often puppet agent applies the client configuration; in seconds. Note that a runinterval of 0 means &#x201c;run continuously&#x201d; rather than &#x201c;never run.&#x201d; If you want puppet agent to never run, you should start it with the --no-client option."/>
    <contents xsi:type="pptp:TPVariable" name="sendmail" documentation="Where to find the sendmail binary with which to send email."/>
    <contents xsi:type="pptp:TPVariable" name="serial" documentation="Where the serial number for certificates is stored."/>
    <contents xsi:type="pptp:TPVariable" name="server" documentation="The server to which server puppet agent should connect"/>
    <contents xsi:type="pptp:TPVariable" name="server_datadir" documentation="The directory in which serialized data is stored, usually in a subdirectory."/>
    <contents xsi:type="pptp:TPVariable" name="servertype" documentation="The type of server to use. Currently supported options are webrick and mongrel. If you use mongrel, you will need a proxy in front of the process or processes, since Mongrel cannot speak SSL."/>
    <contents xsi:type="pptp:TPVariable" name="show_diff" documentation="Whether to print a contextual diff when files are being replaced. The diff is printed on stdout, so this option is meaningless unless you are running Puppet interactively. This feature currently requires the diff/lcs Ruby library."/>
    <contents xsi:type="pptp:TPVariable" name="signeddir" documentation="Where the CA stores signed certificates."/>
    <contents xsi:type="pptp:TPVariable" name="smtpserver" documentation="The server through which to send email reports."/>
    <contents xsi:type="pptp:TPVariable" name="splay" documentation="Whether to sleep for a pseudo-random (but consistent) amount of time before a run."/>
    <contents xsi:type="pptp:TPVariable" name="splaylimit" documentation="The maximum time to delay before runs. Defaults to being the same as the run interval."/>
    <contents xsi:type="pptp:TPVariable" name="ssl_client_header" documentation="The header containing an authenticated client&#x2019;s SSL DN. Only used with Mongrel. This header must be set by the proxy to the authenticated client&#x2019;s SSL DN (e.g., /CN=puppet.puppetlabs.com). See http://projects.puppetlabs.com/projects/puppet/wiki/Using_Mongrel for more information."/>
    <contents xsi:type="pptp:TPVariable" name="ssl_client_verify_header" documentation="The header containing the status message of the client verification. Only used with Mongrel. This header must be set by the proxy to &#x2018;SUCCESS&#x2019; if the client successfully authenticated, and anything else otherwise. See http://projects.puppetlabs.com/projects/puppet/wiki/Using_Mongrel for more information."/>
    <contents xsi:type="pptp:TPVariable" name="ssldir" documentation="Where SSL certificates are kept."/>
    <contents xsi:type="pptp:TPVariable" name="statedir" documentation="The directory where Puppet state is stored. Generally, this directory can be removed without causing harm (although it might result in spurious service restarts)."/>
    <contents xsi:type="pptp:TPVariable" name="statefile" documentation="Where puppet agent and puppet master store state associated with the running configuration. In the case of puppet master, this file reflects the state discovered through interacting with clients."/>
    <contents xsi:type="pptp:TPVariable" name="storeconfigs" documentation="Whether to store each client&#x2019;s configuration, including catalogs, facts, and related data. This also enables the import and export of resources in the Puppet language - a mechanism for exchange resources between nodes. By default this uses ActiveRecord and an SQL database to store and query the data; this, in turn, will depend on Rails being available. You can adjust the backend using the storeconfigs_backend setting."/>
    <contents xsi:type="pptp:TPVariable" name="storeconfigs_backend" documentation="Configure the backend terminus used for StoreConfigs. By default, this uses the ActiveRecord store, which directly talks to the database from within the Puppet Master process."/>
    <contents xsi:type="pptp:TPVariable" name="strict_hostname_checking" documentation="Whether to only search for the complete hostname as it is in the certificate when searching for node information in the catalogs."/>
    <contents xsi:type="pptp:TPVariable" name="summarize" documentation="Whether to print a transaction summary."/>
    <contents xsi:type="pptp:TPVariable" name="syslogfacility" documentation="What syslog facility to use when logging to syslog. Syslog has a fixed list of valid facilities, and you must choose one of those; you cannot just make one up."/>
    <contents xsi:type="pptp:TPVariable" name="tagmap" documentation="The mapping between reporting tags and email addresses."/>
    <contents xsi:type="pptp:TPVariable" name="tags" documentation="Tags to use to find resources. If this is set, then only resources tagged with the specified tags will be applied. Values must be comma-separated."/>
    <contents xsi:type="pptp:TPVariable" name="templatedir" documentation="Where Puppet looks for template files. Can be a list of colon-seperated directories."/>
    <contents xsi:type="pptp:TPVariable" name="thin_storeconfigs" documentation="Boolean; wether storeconfigs store in the database only the facts and exported resources. If true, then storeconfigs performance will be higher and still allow exported/collected resources, but other usage external to Puppet might not work"/>
    <contents xsi:type="pptp:TPVariable" name="trace" documentation="Whether to print stack traces on some errors"/>
    <contents xsi:type="pptp:TPVariable" name="use_cached_catalog" documentation="Whether to only use the cached catalog rather than compiling a new catalog on every run. Puppet can be run with this enabled by default and then selectively disabled when a recompile is desired."/>
    <contents xsi:type="pptp:TPVariable" name="usecacheonfailure" documentation="Whether to use the cached configuration when the remote configuration will not compile. This option is useful for testing new configurations, where you want to fix the broken configuration rather than reverting to a known-good one."/>
    <contents xsi:type="pptp:TPVariable" name="user" documentation="The user puppet master should run as."/>
    <contents xsi:type="pptp:TPVariable" name="vardir" documentation="Where Puppet stores dynamic and growing data. The default for this parameter is calculated specially, like confdir_."/>
    <contents xsi:type="pptp:TPVariable" name="yamldir" documentation="The directory in which YAML data is stored, usually in a subdirectory."/>
    <contents xsi:type="pptp:TPVariable" name="zlib" documentation="Boolean; whether to use the zlib library"/>
  </contents>
  <contents xsi:type="pptp:TPVariable" name="environment" documentation="The node's current environment. Available when compiling a catalog for a node."/>
  <contents xsi:type="pptp:TPVariable" name="clientcert" documentation="The node's certname setting. Available when compiling a catalog for a node."/>
  <contents xsi:type="pptp:TPVariable" name="clientversion" documentation="The current version of the puppet agent. Available when compiling a catalog for a node."/>
  <contents xsi:type="pptp:TPVariable" name="servername" documentation="The puppet master&#x2019;s fully-qualified domain name. (Note that this information is gathered from the puppet master by Facter, rather than read from the config files; even if the master&#x2019;s certname is set to something other than its fully-qualified domain name, this variable will still contain the server&#x2019;s fqdn.)"/>
  <contents xsi:type="pptp:TPVariable" name="serverip" documentation="The puppet master's IP address"/>
  <contents xsi:type="pptp:TPVariable" name="serverversion" documentation="The current version of puppet on the puppet master."/>
  <contents xsi:type="pptp:TPVariable" name="trusted" documentation="$trusted will automatically contain trusted node data in future versions"/>
  <functions documentation="Returns all &#xA;  matches throughout the hierarchy --- not just the first match --- as a flattened array of unique values.&#xA;  If any of the matched values are arrays, they're flattened and included in the results.&#xA;  &#xA;  In addition to the required `key` argument, `hiera_array` accepts two additional &#xA;  arguments:&#xA;  &#xA;  - a `default` argument in the second position, providing a string or array to be returned &#xA;    in the absence of  matches to the `key` argument&#xA;  - an `override` argument in the third position, providing a data source to consult for &#xA;    matching values, even if it would not ordinarily be part of the matched hierarchy. &#xA;    If Hiera doesn't find a matching key in the named override data source, it will &#xA;    continue to search through the rest of the hierarchy.&#xA;    &#xA;  If any matched value is a hash, puppet will raise a type mismatch error.&#xA;&#xA;  More thorough examples of `hiera` are available at:  &#xA;  &lt;http://docs.puppetlabs.com/hiera/1/puppet.html#hiera-lookup-functions>" name="hiera_array" rValue="true"/>
  <functions documentation="A boolean function that&#xA;  tells you whether the current container is tagged with the specified tags.&#xA;  The tags are ANDed, so that all of the specified tags must be included for&#xA;  the function to return true." name="tagged" rValue="true"/>
  <functions documentation="Assigns classes to a node&#xA;  using an array merge lookup that retrieves the value for a user-specified key&#xA;  from a Hiera data source.&#xA;&#xA;  To use `hiera_include`, the following configuration is required:&#xA;&#xA;  - A key name to use for classes, e.g. `classes`.&#xA;  - A line in the puppet `sites.pp` file (e.g. `/etc/puppet/manifests/sites.pp`)&#xA;    reading `hiera_include('classes')`. Note that this line must be outside any node&#xA;    definition and below any top-scope variables in use for Hiera lookups.&#xA;  - Class keys in the appropriate data sources. In a data source keyed to a node's role,&#xA;    one might have:&#xA;&#xA;            ---&#xA;            classes:&#xA;              - apache&#xA;              - apache::passenger&#xA;&#xA;  In addition to the required `key` argument, `hiera_include` accepts two additional&#xA;  arguments:&#xA;&#xA;  - a `default` argument in the second position, providing an array to be returned&#xA;    in the absence of matches to the `key` argument&#xA;  - an `override` argument in the third position, providing a data source to consult&#xA;    for matching values, even if it would not ordinarily be part of the matched hierarchy.&#xA;    If Hiera doesn't find a matching key in the named override data source, it will continue&#xA;    to search through the rest of the hierarchy.&#xA;&#xA;  More thorough examples of `hiera_include` are available at:&#xA;  &lt;http://docs.puppetlabs.com/hiera/1/puppet.html#hiera-lookup-functions>" name="hiera_include"/>
  <functions documentation="Call a lambda code block with the given arguments. Since the parameters of the lambda&#xA;are local to the lambda's scope, this can be used to create private sections&#xA;of logic in a class so that the variables are not visible outside of the&#xA;class.&#xA;&#xA;Example:&#xA;&#xA;     # notices the array [1, 2, 'foo']&#xA;     with(1, 2, 'foo') |$x, $y, $z| { notice [$x, $y, $z] }&#xA;&#xA;- since 3.7.0&#xA;- note requires future parser" name="with" rValue="true"/>
  <functions documentation="Fail with a parse error." name="fail"/>
  <functions documentation="Loads an ERB template from a module, evaluates it, and returns the resulting&#xA;  value as a string.&#xA;&#xA;  The argument to this function should be a `&lt;MODULE NAME>/&lt;TEMPLATE FILE>`&#xA;  reference, which will load `&lt;TEMPLATE FILE>` from a module's `templates`&#xA;  directory. (For example, the reference `apache/vhost.conf.erb` will load the&#xA;  file `&lt;MODULES DIRECTORY>/apache/templates/vhost.conf.erb`.)&#xA;&#xA;  This function can also accept:&#xA;&#xA;  * An absolute path, which can load a template file from anywhere on disk.&#xA;  * Multiple arguments, which will evaluate all of the specified templates and&#xA;  return their outputs concatenated into a single string." name="template" rValue="true"/>
  <functions documentation="Applies a parameterized block to each element in a sequence of entries from the first&#xA;argument (_the enumerable_) and returns the last result of the invocation of the parameterized block.&#xA;&#xA;This function takes two mandatory arguments: the first should be an Array, Hash, or something of&#xA;enumerable type, and the last a parameterized block as produced by the puppet syntax:&#xA;&#xA;      $a.reduce |$memo, $x| { ... }&#xA;      reduce($a) |$memo, $x| { ... }&#xA;&#xA;When the first argument is an Array or someting of an enumerable type, the block is called with each entry in turn.&#xA;When the first argument is a hash each entry is converted to an array with `[key, value]` before being&#xA;fed to the block. An optional 'start memo' value may be supplied as an argument between the array/hash&#xA;and mandatory block.&#xA;&#xA;      $a.reduce(start) |$memo, $x| { ... }&#xA;      reduce($a, start) |$memo, $x| { ... }&#xA;&#xA;If no 'start memo' is given, the first invocation of the parameterized block will be given the first and second&#xA;elements of the enumeration, and if the enumerable has fewer than 2 elements, the first&#xA;element is produced as the result of the reduction without invocation of the block.&#xA;&#xA;On each subsequent invocation, the produced value of the invoked parameterized block is given as the memo in the&#xA;next invocation.&#xA;&#xA;Example Using reduce&#xA;&#xA;      # Reduce an array&#xA;      $a = [1,2,3]&#xA;      $a.reduce |$memo, $entry| { $memo + $entry }&#xA;      #=> 6&#xA;&#xA;      # Reduce hash values&#xA;      $a = {a => 1, b => 2, c => 3}&#xA;      $a.reduce |$memo, $entry| { [sum, $memo[1]+$entry[1]] }&#xA;      #=> [sum, 6]&#xA;&#xA;      # reverse a string&#xA;      &quot;abc&quot;.reduce |$memo, $char| { &quot;$char$memo&quot; }&#xA;      #=>&quot;cbe&quot;&#xA;&#xA;It is possible to provide a starting 'memo' as an argument.&#xA;&#xA;Example Using reduce with given start 'memo'&#xA;&#xA;      # Reduce an array&#xA;      $a = [1,2,3]&#xA;      $a.reduce(4) |$memo, $entry| { $memo + $entry }&#xA;      #=> 10&#xA;&#xA;      # Reduce hash values&#xA;      $a = {a => 1, b => 2, c => 3}&#xA;      $a.reduce([na, 4]) |$memo, $entry| { [sum, $memo[1]+$entry[1]] }&#xA;      #=> [sum, 10]&#xA;&#xA;Example Using reduce with an Integer range&#xA;&#xA;      Integer[1,4].reduce |$memo, $x| { $memo + $x }&#xA;      #=> 10&#xA;&#xA;- since 3.2 for Array and Hash&#xA;- since 3.5 for additional enumerable types&#xA;- note requires `parser = future`." name="reduce" rValue="true"/>
  <functions documentation="Evaluates an Embedded Puppet Template (EPP) file and returns the rendered text result as a String.&#xA;&#xA;The first argument to this function should be a `&lt;MODULE NAME>/&lt;TEMPLATE FILE>`&#xA;reference, which will load `&lt;TEMPLATE FILE>` from a module's `templates`&#xA;directory. (For example, the reference `apache/vhost.conf.epp` will load the&#xA;file `&lt;MODULES DIRECTORY>/apache/templates/vhost.conf.epp`.)&#xA;&#xA;The second argument is optional; if present, it should be a hash containing parameters for the&#xA;template. (See below.)&#xA;&#xA;EPP supports the following tags:&#xA;&#xA;* `&lt;%= puppet expression %>` - This tag renders the value of the expression it contains.&#xA;* `&lt;% puppet expression(s) %>` - This tag will execute the expression(s) it contains, but renders nothing.&#xA;* `&lt;%# comment %>` - The tag and its content renders nothing.&#xA;* `&lt;%%` or `%%>` - Renders a literal `&lt;%` or `%>` respectively.&#xA;* `&lt;%-` - Same as `&lt;%` but suppresses any leading whitespace.&#xA;* `-%>` - Same as `%>` but suppresses any trailing whitespace on the same line (including line break).&#xA;* `&lt;%- |parameters| -%>` - When placed as the first tag declares the template's parameters.&#xA;&#xA;File based EPP supports the following visibilities of variables in scope:&#xA;&#xA;* Global scope (i.e. top + node scopes) - global scope is always visible&#xA;* Global + all given arguments - if the EPP template does not declare parameters, and arguments are given&#xA;* Global + declared parameters - if the EPP declares parameters, given argument names must match&#xA;&#xA;EPP supports parameters by placing an optional parameter list as the very first element in the EPP. As an example,&#xA;`&lt;%- |$x, $y, $z = 'unicorn'| -%>` when placed first in the EPP text declares that the parameters `x` and `y` must be&#xA;given as template arguments when calling `inline_epp`, and that `z` if not given as a template argument&#xA;defaults to `'unicorn'`. Template parameters are available as variables, e.g.arguments `$x`, `$y` and `$z` in the example.&#xA;Note that `&lt;%-` must be used or any leading whitespace will be interpreted as text&#xA;&#xA;Arguments are passed to the template by calling `epp` with a Hash as the last argument, where parameters&#xA;are bound to values, e.g. `epp('...', {'x'=>10, 'y'=>20})`. Excess arguments may be given&#xA;(i.e. undeclared parameters) only if the EPP templates does not declare any parameters at all.&#xA;Template parameters shadow variables in outer scopes. File based epp does never have access to variables in the&#xA;scope where the `epp` function is called from.&#xA;&#xA;- See function inline_epp for examples of EPP&#xA;- Since 3.5&#xA;- Requires Future Parser" name="epp" rValue="true"/>
  <functions documentation="Evaluate a template string and return its value.  See&#xA;  [the templating docs](http://docs.puppetlabs.com/guides/templating.html) for&#xA;  more information.  Note that if multiple template strings are specified, their&#xA;  output is all concatenated and returned as the output of the function." name="inline_template" rValue="true"/>
  <functions documentation="Add the specified tags to the containing class&#xA;  or definition.  All contained objects will then acquire that tag, also." name="tag"/>
  <functions documentation="Applies a parameterized block to each element in a sequence of selected entries from the first&#xA;argument and returns the first argument.&#xA;&#xA;This function takes two mandatory arguments: the first should be an Array or a Hash or something that is&#xA;of enumerable type (integer, Integer range, or String), and the second&#xA;a parameterized block as produced by the puppet syntax:&#xA;&#xA;      $a.each |$x| { ... }&#xA;      each($a) |$x| { ... }&#xA;&#xA;When the first argument is an Array (or of enumerable type other than Hash), the parameterized block&#xA;should define one or two block parameters.&#xA;For each application of the block, the next element from the array is selected, and it is passed to&#xA;the block if the block has one parameter. If the block has two parameters, the first is the elements&#xA;index, and the second the value. The index starts from 0.&#xA;&#xA;      $a.each |$index, $value| { ... }&#xA;      each($a) |$index, $value| { ... }&#xA;&#xA;When the first argument is a Hash, the parameterized block should define one or two parameters.&#xA;When one parameter is defined, the iteration is performed with each entry as an array of `[key, value]`,&#xA;and when two parameters are defined the iteration is performed with key and value.&#xA;&#xA;      $a.each |$entry|       { ...&quot;key ${$entry[0]}, value ${$entry[1]}&quot; }&#xA;      $a.each |$key, $value| { ...&quot;key ${key}, value ${value}&quot; }&#xA;&#xA;Example using each:&#xA;&#xA;      [1,2,3].each |$val| { ... }                       # 1, 2, 3&#xA;      [5,6,7].each |$index, $val| { ... }               # (0, 5), (1, 6), (2, 7)&#xA;      {a=>1, b=>2, c=>3}].each |$val| { ... }           # ['a', 1], ['b', 2], ['c', 3]&#xA;      {a=>1, b=>2, c=>3}.each |$key, $val| { ... }      # ('a', 1), ('b', 2), ('c', 3)&#xA;      Integer[ 10, 20 ].each |$index, $value| { ... }   # (0, 10), (1, 11) ...&#xA;      &quot;hello&quot;.each |$char| { ... }                      # 'h', 'e', 'l', 'l', 'o'&#xA;      3.each |$number| { ... }                          # 0, 1, 2&#xA;&#xA;- since 3.2 for Array and Hash&#xA;- since 3.5 for other enumerables&#xA;- note requires `parser = future`" name="each" rValue="true"/>
  <functions documentation="Add another namespace for this class to search.&#xA;    This allows you to create classes with sets of definitions and add&#xA;    those classes to another class's search path.&#xA;&#xA;    Deprecated in Puppet 3.7.0, to be removed in Puppet 4.0.0." name="search"/>
  <functions documentation="Loads a file from a module and returns its contents as a string.&#xA;&#xA;  The argument to this function should be a `&lt;MODULE NAME>/&lt;FILE>`&#xA;  reference, which will load `&lt;FILE>` from a module's `files`&#xA;  directory. (For example, the reference `mysql/mysqltuner.pl` will load the&#xA;  file `&lt;MODULES DIRECTORY>/mysql/files/mysqltuner.pl`.)&#xA;&#xA;  This function can also accept:&#xA;&#xA;  * An absolute path, which can load a file from anywhere on disk.&#xA;  * Multiple arguments, which will return the contents of the **first** file&#xA;  found, skipping any files that don't exist." name="file" rValue="true"/>
  <functions documentation="This is a parser function to read data from external files, this version&#xA;uses CSV files but the concept can easily be adjust for databases, yaml&#xA;or any other queryable data source.&#xA;&#xA;The object of this is to make it obvious when it's being used, rather than&#xA;magically loading data in when a module is loaded I prefer to look at the code&#xA;and see statements like:&#xA;&#xA;    $snmp_contact = extlookup(&quot;snmp_contact&quot;)&#xA;&#xA;The above snippet will load the snmp_contact value from CSV files, this in its&#xA;own is useful but a common construct in puppet manifests is something like this:&#xA;&#xA;    case $domain {&#xA;      &quot;myclient.com&quot;: { $snmp_contact = &quot;John Doe &lt;john@myclient.com>&quot; }&#xA;      default:        { $snmp_contact = &quot;My Support &lt;support@my.com>&quot; }&#xA;    }&#xA;&#xA;Over time there will be a lot of this kind of thing spread all over your manifests&#xA;and adding an additional client involves grepping through manifests to find all the&#xA;places where you have constructs like this.&#xA;&#xA;This is a data problem and shouldn't be handled in code, and using this function you&#xA;can do just that.&#xA;&#xA;First you configure it in site.pp:&#xA;&#xA;    $extlookup_datadir = &quot;/etc/puppet/manifests/extdata&quot;&#xA;    $extlookup_precedence = [&quot;%{fqdn}&quot;, &quot;domain_%{domain}&quot;, &quot;common&quot;]&#xA;&#xA;The array tells the code how to resolve values, first it will try to find it in&#xA;web1.myclient.com.csv then in domain_myclient.com.csv and finally in common.csv&#xA;&#xA;Now create the following data files in /etc/puppet/manifests/extdata:&#xA;&#xA;    domain_myclient.com.csv:&#xA;      snmp_contact,John Doe &lt;john@myclient.com>&#xA;      root_contact,support@%{domain}&#xA;      client_trusted_ips,192.168.1.130,192.168.10.0/24&#xA;&#xA;    common.csv:&#xA;      snmp_contact,My Support &lt;support@my.com>&#xA;      root_contact,support@my.com&#xA;&#xA;Now you can replace the case statement with the simple single line to achieve&#xA;the exact same outcome:&#xA;&#xA;    $snmp_contact = extlookup(&quot;snmp_contact&quot;)&#xA;&#xA;The above code shows some other features, you can use any fact or variable that&#xA;is in scope by simply using %{varname} in your data files, you can return arrays&#xA;by just having multiple values in the csv after the initial variable name.&#xA;&#xA;In the event that a variable is nowhere to be found a critical error will be raised&#xA;that will prevent your manifest from compiling, this is to avoid accidentally putting&#xA;in empty values etc.  You can however specify a default value:&#xA;&#xA;    $ntp_servers = extlookup(&quot;ntp_servers&quot;, &quot;1.${country}.pool.ntp.org&quot;)&#xA;&#xA;In this case it will default to &quot;1.${country}.pool.ntp.org&quot; if nothing is defined in&#xA;any data file.&#xA;&#xA;You can also specify an additional data file to search first before any others at use&#xA;time, for example:&#xA;&#xA;    $version = extlookup(&quot;rsyslog_version&quot;, &quot;present&quot;, &quot;packages&quot;)&#xA;    package{&quot;rsyslog&quot;: ensure => $version }&#xA;&#xA;This will look for a version configured in packages.csv and then in the rest as configured&#xA;by $extlookup_precedence if it's not found anywhere it will default to `present`, this kind&#xA;of use case makes puppet a lot nicer for managing large amounts of packages since you do not&#xA;need to edit a load of manifests to do simple things like adjust a desired version number.&#xA;&#xA;Precedence values can have variables embedded in them in the form %{fqdn}, you could for example do:&#xA;&#xA;    $extlookup_precedence = [&quot;hosts/%{fqdn}&quot;, &quot;common&quot;]&#xA;&#xA;This will result in /path/to/extdata/hosts/your.box.com.csv being searched.&#xA;&#xA;This is for back compatibility to interpolate variables with %. % interpolation is a workaround for a problem that has been fixed: Puppet variable interpolation at top scope used to only happen on each run." name="extlookup" rValue="true"/>
  <functions documentation="Perform regexp replacement on a string or array of strings.&#xA;&#xA;* *Parameters* (in order):&#xA;    * _target_  The string or array of strings to operate on.  If an array, the replacement will be performed on each of the elements in the array, and the return value will be an array.&#xA;    * _regexp_  The regular expression matching the target string.  If you want it anchored at the start and or end of the string, you must do that with ^ and $ yourself.&#xA;    * _replacement_  Replacement string. Can contain backreferences to what was matched using \0 (whole match), \1 (first set of parentheses), and so on.&#xA;    * _flags_  Optional. String of single letter flags for how the regexp is interpreted:&#xA;        - *E*         Extended regexps&#xA;        - *I*         Ignore case in regexps&#xA;        - *M*         Multiline regexps&#xA;        - *G*         Global replacement; all occurrences of the regexp in each target string will be replaced.  Without this, only the first occurrence will be replaced.&#xA;    * _encoding_  Optional.  How to handle multibyte characters.  A single-character string with the following values:&#xA;        - *N*         None&#xA;        - *E*         EUC&#xA;        - *S*         SJIS&#xA;        - *U*         UTF-8&#xA;&#xA;* *Examples*&#xA;&#xA;Get the third octet from the node's IP address:&#xA;&#xA;    $i3 = regsubst($ipaddress,'^(\d+)\.(\d+)\.(\d+)\.(\d+)$','\3')&#xA;&#xA;Put angle brackets around each octet in the node's IP address:&#xA;&#xA;    $x = regsubst($ipaddress, '([0-9]+)', '&lt;\1>', 'G')" name="regsubst" rValue="true"/>
  <functions documentation="Returns a SHA1 hash value from a provided string." name="sha1" rValue="true"/>
  <functions documentation="Contain one or more classes inside the current class. If any of&#xA;these classes are undeclared, they will be declared as if called with the&#xA;`include` function. Accepts a class name, an array of class names, or a&#xA;comma-separated list of class names.&#xA;&#xA;A contained class will not be applied before the containing class is&#xA;begun, and will be finished before the containing class is finished.&#xA;&#xA;When the future parser is used, you must use the class's full name;&#xA;relative names are no longer allowed. In addition to names in string form,&#xA;you may also directly use Class and Resource Type values that are produced by&#xA;the future parser's resource and relationship expressions." name="contain"/>
  <functions documentation="Evaluate one or more classes,  adding the required class as a dependency.&#xA;&#xA;The relationship metaparameters work well for specifying relationships&#xA;between individual resources, but they can be clumsy for specifying&#xA;relationships between classes.  This function is a superset of the&#xA;'include' function, adding a class relationship so that the requiring&#xA;class depends on the required class.&#xA;&#xA;Warning: using require in place of include can lead to unwanted dependency cycles.&#xA;&#xA;For instance the following manifest, with 'require' instead of 'include' would produce a nasty dependence cycle, because notify imposes a before between File[/foo] and Service[foo]:&#xA;&#xA;    class myservice {&#xA;      service { foo: ensure => running }&#xA;    }&#xA;&#xA;    class otherstuff {&#xA;      include myservice&#xA;      file { '/foo': notify => Service[foo] }&#xA;    }&#xA;&#xA;Note that this function only works with clients 0.25 and later, and it will&#xA;fail if used with earlier clients.&#xA;&#xA;When the future parser is used, you must use the class's full name;&#xA;relative names are no longer allowed. In addition to names in string form,&#xA;you may also directly use Class and Resource Type values that are produced by&#xA;the future parser's resource and relationship expressions." name="require"/>
  <functions documentation="Make a virtual object real.  This is useful&#xA;    when you want to know the name of the virtual object and don't want to&#xA;    bother with a full collection.  It is slightly faster than a collection,&#xA;    and, of course, is a bit shorter.  You must pass the object using a&#xA;    reference; e.g.: `realize User[luke]`." name="realize"/>
  <functions documentation="Converts a hash into a set of resources and adds them to the catalog.&#xA;&#xA;    This function takes two mandatory arguments: a resource type, and a hash describing&#xA;    a set of resources. The hash should be in the form `{title => {parameters} }`:&#xA;&#xA;        # A hash of user resources:&#xA;        $myusers = {&#xA;          'nick' => { uid    => '1330',&#xA;                      gid    => allstaff,&#xA;                      groups => ['developers', 'operations', 'release'], },&#xA;          'dan'  => { uid    => '1308',&#xA;                      gid    => allstaff,&#xA;                      groups => ['developers', 'prosvc', 'release'], },&#xA;        }&#xA;&#xA;        create_resources(user, $myusers)&#xA;&#xA;    A third, optional parameter may be given, also as a hash:&#xA;&#xA;        $defaults = {&#xA;          'ensure'   => present,&#xA;          'provider' => 'ldap',&#xA;        }&#xA;&#xA;        create_resources(user, $myusers, $defaults)&#xA;&#xA;    The values given on the third argument are added to the parameters of each resource&#xA;    present in the set given on the second argument. If a parameter is present on both&#xA;    the second and third arguments, the one on the second argument takes precedence.&#xA;&#xA;    This function can be used to create defined resources and classes, as well&#xA;    as native resources.&#xA;&#xA;    Virtual and Exported resources may be created by prefixing the type name&#xA;    with @ or @@ respectively.  For example, the $myusers hash may be exported&#xA;    in the following manner:&#xA;&#xA;        create_resources(&quot;@@user&quot;, $myusers)&#xA;&#xA;    The $myusers may be declared as virtual resources using:&#xA;&#xA;        create_resources(&quot;@user&quot;, $myusers)" name="create_resources"/>
  <functions documentation="Calls an external command on the Puppet master and returns&#xA;    the results of the command.  Any arguments are passed to the external command as&#xA;    arguments.  If the generator does not exit with return code of 0,&#xA;    the generator is considered to have failed and a parse error is&#xA;    thrown.  Generators can only have file separators, alphanumerics, dashes,&#xA;    and periods in them.  This function will attempt to protect you from&#xA;    malicious generator calls (e.g., those with '..' in them), but it can&#xA;    never be entirely safe.  No subshell is used to execute&#xA;    generators, so all shell metacharacters are passed directly to&#xA;    the generator." name="generate" rValue="true"/>
  <functions documentation="Returns the match result of matching a String or Array[String] with one of:&#xA;&#xA;* Regexp&#xA;* String - transformed to a Regexp&#xA;* Pattern type&#xA;* Regexp type&#xA;&#xA;Returns An Array with the entire match at index 0, and each subsequent submatch at index 1-n.&#xA;If there was no match `undef` is returned. If the value to match is an Array, a array&#xA;with mapped match results is returned.&#xA;&#xA;Example matching:&#xA;&#xA;  &quot;abc123&quot;.match(/([a-z]+)[1-9]+/)    # => [&quot;abc&quot;]&#xA;  &quot;abc123&quot;.match(/([a-z]+)([1-9]+)/)  # => [&quot;abc&quot;, &quot;123&quot;]&#xA;&#xA;See the documentation for &quot;The Puppet Type System&quot; for more information about types.&#xA;&#xA;- since 3.7.0&#xA;- note requires future parser" name="match"/>
  <functions documentation="Declares one or more classes, causing the resources in them to be&#xA;evaluated and added to the catalog. Accepts a class name, an array of class&#xA;names, or a comma-separated list of class names.&#xA;&#xA;The `include` function can be used multiple times on the same class and will&#xA;only declare a given class once. If a class declared with `include` has any&#xA;parameters, Puppet will automatically look up values for them in Hiera, using&#xA;`&lt;class name>::&lt;parameter name>` as the lookup key.&#xA;&#xA;Contrast this behavior with resource-like class declarations&#xA;(`class {'name': parameter => 'value',}`), which must be used in only one place&#xA;per class and can directly set parameters. You should avoid using both `include`&#xA;and resource-like declarations with the same class.&#xA;&#xA;The `include` function does not cause classes to be contained in the class&#xA;where they are declared. For that, see the `contain` function. It also&#xA;does not create a dependency relationship between the declared class and the&#xA;surrounding class; for that, see the `require` function.&#xA;&#xA;When the future parser is used, you must use the class's full name;&#xA;relative names are no longer allowed. In addition to names in string form,&#xA;you may also directly use Class and Resource Type values that are produced by&#xA;the future parser's resource and relationship expressions." name="include"/>
  <functions documentation="Applies a parameterized block to each element in a sequence of entries from the first&#xA;argument and returns an array with the result of each invocation of the parameterized block.&#xA;&#xA;This function takes two mandatory arguments: the first should be an Array, Hash, or of Enumerable type&#xA;(integer, Integer range, or String), and the second a parameterized block as produced by the puppet syntax:&#xA;&#xA;      $a.map |$x| { ... }&#xA;      map($a) |$x| { ... }&#xA;&#xA;When the first argument `$a` is an Array or of enumerable type, the block is called with each entry in turn.&#xA;When the first argument is a hash the entry is an array with `[key, value]`.&#xA;&#xA;Example Using map with two arguments&#xA;&#xA;     # Turns hash into array of values&#xA;     $a.map |$x|{ $x[1] }&#xA;&#xA;     # Turns hash into array of keys&#xA;     $a.map |$x| { $x[0] }&#xA;&#xA;When using a block with 2 parameters, the element's index (starting from 0) for an array, and the key for a hash&#xA;is given to the block's first parameter, and the value is given to the block's second parameter.args.&#xA;&#xA;Example Using map with two arguments&#xA;&#xA;     # Turns hash into array of values&#xA;     $a.map |$key,$val|{ $val }&#xA;&#xA;     # Turns hash into array of keys&#xA;     $a.map |$key,$val|{ $key }&#xA;&#xA;- since 3.4 for Array and Hash&#xA;- since 3.5 for other enumerables, and support for blocks with 2 parameters&#xA;- note requires `parser = future`" name="map" rValue="true"/>
  <functions documentation="Returns a MD5 hash value from a provided string." name="md5" rValue="true"/>
  <functions documentation="Quote and concatenate arguments for use in Bourne shell.&#xA;&#xA;    Each argument is quoted separately, and then all are concatenated&#xA;    with spaces.  If an argument is an array, the elements of that&#xA;    array is interpolated within the rest of the arguments; this makes&#xA;    it possible to have an array of arguments and pass that array to&#xA;    shellquote instead of having to specify each argument&#xA;    individually in the call." name="shellquote" rValue="true"/>
  <functions documentation="Split a string variable into an array using the specified split regexp.&#xA;&#xA;*Example:*&#xA;&#xA;    $string     = 'v1.v2:v3.v4'&#xA;    $array_var1 = split($string, ':')&#xA;    $array_var2 = split($string, '[.]')&#xA;    $array_var3 = split($string, '[.:]')&#xA;&#xA;`$array_var1` now holds the result `['v1.v2', 'v3.v4']`,&#xA;while `$array_var2` holds `['v1', 'v2:v3', 'v4']`, and&#xA;`$array_var3` holds `['v1', 'v2', 'v3', 'v4']`.&#xA;&#xA;Note that in the second example, we split on a literal string that contains&#xA;a regexp meta-character (.), which must be escaped.  A simple&#xA;way to do that for a single character is to enclose it in square&#xA;brackets; a backslash will also escape a single character." name="split" rValue="true"/>
  <functions documentation="Evaluates an Embedded Puppet Template (EPP) string and returns the rendered text result as a String.&#xA;&#xA;EPP support the following tags:&#xA;&#xA;* `&lt;%= puppet expression %>` - This tag renders the value of the expression it contains.&#xA;* `&lt;% puppet expression(s) %>` - This tag will execute the expression(s) it contains, but renders nothing.&#xA;* `&lt;%# comment %>` - The tag and its content renders nothing.&#xA;* `&lt;%%` or `%%>` - Renders a literal `&lt;%` or `%>` respectively.&#xA;* `&lt;%-` - Same as `&lt;%` but suppresses any leading whitespace.&#xA;* `-%>` - Same as `%>` but suppresses any trailing whitespace on the same line (including line break).&#xA;* `&lt;%- |parameters| -%>` - When placed as the first tag declares the template's parameters.&#xA;&#xA;Inline EPP supports the following visibilities of variables in scope which depends on how EPP parameters&#xA;are used - see further below:&#xA;&#xA;* Global scope (i.e. top + node scopes) - global scope is always visible&#xA;* Global + Enclosing scope - if the EPP template does not declare parameters, and no arguments are given&#xA;* Global + all given arguments - if the EPP template does not declare parameters, and arguments are given&#xA;* Global + declared parameters - if the EPP declares parameters, given argument names must match&#xA;&#xA;EPP supports parameters by placing an optional parameter list as the very first element in the EPP. As an example,&#xA;`&lt;%- |$x, $y, $z='unicorn'| -%>` when placed first in the EPP text declares that the parameters `x` and `y` must be&#xA;given as template arguments when calling `inline_epp`, and that `z` if not given as a template argument&#xA;defaults to `'unicorn'`. Template parameters are available as variables, e.g.arguments `$x`, `$y` and `$z` in the example.&#xA;Note that `&lt;%-` must be used or any leading whitespace will be interpreted as text&#xA;&#xA;Arguments are passed to the template by calling `inline_epp` with a Hash as the last argument, where parameters&#xA;are bound to values, e.g. `inline_epp('...', {'x'=>10, 'y'=>20})`. Excess arguments may be given&#xA;(i.e. undeclared parameters) only if the EPP templates does not declare any parameters at all.&#xA;Template parameters shadow variables in outer scopes.&#xA;&#xA;Note: An inline template is best stated using a single-quoted string, or a heredoc since a double-quoted string&#xA;is subject to expression interpolation before the string is parsed as an EPP template. Here are examples&#xA;(using heredoc to define the EPP text):&#xA;&#xA;    # produces 'Hello local variable world!'&#xA;    $x ='local variable'&#xA;    inline_epptemplate(@(END:epp))&#xA;    &lt;%- |$x| -%>&#xA;    Hello &lt;%= $x %> world!&#xA;    END&#xA;&#xA;    # produces 'Hello given argument world!'&#xA;    $x ='local variable world'&#xA;    inline_epptemplate(@(END:epp), { x =>'given argument'})&#xA;    &lt;%- |$x| -%>&#xA;    Hello &lt;%= $x %> world!&#xA;    END&#xA;&#xA;    # produces 'Hello given argument world!'&#xA;    $x ='local variable world'&#xA;    inline_epptemplate(@(END:epp), { x =>'given argument'})&#xA;    &lt;%- |$x| -%>&#xA;    Hello &lt;%= $x %>!&#xA;    END&#xA;&#xA;    # results in error, missing value for y&#xA;    $x ='local variable world'&#xA;    inline_epptemplate(@(END:epp), { x =>'given argument'})&#xA;    &lt;%- |$x, $y| -%>&#xA;    Hello &lt;%= $x %>!&#xA;    END&#xA;&#xA;    # Produces 'Hello given argument planet'&#xA;    $x ='local variable world'&#xA;    inline_epptemplate(@(END:epp), { x =>'given argument'})&#xA;    &lt;%- |$x, $y=planet| -%>&#xA;    Hello &lt;%= $x %> &lt;%= $y %>!&#xA;    END&#xA;&#xA;- Since 3.5&#xA;- Requires Future Parser" name="inline_epp" rValue="true"/>
  <functions documentation="Returns a hash value from a provided string using the digest_algorithm setting from the Puppet config file." name="digest" rValue="true"/>
  <functions documentation="Returns a merged hash of matches from throughout the hierarchy. In cases where two or &#xA;  more hashes share keys, the hierarchy  order determines which key/value pair will be &#xA;  used in the returned hash, with the pair in the highest priority data source winning.&#xA;  &#xA;  In addition to the required `key` argument, `hiera_hash` accepts two additional &#xA;  arguments:&#xA;  &#xA;  - a `default` argument in the second position, providing a  hash to be returned in the &#xA;  absence of any matches for the `key` argument&#xA;  - an `override` argument in the third position, providing  a data source to insert at &#xA;  the top of the hierarchy, even if it would not ordinarily match during a Hiera data &#xA;  source lookup. If Hiera doesn't find a match in the named override data source, it will &#xA;  continue to search through the rest of the hierarchy.&#xA;    &#xA;  `hiera_hash` expects that all values returned will be hashes. If any of the values &#xA;  found in the data sources are strings or arrays, puppet will raise a type mismatch error.&#xA;&#xA;  More thorough examples of `hiera_hash` are available at:  &#xA;  &lt;http://docs.puppetlabs.com/hiera/1/puppet.html#hiera-lookup-functions>" name="hiera_hash" rValue="true"/>
  <functions documentation="Performs a&#xA;  standard priority lookup and returns the most specific value for a given key.&#xA;  The returned value can be data of any type (strings, arrays, or hashes). &#xA;&#xA;  In addition to the required `key` argument, `hiera` accepts two additional&#xA;  arguments:&#xA;&#xA;  - a `default` argument in the second position, providing a value to be&#xA;    returned in the absence of matches to the `key` argument&#xA;  - an `override` argument in the third position, providing a data source&#xA;    to consult for matching values, even if it would not ordinarily be&#xA;    part of the matched hierarchy. If Hiera doesn't find a matching key&#xA;    in the named override data source, it will continue to search through the&#xA;    rest of the hierarchy.&#xA;&#xA;  More thorough examples of `hiera` are available at:  &#xA;  &lt;http://docs.puppetlabs.com/hiera/1/puppet.html#hiera-lookup-functions>" name="hiera" rValue="true"/>
  <functions documentation="Usage: `fqdn_rand(MAX, [SEED])`. MAX is required and must be a positive&#xA;  integer; SEED is optional and may be any number or string.&#xA;&#xA;  Generates a random whole number greater than or equal to 0 and less than MAX,&#xA;  combining the `$fqdn` fact and the value of SEED for repeatable randomness.&#xA;  (That is, each node will get a different random number from this function, but&#xA;  a given node's result will be the same every time unless its hostname changes.)&#xA;&#xA;  This function is usually used for spacing out runs of resource-intensive cron&#xA;  tasks that run on many nodes, which could cause a thundering herd or degrade&#xA;  other services if they all fire at once. Adding a SEED can be useful when you&#xA;  have more than one such task and need several unrelated random numbers per&#xA;  node. (For example, `fqdn_rand(30)`, `fqdn_rand(30, 'expensive job 1')`, and&#xA;  `fqdn_rand(30, 'expensive job 2')` will produce totally different numbers.)" name="fqdn_rand" rValue="true"/>
  <functions documentation="Returns the given value if it is an instance of the given type, and raises an error otherwise.&#xA;Optionally, if a block is given (accepting two parameters), it will be called instead of raising&#xA;an error. This to enable giving the user richer feedback, or to supply a default value.&#xA;&#xA;Example: assert that `$b` is a non empty `String` and assign to `$a`:&#xA;&#xA;  $a = assert_type(String[1], $b)&#xA;&#xA;Example using custom error message:&#xA;&#xA;  $a = assert_type(String[1], $b) |$expected, $actual| {&#xA;    fail('The name cannot be empty')&#xA;  }&#xA;&#xA;Example, using a warning and a default:&#xA;&#xA;  $a = assert_type(String[1], $b) |$expected, $actual| {&#xA;    warning('Name is empty, using default')&#xA;    'anonymous'&#xA;  }&#xA;&#xA;See the documentation for 'The Puppet Type System' for more information about types.&#xA;- since Puppet 3.7&#xA;- requires future parser/evaluator" name="assert_type" rValue="true"/>
  <functions documentation="Determine whether&#xA;  a given class or resource type is defined. This function can also determine whether a&#xA;  specific resource has been declared, or whether a variable has been assigned a value&#xA;  (including undef...as opposed to never having been assigned anything). Returns true&#xA;  or false. Accepts class names, type names, resource references, and variable&#xA;  reference strings of the form '$name'.  When more than one argument is&#xA;  supplied, defined() returns true if any are defined.&#xA;&#xA;  The `defined` function checks both native and defined types, including types&#xA;  provided as plugins via modules. Types and classes are both checked using their names:&#xA;&#xA;      defined(&quot;file&quot;)&#xA;      defined(&quot;customtype&quot;)&#xA;      defined(&quot;foo&quot;)&#xA;      defined(&quot;foo::bar&quot;)&#xA;      defined('$name')&#xA;&#xA;  Resource declarations are checked using resource references, e.g.&#xA;  `defined( File['/tmp/myfile'] )`. Checking whether a given resource&#xA;  has been declared is, unfortunately, dependent on the parse order of&#xA;  the configuration, and the following code will not work:&#xA;&#xA;      if defined(File['/tmp/foo']) {&#xA;          notify { &quot;This configuration includes the /tmp/foo file.&quot;:}&#xA;      }&#xA;      file { &quot;/tmp/foo&quot;:&#xA;          ensure => present,&#xA;      }&#xA;&#xA;  However, this order requirement refers to parse order only, and ordering of&#xA;  resources in the configuration graph (e.g. with `before` or `require`) does not&#xA;  affect the behavior of `defined`.&#xA;&#xA;  If the future parser is in effect, you may also search using types:&#xA;&#xA;      defined(Resource['file','/some/file'])&#xA;      defined(File['/some/file'])&#xA;      defined(Class['foo'])&#xA;&#xA; - Since 2.7.0&#xA; - Since 3.6.0 variable reference and future parser types" name="defined" rValue="true"/>
  <functions documentation="Compares two version numbers.&#xA;&#xA;Prototype:&#xA;&#xA;    $result = versioncmp(a, b)&#xA;&#xA;Where a and b are arbitrary version strings.&#xA;&#xA;This function returns:&#xA;&#xA;* `1` if version a is greater than version b&#xA;* `0` if the versions are equal&#xA;* `-1` if version a is less than version b&#xA;&#xA;Example:&#xA;&#xA;    if versioncmp('2.6-1', '2.4.5') > 0 {&#xA;        notice('2.6-1 is > than 2.4.5')&#xA;    }&#xA;&#xA;This function uses the same version comparison algorithm used by Puppet's&#xA;`package` type." name="versioncmp" rValue="true"/>
  <functions documentation="Looks up data defined using Puppet Bindings and Hiera.&#xA;The function is callable with one to three arguments and optionally with a code block to further process the result.&#xA;&#xA;The lookup function can be called in one of these ways:&#xA;&#xA;    lookup(name)&#xA;    lookup(name, type)&#xA;    lookup(name, type, default)&#xA;    lookup(options_hash)&#xA;    lookup(name, options_hash)&#xA;&#xA;The function may optionally be called with a code block / lambda with the following signatures:&#xA;&#xA;    lookup(...) |$result| { ... }&#xA;    lookup(...) |$name, $result| { ... }&#xA;    lookup(...) |$name, $result, $default| { ... }&#xA;&#xA;The longer signatures are useful when the block needs to raise an error (it can report the name), or&#xA;if it needs to know if the given default value was selected.&#xA;&#xA;The code block receives the following three arguments:&#xA;&#xA;* The `$name` is the last name that was looked up (*the* name if only one name was looked up)&#xA;* The `$result` is the looked up value (or the default value if not found).&#xA;* The `$default` is the given default value (`undef` if not given).&#xA;&#xA;The block, if present, is called with the result from the lookup. The value produced by the block is also what is&#xA;produced by the `lookup` function.&#xA;When a block is used, it is the users responsibility to call `error` if the result does not meet additional&#xA;criteria, or if an undef value is not acceptable. If a value is not found, and a default has been&#xA;specified, the default value is given to the block.&#xA;&#xA;The content of the options hash is:&#xA;&#xA;* `name` - The name or array of names to lookup (first found is returned)&#xA;* `type` - The type to assert (a Type or a type specification in string form)&#xA;* `default` - The default value if there was no value found (must comply with the data type)&#xA;* `accept_undef` - (default `false`) An `undef` result is accepted if this options is set to `true`.&#xA;* `override` - a hash with map from names to values that are used instead of the underlying bindings. If the name&#xA;  is found here it wins. Defaults to an empty hash.&#xA;* `extra` - a hash with map from names to values that are used as a last resort to obtain a value. Defaults to an&#xA;  empty hash.&#xA;&#xA;When the call is on the form `lookup(name, options_hash)`, or `lookup(name, type, options_hash)`, the given name&#xA;argument wins over the `options_hash['name']`.&#xA;&#xA;The search order is `override` (if given), then `binder`, then `hiera` and finally `extra` (if given). The first to produce&#xA;a value other than undef for a given name wins.&#xA;&#xA;The type specification is one of:&#xA;&#xA;  * A type in the Puppet Type System, e.g.:&#xA;    * `Integer`, an integral value with optional range e.g.:&#xA;      * `Integer[0, default]` - 0 or positive&#xA;      * `Integer[default, -1]` - negative, &#xA;      * `Integer[1,100]` - value between 1 and 100 inclusive&#xA;    * `String`- any string&#xA;    * `Float` - floating point number (same signature as for Integer for `Integer` ranges)&#xA;    * `Boolean` - true of false (strict)&#xA;    * `Array` - an array (of Data by default), or parameterized as `Array[&lt;element_type>]`, where&#xA;      `&lt;element_type>` is the expected type of elements&#xA;    * `Hash`,  - a hash (of default `Literal` keys and `Data` values), or parameterized as&#xA;      `Hash[&lt;value_type>]`, `Hash[&lt;key_type>, &lt;value_type>]`, where `&lt;key_type>`, and&#xA;      `&lt;value_type>` are the types of the keys and values respectively&#xA;      (key is `Literal` by default).&#xA;    * `Data` - abstract type representing any `Literal`, `Array[Data]`, or `Hash[Literal, Data]`&#xA;    * `Pattern[&lt;p1>, &lt;p2>, ..., &lt;pn>]` - an enumeration of valid patterns (one or more) where&#xA;       a pattern is a regular expression string or regular expression,&#xA;       e.g. `Pattern['.com$', '.net$']`, `Pattern[/[a-z]+[0-9]+/]` &#xA;    * `Enum[&lt;s1>, &lt;s2>, ..., &lt;sn>]`, - an enumeration of exact string values (one or more)&#xA;       e.g. `Enum[blue, red, green]`.&#xA;    * `Variant[&lt;t1>, &lt;t2>,...&lt;tn>]` - matches one of the listed types (at least one must be given)&#xA;      e.g. `Variant[Integer[8000,8999], Integer[20000, 99999]]` to accept a value in either range&#xA;    * `Regexp`- a regular expression (i.e. the result is a regular expression, not a string&#xA;       matching a regular expression).&#xA;  * A string containing a type description - one of the types as shown above but in string form.&#xA;&#xA;If the function is called without specifying a default value, and nothing is bound to the given name &#xA;an error is raised unless the option `accept_undef` is true. If a block is given it must produce an acceptable&#xA;value (or call `error`). If the block does not produce an acceptable value an error is&#xA;raised.&#xA;&#xA;Examples:&#xA;&#xA;When called with one argument; **the name**, it&#xA;returns the bound value with the given name after having  asserted it has the default datatype `Data`:&#xA;&#xA;    lookup('the_name')&#xA;&#xA;When called with two arguments; **the name**, and **the expected type**, it&#xA;returns the bound value with the given name after having asserted it has the given data&#xA;type ('String' in the example):&#xA;&#xA;    lookup('the_name', 'String') # 3.x&#xA;    lookup('the_name', String)   # parser future&#xA;&#xA;When called with three arguments, **the name**, the **expected type**, and a **default**, it&#xA;returns the bound value with the given name, or the default after having asserted the value&#xA;has the given data type (`String` in the example above):&#xA;&#xA;    lookup('the_name', 'String', 'Fred') # 3x&#xA;    lookup('the_name', String, 'Fred')   # parser future&#xA;&#xA;Using a lambda to process the looked up result - asserting that it starts with an upper case letter:&#xA;&#xA;    # only with parser future&#xA;    lookup('the_size', Integer[1,100]) |$result| {&#xA;      if $large_value_allowed and $result > 10&#xA;        { error 'Values larger than 10 are not allowed'}&#xA;      $result&#xA;    }&#xA;&#xA;Including the name in the error&#xA;&#xA;    # only with parser future&#xA;    lookup('the_size', Integer[1,100]) |$name, $result| {&#xA;      if $large_value_allowed and $result > 10&#xA;        { error 'The bound value for '${name}' can not be larger than 10 in this configuration'}&#xA;      $result&#xA;    }&#xA;&#xA;When using a block, the value it produces is also asserted against the given type, and it may not be&#xA;`undef` unless the option `'accept_undef'` is `true`.&#xA;&#xA;All options work as the corresponding (direct) argument. The `first_found` option and&#xA;`accept_undef` are however only available as options.&#xA;&#xA;Using first_found semantics option to return the first name that has a bound value:&#xA;&#xA;    lookup(['apache::port', 'nginx::port'], 'Integer', 80)&#xA;&#xA;If you want to make lookup return undef when no value was found instead of raising an error:&#xA;&#xA;     $are_you_there = lookup('peekaboo', { accept_undef => true} )&#xA;     $are_you_there = lookup('peekaboo', { accept_undef => true}) |$result| { $result }" name="lookup" rValue="true"/>
  <functions documentation="Perform printf-style formatting of text.&#xA;&#xA;      The first parameter is format string describing how the rest of the parameters should be formatted.  See the documentation for the `Kernel::sprintf` function in Ruby for all the details." name="sprintf" rValue="true"/>
  <functions documentation="Applies a parameterized block to each element in a sequence of entries from the first&#xA; argument and returns an array or hash (same type as left operand for array/hash, and array for&#xA; other enumerable types) with the entries for which the block evaluates to `true`.&#xA;&#xA; This function takes two mandatory arguments: the first should be an Array, a Hash, or an&#xA; Enumerable object (integer, Integer range, or String),&#xA; and the second a parameterized block as produced by the puppet syntax:&#xA;&#xA;       $a.filter |$x| { ... }&#xA;       filter($a) |$x| { ... }&#xA;&#xA; When the first argument is something other than a Hash, the block is called with each entry in turn.&#xA; When the first argument is a Hash the entry is an array with `[key, value]`.&#xA;&#xA; Example Using filter with one parameter&#xA;&#xA;       # selects all that end with berry&#xA;       $a = [&quot;raspberry&quot;, &quot;blueberry&quot;, &quot;orange&quot;]&#xA;       $a.filter |$x| { $x =~ /berry$/ }          # rasberry, blueberry&#xA;&#xA; If the block defines two parameters, they will be set to `index, value` (with index starting at 0) for all&#xA; enumerables except Hash, and to `key, value` for a Hash.&#xA;&#xA;Example Using filter with two parameters&#xA;&#xA;     # selects all that end with 'berry' at an even numbered index&#xA;     $a = [&quot;raspberry&quot;, &quot;blueberry&quot;, &quot;orange&quot;]&#xA;     $a.filter |$index, $x| { $index % 2 == 0 and $x =~ /berry$/ } # raspberry&#xA;&#xA;     # selects all that end with 'berry' and value >= 1&#xA;     $a = {&quot;raspberry&quot;=>0, &quot;blueberry&quot;=>1, &quot;orange&quot;=>1}&#xA;     $a.filter |$key, $x| { $x =~ /berry$/ and $x >= 1 } # blueberry&#xA;&#xA;- since 3.4 for Array and Hash&#xA;- since 3.5 for other enumerables&#xA;- note requires `parser = future`" name="filter"/>
  <functions documentation="Applies a parameterized block to each _slice_ of elements in a sequence of selected entries from the first&#xA;argument and returns the first argument, or if no block is given returns a new array with a concatenation of&#xA;the slices.&#xA;&#xA;This function takes two mandatory arguments: the first, `$a`, should be an Array, Hash, or something of&#xA;enumerable type (integer, Integer range, or String), and the second, `$n`, the number of elements to include&#xA;in each slice. The optional third argument should be a a parameterized block as produced by the puppet syntax:&#xA;&#xA;    $a.slice($n) |$x| { ... }&#xA;    slice($a) |$x| { ... }&#xA;&#xA;The parameterized block should have either one parameter (receiving an array with the slice), or the same number&#xA;of parameters as specified by the slice size (each parameter receiving its part of the slice).&#xA;In case there are fewer remaining elements than the slice size for the last slice it will contain the remaining&#xA;elements. When the block has multiple parameters, excess parameters are set to undef for an array or&#xA;enumerable type, and to empty arrays for a Hash.&#xA;&#xA;    $a.slice(2) |$first, $second| { ... }&#xA;&#xA;When the first argument is a Hash, each `key,value` entry is counted as one, e.g, a slice size of 2 will produce&#xA;an array of two arrays with key, and value.&#xA;&#xA;Example Using slice with Hash&#xA;&#xA;    $a.slice(2) |$entry|          { notice &quot;first ${$entry[0]}, second ${$entry[1]}&quot; }&#xA;    $a.slice(2) |$first, $second| { notice &quot;first ${first}, second ${second}&quot; }&#xA;&#xA;When called without a block, the function produces a concatenated result of the slices.&#xA;&#xA;Example Using slice without a block&#xA;&#xA;    slice([1,2,3,4,5,6], 2) # produces [[1,2], [3,4], [5,6]]&#xA;    slice(Integer[1,6], 2)  # produces [[1,2], [3,4], [5,6]]&#xA;    slice(4,2)              # produces [[0,1], [2,3]]&#xA;    slice('hello',2)        # produces [[h, e], [l, l], [o]]&#xA;&#xA;- since 3.2 for Array and Hash&#xA;- since 3.5 for additional enumerable types&#xA;- note requires `parser = future`." name="slice" rValue="true"/>
  <functions documentation="Log a message on the server at level debug." name="debug"/>
  <functions documentation="Log a message on the server at level info." name="info"/>
  <functions documentation="Log a message on the server at level notice." name="notice"/>
  <functions documentation="Log a message on the server at level warning." name="warning"/>
  <functions documentation="Log a message on the server at level err." name="err"/>
  <functions documentation="Log a message on the server at level alert." name="alert"/>
  <functions documentation="Log a message on the server at level emerg." name="emerg"/>
  <functions documentation="Log a message on the server at level crit." name="crit"/>
  <providers name="crontab" typeName="cron"/>
  <providers name="mcxcontent" documentation="MCX Settings management using DirectoryService on OS X.&#xA;&#xA;  This provider manages the entire MCXSettings attribute available&#xA;  to some directory services nodes.  This management is 'all or nothing'&#xA;  in that discrete application domain key value pairs are not managed&#xA;  by this provider.&#xA;&#xA;  It is recommended to use WorkGroup Manager to configure Users, Groups,&#xA;  Computers, or ComputerLists, then use 'ralsh mcx' to generate a puppet&#xA;  manifest from the resulting configuration.&#xA;&#xA;  Original Author: Jeff McCune (mccune.jeff@gmail.com)" typeName="mcx"/>
  <providers name="inifile" documentation="Manage yum repo configurations by parsing yum INI configuration files.&#xA;&#xA;    ## Fetching instances&#xA;&#xA;    When fetching repo instances, directory entries in '/etc/yum/repos.d',&#xA;    '/etc/yum.repos.d', and the directory optionally specified by the reposdir&#xA;    key in '/etc/yum.conf' will be checked. If a given directory does not exist it&#xA;    will be ignored. In addition, all sections in '/etc/yum.conf' aside from&#xA;    'main' will be created as sections.&#xA;&#xA;    ## Storing instances&#xA;&#xA;    When creating a new repository, a new section will be added in the first&#xA;    yum repo directory that exists. The custom directory specified by the&#xA;    '/etc/yum.conf' reposdir property is checked first, followed by&#xA;    '/etc/yum/repos.d', and then '/etc/yum.repos.d'. If none of these exist, the&#xA;    section will be created in '/etc/yum.conf'." typeName="yumrepo"/>
  <providers name="shell" documentation="Passes the provided command through `/bin/sh`; only available on&#xA;    POSIX systems. This allows the use of shell globbing and built-ins, and&#xA;    does not require that the path to a command be fully-qualified. Although&#xA;    this can be more convenient than the `posix` provider, it also means that&#xA;    you need to be more careful with escaping; as ever, with great power comes&#xA;    etc. etc.&#xA;&#xA;    This provider closely resembles the behavior of the `exec` type&#xA;    in Puppet 0.25.x." typeName="exec"/>
  <providers name="windows" documentation="Execute external binaries on Windows systems. As with the `posix`&#xA;    provider, this provider directly calls the command with the arguments&#xA;    given, without passing it through a shell or performing any interpolation.&#xA;    To use shell built-ins --- that is, to emulate the `shell` provider on&#xA;    Windows --- a command must explicitly invoke the shell:&#xA;&#xA;        exec {'echo foo':&#xA;          command => 'cmd.exe /c echo &quot;foo&quot;',&#xA;        }&#xA;&#xA;    If no extension is specified for a command, Windows will use the `PATHEXT`&#xA;    environment variable to locate the executable.&#xA;&#xA;    **Note on PowerShell scripts:** PowerShell's default `restricted`&#xA;    execution policy doesn't allow it to run saved scripts. To run PowerShell&#xA;    scripts, specify the `remotesigned` execution policy as part of the&#xA;    command:&#xA;&#xA;        exec { 'test':&#xA;          path    => 'C:/Windows/System32/WindowsPowerShell/v1.0',&#xA;          command => 'powershell -executionpolicy remotesigned -file C:/test.ps1',&#xA;        }" typeName="exec"/>
  <providers name="posix" documentation="Executes external binaries directly, without passing through a shell or&#xA;    performing any interpolation. This is a safer and more predictable way&#xA;    to execute most commands, but prevents the use of globbing and shell&#xA;    built-ins (including control logic like &quot;for&quot; and &quot;if&quot; statements)." typeName="exec"/>
  <providers name="sun" documentation="Sun's packaging system.  Requires that you specify the source for&#xA;    the packages you're managing.&#xA;&#xA;    This provider supports the `install_options` attribute, which allows command-line flags to be passed to pkgadd.&#xA;    These options should be specified as a string (e.g. '--flag'), a hash (e.g. {'--flag' => 'value'}),&#xA;    or an array where each element is either a string or a hash." typeName="package"/>
  <providers name="rug" documentation="Support for suse `rug` package manager." typeName="package"/>
  <providers name="up2date" documentation="Support for Red Hat's proprietary `up2date` package update&#xA;    mechanism." typeName="package"/>
  <providers name="aix" documentation="Installation from an AIX software directory, using the AIX `installp`&#xA;       command.  The `source` parameter is required for this provider, and should&#xA;       be set to the absolute path (on the puppet agent machine) of a directory&#xA;       containing one or more BFF package files.&#xA;&#xA;       The `installp` command will generate a table of contents file (named `.toc`)&#xA;       in this directory, and the `name` parameter (or resource title) that you&#xA;       specify for your `package` resource must match a package name that exists&#xA;       in the `.toc` file.&#xA;&#xA;       Note that package downgrades are *not* supported; if your resource specifies&#xA;       a specific version number and there is already a newer version of the package&#xA;       installed on the machine, the resource will fail with an error message." typeName="package"/>
  <providers name="blastwave" documentation="Package management using Blastwave.org's `pkg-get` command on Solaris." typeName="package"/>
  <providers name="portage" documentation="Provides packaging support for Gentoo's portage system." typeName="package"/>
  <providers name="windows" documentation="Windows package management.&#xA;&#xA;    This provider supports either MSI or self-extracting executable installers.&#xA;&#xA;    This provider requires a `source` attribute when installing the package.&#xA;    It accepts paths to local files, mapped drives, or UNC paths.&#xA;&#xA;    This provider supports the `install_options` and `uninstall_options`&#xA;    attributes, which allow command-line flags to be passed to the installer.&#xA;    These options should be specified as a string (e.g. '--flag'), a hash (e.g. {'--flag' => 'value'}),&#xA;    or an array where each element is either a string or a hash.&#xA;&#xA;    If the executable requires special arguments to perform a silent install or&#xA;    uninstall, then the appropriate arguments should be specified using the&#xA;    `install_options` or `uninstall_options` attributes, respectively.  Puppet&#xA;    will automatically quote any option that contains spaces." typeName="package"/>
  <providers name="macports" documentation="Package management using MacPorts on OS X.&#xA;&#xA;    Supports MacPorts versions and revisions, but not variants.&#xA;    Variant preferences may be specified using&#xA;    [the MacPorts variants.conf file](http://guide.macports.org/chunked/internals.configuration-files.html#internals.configuration-files.variants-conf).&#xA;&#xA;    When specifying a version in the Puppet DSL, only specify the version, not the revision.&#xA;    Revisions are only used internally for ensuring the latest version/revision of a port." typeName="package"/>
  <providers name="appdmg" documentation="Package management which copies application bundles to a target." typeName="package"/>
  <providers name="apple" documentation="Package management based on OS X's builtin packaging system.  This is&#xA;    essentially the simplest and least functional package system in existence --&#xA;    it only supports installation; no deletion or upgrades.  The provider will&#xA;    automatically add the `.pkg` extension, so leave that off when specifying&#xA;    the package name." typeName="package"/>
  <providers name="fink" documentation="Package management via `fink`." typeName="package"/>
  <providers name="rpm" documentation="RPM packaging support; should work anywhere with a working `rpm`&#xA;    binary.&#xA;&#xA;    This provider supports the `install_options` and `uninstall_options`&#xA;    attributes, which allow command-line flags to be passed to rpm.&#xA;    These options should be specified as a string (e.g. '--flag'), a hash (e.g. {'--flag' => 'value'}),&#xA;    or an array where each element is either a string or a hash." typeName="package"/>
  <providers name="pacman" documentation="Support for the Package Manager Utility (pacman) used in Archlinux.&#xA;&#xA;  This provider supports the `install_options` attribute, which allows command-line flags to be passed to pacman.&#xA;  These options should be specified as a string (e.g. '--flag'), a hash (e.g. {'--flag' => 'value'}),&#xA;  or an array where each element is either a string or a hash." typeName="package"/>
  <providers name="portupgrade" documentation="Support for FreeBSD's ports using the portupgrade ports management software.&#xA;    Use the port's full origin as the resource name. eg (ports-mgmt/portupgrade)&#xA;    for the portupgrade port." typeName="package"/>
  <providers name="gem" documentation="Ruby Gem support.  If a URL is passed via `source`, then that URL is used as the&#xA;    remote gem repository; if a source is present but is not a valid URL, it will be&#xA;    interpreted as the path to a local gem file.  If source is not present at all,&#xA;    the gem will be installed from the default gem repositories.&#xA;&#xA;    This provider supports the `install_options` attribute, which allows command-line flags to be passed to the gem command.&#xA;    These options should be specified as a string (e.g. '--flag'), a hash (e.g. {'--flag' => 'value'}),&#xA;    or an array where each element is either a string or a hash." typeName="package"/>
  <providers name="apt" documentation="Package management via `apt-get`.&#xA;&#xA;    This provider supports the `install_options` attribute, which allows command-line flags to be passed to apt-get.&#xA;    These options should be specified as a string (e.g. '--flag'), a hash (e.g. {'--flag' => 'value'}),&#xA;    or an array where each element is either a string or a hash." typeName="package"/>
  <providers name="freebsd" documentation="The specific form of package management on FreeBSD.  This is an&#xA;    extremely quirky packaging system, in that it freely mixes between&#xA;    ports and packages.  Apparently all of the tools are written in Ruby,&#xA;    so there are plans to rewrite this support to directly use those&#xA;    libraries." typeName="package"/>
  <providers name="zypper" documentation="Support for SuSE `zypper` package manager. Found in SLES10sp2+ and SLES11.&#xA;&#xA;    This provider supports the `install_options` attribute, which allows command-line flags to be passed to zypper.&#xA;    These options should be specified as a string (e.g. '--flag'), a hash (e.g. {'--flag' => 'value'}),&#xA;    or an array where each element is either a string or a hash." typeName="package"/>
  <providers name="urpmi" documentation="Support via `urpmi`." typeName="package"/>
  <providers name="pkgin" documentation="Package management using pkgin, a binary package manager for pkgsrc." typeName="package"/>
  <providers name="msi" documentation="Windows package management by installing and removing MSIs.&#xA;&#xA;    The `msi` provider is deprecated. Use the `windows` provider instead." typeName="package"/>
  <providers name="aptrpm" documentation="Package management via `apt-get` ported to `rpm`." typeName="package"/>
  <providers name="aptitude" documentation="Package management via `aptitude`." typeName="package"/>
  <providers name="ports" documentation="Support for FreeBSD's ports.  Note that this, too, mixes packages and ports." typeName="package"/>
  <providers name="sunfreeware" documentation="Package management using sunfreeware.com's `pkg-get` command on Solaris.&#xA;    At this point, support is exactly the same as `blastwave` support and&#xA;    has not actually been tested." typeName="package"/>
  <providers name="pip" documentation="Python packages via `pip`." typeName="package"/>
  <providers name="openbsd" documentation="OpenBSD's form of `pkg_add` support.&#xA;&#xA;    This provider supports the `install_options` and `uninstall_options`&#xA;    attributes, which allow command-line flags to be passed to pkg_add and pkg_delete.&#xA;    These options should be specified as a string (e.g. '--flag'), a hash (e.g. {'--flag' => 'value'}),&#xA;    or an array where each element is either a string or a hash." typeName="package"/>
  <providers name="hpux" documentation="HP-UX's packaging system." typeName="package"/>
  <providers name="pkg" documentation="OpenSolaris image packaging system. See pkg(5) for more information" typeName="package"/>
  <providers name="nim" documentation="Installation from an AIX NIM LPP source.  The `source` parameter is required&#xA;      for this provider, and should specify the name of a NIM `lpp_source` resource&#xA;      that is visible to the puppet agent machine.  This provider supports the&#xA;      management of both BFF/installp and RPM packages.&#xA;&#xA;      Note that package downgrades are *not* supported; if your resource specifies&#xA;      a specific version number and there is already a newer version of the package&#xA;      installed on the machine, the resource will fail with an error message." typeName="package"/>
  <providers name="opkg" documentation="Opkg packaging support. Common on OpenWrt and OpenEmbedded platforms" typeName="package"/>
  <providers name="pkgutil" documentation="Package management using Peter Bonivart's ``pkgutil`` command on Solaris." typeName="package"/>
  <providers name="dpkg" documentation="Package management via `dpkg`.  Because this only uses `dpkg`&#xA;    and not `apt`, you must specify the source of any packages you want&#xA;    to manage." typeName="package"/>
  <providers name="yum" documentation="Support via `yum`.&#xA;&#xA;  Using this provider's `uninstallable` feature will not remove dependent packages. To&#xA;  remove dependent packages with this provider use the `purgeable` feature, but note this&#xA;  feature is destructive and should be used with the utmost care.&#xA;&#xA;  This provider supports the `install_options` attribute, which allows command-line flags to be passed to yum.&#xA;  These options should be specified as a string (e.g. '--flag'), a hash (e.g. {'--flag' => 'value'}),&#xA;  or an array where each element is either a string or a hash." typeName="package"/>
  <providers name="pkgdmg" documentation="Package management based on Apple's Installer.app and DiskUtility.app.&#xA;&#xA;    This provider works by checking the contents of a DMG image for Apple pkg or&#xA;    mpkg files. Any number of pkg or mpkg files may exist in the root directory&#xA;    of the DMG file system, and Puppet will install all of them. Subdirectories&#xA;    are not checked for packages.&#xA;&#xA;    This provider can also accept plain .pkg (but not .mpkg) files in addition&#xA;    to .dmg files.&#xA;&#xA;    Notes:&#xA;&#xA;    * The `source` attribute is mandatory. It must be either a local disk path&#xA;      or an HTTP, HTTPS, or FTP URL to the package.&#xA;    * The `name` of the resource must be the filename (without path) of the DMG file.&#xA;    * When installing the packages from a DMG, this provider writes a file to&#xA;      disk at `/var/db/.puppet_pkgdmg_installed_NAME`. If that file is present,&#xA;      Puppet assumes all packages from that DMG are already installed.&#xA;    * This provider is not versionable and uses DMG filenames to determine&#xA;      whether a package has been installed. Thus, to install new a version of a&#xA;      package, you must create a new DMG with a different filename." typeName="package"/>
  <providers name="parsed" typeName="mount"/>
  <providers name="upstart" documentation="Ubuntu service management with `upstart`.&#xA;&#xA;  This provider manages `upstart` jobs on Ubuntu. For `upstart` documentation,&#xA;  see &lt;http://upstart.ubuntu.com/>." typeName="service"/>
  <providers name="daemontools" documentation="Daemontools service management.&#xA;&#xA;    This provider manages daemons supervised by D.J. Bernstein daemontools.&#xA;    When detecting the service directory it will check, in order of preference:&#xA;&#xA;    * `/service`&#xA;    * `/etc/service`&#xA;    * `/var/lib/svscan`&#xA;&#xA;    The daemon directory should be in one of the following locations:&#xA;&#xA;    * `/var/lib/service`&#xA;    * `/etc`&#xA;&#xA;    ...or this can be overriden in the resource's attributes:&#xA;&#xA;        service { &quot;myservice&quot;:&#xA;          provider => &quot;daemontools&quot;,&#xA;          path     => &quot;/path/to/daemons&quot;,&#xA;        }&#xA;&#xA;    This provider supports out of the box:&#xA;&#xA;    * start/stop (mapped to enable/disable)&#xA;    * enable/disable&#xA;    * restart&#xA;    * status&#xA;&#xA;    If a service has `ensure => &quot;running&quot;`, it will link /path/to/daemon to&#xA;    /path/to/service, which will automatically enable the service.&#xA;&#xA;    If a service has `ensure => &quot;stopped&quot;`, it will only shut down the service, not&#xA;    remove the `/path/to/service` link." typeName="service"/>
  <providers name="gentoo" documentation="Gentoo's form of `init`-style service management.&#xA;&#xA;    Uses `rc-update` for service enabling and disabling." typeName="service"/>
  <providers name="openrc" documentation="Support for Gentoo's OpenRC initskripts&#xA;&#xA;    Uses rc-update, rc-status and rc-service to manage services." typeName="service"/>
  <providers name="runit" documentation="Runit service management.&#xA;&#xA;    This provider manages daemons running supervised by Runit.&#xA;    When detecting the service directory it will check, in order of preference:&#xA;&#xA;    * `/service`&#xA;    * `/etc/service`&#xA;    * `/var/service`&#xA;&#xA;    The daemon directory should be in one of the following locations:&#xA;&#xA;    * `/etc/sv`&#xA;    * `/var/lib/service`&#xA;&#xA;    or this can be overriden in the service resource parameters::&#xA;&#xA;        service { &quot;myservice&quot;:&#xA;          provider => &quot;runit&quot;,&#xA;          path => &quot;/path/to/daemons&quot;,&#xA;        }&#xA;&#xA;    This provider supports out of the box:&#xA;&#xA;    * start/stop&#xA;    * enable/disable&#xA;    * restart&#xA;    * status" typeName="service"/>
  <providers name="windows" documentation="Support for Windows Service Control Manager (SCM). This provider can&#xA;    start, stop, enable, and disable services, and the SCM provides working&#xA;    status methods for all services.&#xA;&#xA;    Control of service groups (dependencies) is not yet supported, nor is running&#xA;    services as a specific user." typeName="service"/>
  <providers name="service" documentation="The simplest form of service support." typeName="service"/>
  <providers name="launchd" documentation="This provider manages jobs with `launchd`, which is the default service&#xA;    framework for Mac OS X (and may be available for use on other platforms).&#xA;&#xA;    For `launchd` documentation, see:&#xA;&#xA;    * &lt;http://developer.apple.com/macosx/launchd.html>&#xA;    * &lt;http://launchd.macosforge.org/>&#xA;&#xA;    This provider reads plists out of the following directories:&#xA;&#xA;    * `/System/Library/LaunchDaemons`&#xA;    * `/System/Library/LaunchAgents`&#xA;    * `/Library/LaunchDaemons`&#xA;    * `/Library/LaunchAgents`&#xA;&#xA;    ...and builds up a list of services based upon each plist's &quot;Label&quot; entry.&#xA;&#xA;    This provider supports:&#xA;&#xA;    * ensure => running/stopped,&#xA;    * enable => true/false&#xA;    * status&#xA;    * restart&#xA;&#xA;    Here is how the Puppet states correspond to `launchd` states:&#xA;&#xA;    * stopped --- job unloaded&#xA;    * started --- job loaded&#xA;    * enabled --- 'Disable' removed from job plist file&#xA;    * disabled --- 'Disable' added to job plist file&#xA;&#xA;    Note that this allows you to do something `launchctl` can't do, which is to&#xA;    be in a state of &quot;stopped/enabled&quot; or &quot;running/disabled&quot;.&#xA;&#xA;    Note that this provider does not support overriding 'restart' or 'status'." typeName="service"/>
  <providers name="bsd" documentation="FreeBSD's (and probably NetBSD's?) form of `init`-style service management.&#xA;&#xA;    Uses `rc.conf.d` for service enabling and disabling." typeName="service"/>
  <providers name="systemd" documentation="Manages `systemd` services using `systemctl`." typeName="service"/>
  <providers name="redhat" documentation="Red Hat's (and probably many others') form of `init`-style service&#xA;    management. Uses `chkconfig` for service enabling and disabling." typeName="service"/>
  <providers name="freebsd" documentation="Provider for FreeBSD and DragonFly BSD. Uses the `rcvar` argument of init scripts and parses/edits rc files." typeName="service"/>
  <providers name="src" documentation="Support for AIX's System Resource controller.&#xA;&#xA;  Services are started/stopped based on the `stopsrc` and `startsrc`&#xA;  commands, and some services can be refreshed with `refresh` command.&#xA;&#xA;  Enabling and disabling services is not supported, as it requires&#xA;  modifications to `/etc/inittab`. Starting and stopping groups of subsystems&#xA;  is not yet supported." typeName="service"/>
  <providers name="smf" documentation="Support for Sun's new Service Management Framework.&#xA;&#xA;    Starting a service is effectively equivalent to enabling it, so there is&#xA;    only support for starting and stopping services, which also enables and&#xA;    disables them, respectively.&#xA;&#xA;    By specifying `manifest => &quot;/path/to/service.xml&quot;`, the SMF manifest will&#xA;    be imported if it does not exist." typeName="service"/>
  <providers name="openbsd" documentation="Provider for OpenBSD's rc.d daemon control scripts" typeName="service"/>
  <providers name="base" documentation="The simplest form of Unix service support.&#xA;&#xA;  You have to specify enough about your service for this to work; the&#xA;  minimum you can specify is a binary for starting the process, and this&#xA;  same binary will be searched for in the process table to stop the&#xA;  service.  As with `init`-style services, it is preferable to specify start,&#xA;  stop, and status commands." typeName="service"/>
  <providers name="debian" documentation="Debian's form of `init`-style management.&#xA;&#xA;    The only differences from `init` are support for enabling and disabling&#xA;    services via `update-rc.d` and the ability to determine enabled status via&#xA;    `invoke-rc.d`." typeName="service"/>
  <providers name="init" documentation="Standard `init`-style service management." typeName="service"/>
  <providers name="openwrt" documentation="Support for OpenWrt flavored init scripts.&#xA;&#xA;    Uses /etc/init.d/service_name enable, disable, and enabled." typeName="service"/>
  <providers name="mailman" typeName="maillist"/>
  <providers name="augeas" typeName="augeas"/>
  <providers name="cisco" documentation="Cisco switch/router provider for vlans." typeName="vlan"/>
  <providers name="aix" documentation="User management for AIX." typeName="user"/>
  <providers name="directoryservice" documentation="User management on OS X." typeName="user"/>
  <providers name="windows_adsi" documentation="Local user management for Windows." typeName="user"/>
  <providers name="useradd" documentation="User management via `useradd` and its ilk.  Note that you will need to&#xA;    install Ruby's shadow password library (often known as `ruby-libshadow`)&#xA;    if you wish to manage user passwords." typeName="user"/>
  <providers name="ldap" documentation="User management via LDAP.&#xA;&#xA;    This provider requires that you have valid values for all of the&#xA;    LDAP-related settings in `puppet.conf`, including `ldapbase`.  You will&#xA;    almost definitely need settings for `ldapuser` and `ldappassword` in order&#xA;    for your clients to write to LDAP.&#xA;&#xA;    Note that this provider will automatically generate a UID for you if&#xA;    you do not specify one, but it is a potentially expensive operation,&#xA;    as it iterates across all existing users to pick the appropriate next one." typeName="user"/>
  <providers name="hpuxuseradd" documentation="User management for HP-UX. This provider uses the undocumented `-F`&#xA;    switch to HP-UX's special `usermod` binary to work around the fact that&#xA;    its standard `usermod` cannot make changes while the user is logged in." typeName="user"/>
  <providers name="pw" documentation="User management via `pw` on FreeBSD and DragonFly BSD." typeName="user"/>
  <providers name="user_role_add" documentation="User and role management on Solaris, via `useradd` and `roleadd`." typeName="user"/>
  <providers name="cisco" documentation="Cisco switch/router provider for interface." typeName="interface"/>
  <providers name="win32_taskscheduler" documentation="This provider manages scheduled tasks on Windows." typeName="scheduled_task"/>
  <providers name="windows" documentation="Uses Microsoft Windows functionality to manage file ownership and permissions." typeName="file"/>
  <providers name="posix" documentation="Uses POSIX functionality to manage file ownership and permissions." typeName="file"/>
  <providers name="zfs" documentation="Provider for zfs." typeName="zfs"/>
  <providers name="parsed" typeName="host"/>
  <providers name="aix" documentation="Group management for AIX." typeName="group"/>
  <providers name="directoryservice" documentation="Group management using DirectoryService on OS X." typeName="group"/>
  <providers name="groupadd" documentation="Group management via `groupadd` and its ilk. The default for most platforms." typeName="group"/>
  <providers name="windows_adsi" documentation="Local group management for Windows. Group members can be both users and groups.&#xA;    Additionally, local groups can contain domain users." typeName="group"/>
  <providers name="ldap" documentation="Group management via LDAP.&#xA;&#xA;    This provider requires that you have valid values for all of the&#xA;    LDAP-related settings in `puppet.conf`, including `ldapbase`.  You will&#xA;    almost definitely need settings for `ldapuser` and `ldappassword` in order&#xA;    for your clients to write to LDAP.&#xA;&#xA;    Note that this provider will automatically generate a GID for you if you do&#xA;    not specify one, but it is a potentially expensive operation, as it&#xA;    iterates across all existing groups to pick the appropriate next one." typeName="group"/>
  <providers name="pw" documentation="Group management via `pw` on FreeBSD and DragonFly BSD." typeName="group"/>
  <providers name="macauthorization" documentation="Manage Mac OS X authorization database rules and rights." typeName="macauthorization"/>
  <providers name="getsetsebool" documentation="Manage SELinux booleans using the getsebool and setsebool binaries." typeName="selboolean"/>
  <providers name="parsed" documentation="Parse and generate authorized_keys files for SSH." typeName="ssh_authorized_key"/>
  <providers name="solaris" documentation="Provider for Solaris Zones." typeName="zone"/>
  <providers name="parsed" documentation="Parse and generate host-wide known hosts files for SSH." typeName="sshkey"/>
  <providers name="semodule" documentation="Manage SELinux policy modules using the semodule binary." typeName="selmodule"/>
  <providers name="aliases" typeName="mailalias"/>
  <providers name="zpool" documentation="Provider for zpool." typeName="zpool"/>
  <providers name="directoryservice" documentation="Computer object management using DirectoryService on OS X.&#xA;  Note that these are distinctly different kinds of objects to 'hosts',&#xA;  as they require a MAC address and can have all sorts of policy attached to&#xA;  them.&#xA;&#xA;  This provider only manages Computer objects in the local directory service&#xA;  domain, not in remote directories.&#xA;&#xA;  If you wish to manage /etc/hosts on Mac OS X, then simply use the host&#xA;  type as per other platforms." typeName="computer"/>
  <types name="host" documentation="Installs and manages host entries.  For most systems, these&#xA;      entries will just be in `/etc/hosts`, but some systems (notably OS X)&#xA;      will have different solutions.">
    <properties name="target" documentation="The file in which to store service information.  Only used by&#xA;        those providers that write to disk. On most systems this defaults to `/etc/hosts`."/>
    <properties name="comment" documentation="A comment that will be attached to the line with a # character."/>
    <properties name="host_aliases" documentation="Any aliases the host might have.  Multiple values must be&#xA;        specified as an array."/>
    <properties name="ip" documentation="The host's IP address, IPv4 or IPv6."/>
    <parameters name="name" documentation="The host name." namevar="true"/>
    <parameters name="ensure"/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="ssh_authorized_key" documentation="Manages SSH authorized keys. Currently only type 2 keys are supported.&#xA;&#xA;      In their native habitat, SSH keys usually appear as a single long line. This&#xA;      resource type requires you to split that line into several attributes. Thus, a&#xA;      key that appears in your `~/.ssh/id_rsa.pub` file like this...&#xA;&#xA;          ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAy5mtOAMHwA2ZAIfW6Ap70r+I4EclYHEec5xIN59ROUjss23Skb1OtjzYpVPaPH8mSdSmsN0JHaBLiRcu7stl4O8D8zA4mz/vw32yyQ/Kqaxw8l0K76k6t2hKOGqLTY4aFbFISV6GDh7MYLn8KU7cGp96J+caO5R5TqtsStytsUhSyqH+iIDh4e4+BrwTc6V4Y0hgFxaZV5d18mLA4EPYKeG5+zyBCVu+jueYwFqM55E0tHbfiaIN9IzdLV+7NEEfdLkp6w2baLKPqWUBmuvPF1Mn3FwaFLjVsMT3GQeMue6b3FtUdTDeyAYoTxrsRo/WnDkS6Pa3YhrFwjtUqXfdaQ== nick@magpie.puppetlabs.lan&#xA;&#xA;      ...would translate to the following resource:&#xA;&#xA;          ssh_authorized_key { 'nick@magpie.puppetlabs.lan':&#xA;            user => 'nick',&#xA;            type => 'ssh-rsa',&#xA;            key  => 'AAAAB3NzaC1yc2EAAAABIwAAAQEAy5mtOAMHwA2ZAIfW6Ap70r+I4EclYHEec5xIN59ROUjss23Skb1OtjzYpVPaPH8mSdSmsN0JHaBLiRcu7stl4O8D8zA4mz/vw32yyQ/Kqaxw8l0K76k6t2hKOGqLTY4aFbFISV6GDh7MYLn8KU7cGp96J+caO5R5TqtsStytsUhSyqH+iIDh4e4+BrwTc6V4Y0hgFxaZV5d18mLA4EPYKeG5+zyBCVu+jueYwFqM55E0tHbfiaIN9IzdLV+7NEEfdLkp6w2baLKPqWUBmuvPF1Mn3FwaFLjVsMT3GQeMue6b3FtUdTDeyAYoTxrsRo/WnDkS6Pa3YhrFwjtUqXfdaQ==',&#xA;          }&#xA;&#xA;      To ensure that only the currently approved keys are present, you can purge&#xA;      unmanaged SSH keys on a per-user basis. Do this with the `user` resource&#xA;      type's `purge_ssh_keys` attribute:&#xA;&#xA;          user { 'nick':&#xA;            ensure         => present,&#xA;            purge_ssh_keys => true,&#xA;          }&#xA;&#xA;      This will remove any keys in `~/.ssh/authorized_keys` that aren't being&#xA;      managed with `ssh_authorized_key` resources. See the documentation of the&#xA;      `user` type for more details.&#xA;&#xA;      **Autorequires:** If Puppet is managing the user account in which this&#xA;      SSH key should be installed, the `ssh_authorized_key` resource will autorequire&#xA;      that user.">
    <properties name="target" documentation="The absolute filename in which to store the SSH key. This&#xA;        property is optional and should only be used in cases where keys&#xA;        are stored in a non-standard location (i.e.` not in&#xA;        `~user/.ssh/authorized_keys`)."/>
    <properties name="type" documentation="The encryption type used."/>
    <properties name="user" documentation="The user account in which the SSH key should be installed. The resource&#xA;        will autorequire this user if it is being managed as a `user` resource."/>
    <properties name="key" documentation="The public key itself; generally a long string of hex characters. The `key`&#xA;        attribute may not contain whitespace.&#xA;&#xA;        Make sure to omit the following in this attribute (and specify them in&#xA;        other attributes):&#xA;&#xA;        * Key headers (e.g. 'ssh-rsa') --- put these in the `type` attribute.&#xA;        * Key identifiers / comments (e.g. 'joe@joescomputer.local') --- put these in&#xA;          the `name` attribute/resource title."/>
    <properties name="options" documentation="Key options; see sshd(8) for possible values. Multiple values&#xA;        should be specified as an array."/>
    <parameters name="name" documentation="The SSH key comment. This attribute is currently used as a&#xA;        system-wide primary key and therefore has to be unique." namevar="true"/>
    <parameters name="ensure"/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="zone" documentation="Manages Solaris zones.&#xA;&#xA;**Autorequires:** If Puppet is managing the directory specified as the root of&#xA;the zone's filesystem (with the `path` attribute), the zone resource will&#xA;autorequire that directory.">
    <properties name="shares" documentation="Number of FSS CPU shares allocated to the zone."/>
    <properties name="dataset" documentation="The list of datasets delegated to the non-global zone from the&#xA;      global zone.  All datasets must be zfs filesystem names which are&#xA;      different from the mountpoint."/>
    <properties name="pool" documentation="The resource pool for this zone."/>
    <properties name="autoboot" documentation="Whether the zone should automatically boot."/>
    <properties name="path" documentation="The root of the zone's filesystem.  Must be a fully qualified&#xA;      file name.  If you include `%s` in the path, then it will be&#xA;      replaced with the zone's name.  Currently, you cannot use&#xA;      Puppet to move a zone. Consequently this is a readonly property."/>
    <properties name="inherit" documentation="The list of directories that the zone inherits from the global&#xA;      zone.  All directories must be fully qualified."/>
    <properties name="iptype" documentation="The IP stack type of the zone."/>
    <properties name="ip" documentation="The IP address of the zone.  IP addresses **must** be specified&#xA;      with an interface, and may optionally be specified with a default router&#xA;      (sometimes called a defrouter). The interface, IP address, and default&#xA;      router should be separated by colons to form a complete IP address string.&#xA;      For example: `bge0:192.168.178.200` would be a valid IP address string&#xA;      without a default router, and `bge0:192.168.178.200:192.168.178.1` adds a&#xA;      default router to it.&#xA;&#xA;      For zones with multiple interfaces, the value of this attribute should be&#xA;      an array of IP address strings (each of which must include an interface&#xA;      and may include a default router)."/>
    <parameters name="id" documentation="The numerical ID of the zone.  This number is autogenerated&#xA;      and cannot be changed."/>
    <parameters name="create_args" documentation="Arguments to the `zonecfg` create command.  This can be used to create branded zones."/>
    <parameters name="clone" documentation="Instead of installing the zone, clone it from another zone.&#xA;      If the zone root resides on a zfs file system, a snapshot will be&#xA;      used to create the clone; if it resides on a ufs filesystem, a copy of the&#xA;      zone will be used. The zone from which you clone must not be running."/>
    <parameters name="install_args" documentation="Arguments to the `zoneadm` install command.  This can be used to create branded zones."/>
    <parameters name="sysidcfg" documentation="The text to go into the `sysidcfg` file when the zone is first&#xA;      booted.  The best way is to use a template:&#xA;&#xA;          # $confdir/modules/site/templates/sysidcfg.erb&#xA;          system_locale=en_US&#xA;          timezone=GMT&#xA;          terminal=xterms&#xA;          security_policy=NONE&#xA;          root_password=&lt;%= password %>&#xA;          timeserver=localhost&#xA;          name_service=DNS {domain_name=&lt;%= domain %> name_server=&lt;%= nameserver %>}&#xA;          network_interface=primary {hostname=&lt;%= realhostname %>&#xA;            ip_address=&lt;%= ip %>&#xA;            netmask=&lt;%= netmask %>&#xA;            protocol_ipv6=no&#xA;            default_route=&lt;%= defaultroute %>}&#xA;          nfs4_domain=dynamic&#xA;&#xA;      And then call that:&#xA;&#xA;          zone { myzone:&#xA;            ip           => &quot;bge0:192.168.0.23&quot;,&#xA;            sysidcfg     => template(&quot;site/sysidcfg.erb&quot;),&#xA;            path         => &quot;/opt/zones/myzone&quot;,&#xA;            realhostname => &quot;fully.qualified.domain.name&quot;&#xA;          }&#xA;&#xA;      The `sysidcfg` only matters on the first booting of the zone,&#xA;      so Puppet only checks for it at that time."/>
    <parameters name="name" documentation="The name of the zone." namevar="true"/>
    <parameters name="realhostname" documentation="The actual hostname of the zone."/>
    <parameters name="ensure" documentation="The running state of the zone.  The valid states directly reflect&#xA;      the states that `zoneadm` provides.  The states are linear,&#xA;      in that a zone must be `configured`, then `installed`, and&#xA;      only then can be `running`.  Note also that `halt` is currently&#xA;      used to stop zones."/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="notify" documentation="Sends an arbitrary message to the agent run-time log.">
    <properties name="message" documentation="The message to be sent to the log."/>
    <parameters name="name" documentation="An arbitrary tag for your own reference; the name of the message." namevar="true"/>
    <parameters name="withpath" documentation="Whether to show the full object path. Defaults to false."/>
  </types>
  <types name="computer" documentation="Computer object management using DirectoryService&#xA;    on OS X.&#xA;&#xA;    Note that these are distinctly different kinds of objects to 'hosts',&#xA;    as they require a MAC address and can have all sorts of policy attached to&#xA;    them.&#xA;&#xA;    This provider only manages Computer objects in the local directory service&#xA;    domain, not in remote directories.&#xA;&#xA;    If you wish to manage `/etc/hosts` file on Mac OS X, then simply use the host&#xA;    type as per other platforms.&#xA;&#xA;    This type primarily exists to create localhost Computer objects that MCX&#xA;    policy can then be attached to.&#xA;&#xA;    **Autorequires:** If Puppet is managing the plist file representing a&#xA;    Computer object (located at `/var/db/dslocal/nodes/Default/computers/{name}.plist`),&#xA;    the Computer resource will autorequire it.">
    <properties name="ip_address" documentation="The IP Address of the Computer object."/>
    <properties name="en_address" documentation="The MAC address of the primary network interface. Must match en0."/>
    <properties name="ensure" documentation="Control the existences of this computer record. Set this attribute to&#xA;      `present` to ensure the computer record exists.  Set it to `absent`&#xA;      to delete any computer records with this name"/>
    <parameters name="name" documentation="The authoritative 'short' name of the computer record." namevar="true"/>
    <parameters name="realname" documentation="The 'long' name of the computer record."/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="file" documentation="Manages files, including their content, ownership, and permissions.&#xA;&#xA;    The `file` type can manage normal files, directories, and symlinks; the&#xA;    type should be specified in the `ensure` attribute.&#xA;&#xA;    File contents can be managed directly with the `content` attribute, or&#xA;    downloaded from a remote source using the `source` attribute; the latter&#xA;    can also be used to recursively serve directories (when the `recurse`&#xA;    attribute is set to `true` or `local`). On Windows, note that file&#xA;    contents are managed in binary mode; Puppet never automatically translates&#xA;    line endings.&#xA;&#xA;    **Autorequires:** If Puppet is managing the user or group that owns a&#xA;    file, the file resource will autorequire them. If Puppet is managing any&#xA;    parent directories of a file, the file resource will autorequire them.">
    <parameters name="sourceselect" documentation="Whether to copy all valid sources, or just the first one.  This parameter&#xA;      only affects recursive directory copies; by default, the first valid&#xA;      source is the only one used, but if this parameter is set to `all`, then&#xA;      all valid sources will have all of their contents copied to the local&#xA;      system. If a given file exists in more than one source, the version from&#xA;      the earliest source in the list will be used."/>
    <parameters name="replace" documentation="Whether to replace a file or symlink that already exists on the local system but&#xA;      whose content doesn't match what the `source` or `content` attribute&#xA;      specifies.  Setting this to false allows file resources to initialize files&#xA;      without overwriting future changes.  Note that this only affects content;&#xA;      Puppet will still manage ownership and permissions. Defaults to `true`."/>
    <parameters name="show_diff" documentation="Whether to display differences when the file changes, defaulting to&#xA;        true.  This parameter is useful for files that may contain passwords or&#xA;        other secret data, which might otherwise be included in Puppet reports or&#xA;        other insecure outputs.  If the global `show_diff` setting&#xA;        is false, then no diffs will be shown even if this parameter is true."/>
    <parameters name="validate_replacement" documentation="The replacement string in a `validate_cmd` that will be replaced&#xA;      with an input file name. Defaults to: `%`"/>
    <parameters name="validate_cmd" documentation="A command for validating the file's syntax before replacing it. If&#xA;      Puppet would need to rewrite a file due to new `source` or `content`, it&#xA;      will check the new content's validity first. If validation fails, the file&#xA;      resource will fail.&#xA;&#xA;      This command must have a fully qualified path, and should contain a&#xA;      percent (`%`) token where it would expect an input file. It must exit `0`&#xA;      if the syntax is correct, and non-zero otherwise. The command will be&#xA;      run on the target system while applying the catalog, not on the puppet master.&#xA;&#xA;      Example:&#xA;&#xA;          file { '/etc/apache2/apache2.conf':&#xA;            content      => 'example',&#xA;            validate_cmd => '/usr/sbin/apache2 -t -f %',&#xA;          }&#xA;&#xA;      This would replace apache2.conf only if the test returned true.&#xA;&#xA;      Note that if a validation command requires a `%` as part of its text,&#xA;      you can specify a different placeholder token with the&#xA;      `validate_replacement` attribute."/>
    <parameters name="path" documentation="The path to the file to manage.  Must be fully qualified.&#xA;&#xA;      On Windows, the path should include the drive letter and should use `/` as&#xA;      the separator character (rather than `\\`)." namevar="true"/>
    <parameters name="links" documentation="How to handle links during file actions.  During file copying,&#xA;      `follow` will copy the target file instead of the link, `manage`&#xA;      will copy the link itself, and `ignore` will just pass it by.&#xA;      When not copying, `manage` and `ignore` behave equivalently&#xA;      (because you cannot really ignore links entirely during local&#xA;      recursion), and `follow` will manage the file to which the link points."/>
    <parameters name="recurselimit" documentation="How far Puppet should descend into subdirectories, when using&#xA;      `ensure => directory` and either `recurse => true` or `recurse => remote`.&#xA;      The recursion limit affects which files will be copied from the `source`&#xA;      directory, as well as which files can be purged when `purge => true`.&#xA;&#xA;      Setting `recurselimit => 0` is the same as setting `recurse => false` ---&#xA;      Puppet will manage the directory, but all of its contents will be treated&#xA;      as unmanaged.&#xA;&#xA;      Setting `recurselimit => 1` will manage files and directories that are&#xA;      directly inside the directory, but will not manage the contents of any&#xA;      subdirectories.&#xA;&#xA;      Setting `recurselimit => 2` will manage the direct contents of the&#xA;      directory, as well as the contents of the _first_ level of subdirectories.&#xA;&#xA;      And so on --- 3 will manage the contents of the second level of&#xA;      subdirectories, etc."/>
    <parameters name="force" documentation="Perform the file operation even if it will destroy one or more directories.&#xA;      You must use `force` in order to:&#xA;&#xA;      * `purge` subdirectories&#xA;      * Replace directories with files or links&#xA;      * Remove a directory when `ensure => absent`"/>
    <parameters name="recurse" documentation="Whether to recursively manage the _contents_ of a directory. This attribute&#xA;      is only used when `ensure => directory` is set. The allowed values are:&#xA;&#xA;      * `false` --- The default behavior. The contents of the directory will not be&#xA;        automatically managed.&#xA;      * `remote` --- If the `source` attribute is set, Puppet will automatically&#xA;        manage the contents of the source directory (or directories), ensuring&#xA;        that equivalent files and directories exist on the target system and&#xA;        that their contents match.&#xA;&#xA;        Using `remote` will disable the `purge` attribute, but results in faster&#xA;        catalog application than `recurse => true`.&#xA;&#xA;        The `source` attribute is mandatory when `recurse => remote`.&#xA;      * `true` --- If the `source` attribute is set, this behaves similarly to&#xA;        `recurse => remote`, automatically managing files from the source directory.&#xA;&#xA;        This also enables the `purge` attribute, which can delete unmanaged&#xA;        files from a directory. See the description of `purge` for more details.&#xA;&#xA;        The `source` attribute is not mandatory when using `recurse => true`, so you&#xA;        can enable purging in directories where all files are managed individually.&#xA;&#xA;        (Note: `inf` is a deprecated synonym for `true`.)&#xA;&#xA;      By default, setting recurse to `remote` or `true` will manage _all_&#xA;      subdirectories. You can use the `recurselimit` attribute to limit the&#xA;      recursion depth."/>
    <parameters name="purge" documentation="Whether unmanaged files should be purged. This option only makes&#xA;      sense when `ensure => directory` and `recurse => true`.&#xA;&#xA;      * When recursively duplicating an entire directory with the `source`&#xA;        attribute, `purge => true` will automatically purge any files&#xA;        that are not in the source directory.&#xA;      * When managing files in a directory as individual resources,&#xA;        setting `purge => true` will purge any files that aren't being&#xA;        specifically managed.&#xA;&#xA;      If you have a filebucket configured, the purged files will be uploaded,&#xA;      but if you do not, this will destroy data.&#xA;&#xA;      Unless `force => true` is set, purging will **not** delete directories,&#xA;      although it will delete the files they contain.&#xA;&#xA;      If `recurselimit` is set and you aren't using `force => true`, purging&#xA;      will obey the recursion limit; files in any subdirectories deeper than the&#xA;      limit will be treated as unmanaged and left alone."/>
    <parameters name="ignore" documentation="A parameter which omits action on files matching&#xA;      specified patterns during recursion.  Uses Ruby's builtin globbing&#xA;      engine, so shell metacharacters are fully supported, e.g. `[a-z]*`.&#xA;      Matches that would descend into the directory structure are ignored,&#xA;      e.g., `*/*`."/>
    <parameters name="backup" documentation="Whether (and how) file content should be backed up before being replaced.&#xA;      This attribute works best as a resource default in the site manifest&#xA;      (`File { backup => main }`), so it can affect all file resources.&#xA;&#xA;      * If set to `false`, file content won't be backed up.&#xA;      * If set to a string beginning with `.` (e.g., `.puppet-bak`), Puppet will&#xA;        use copy the file in the same directory with that value as the extension&#xA;        of the backup. (A value of `true` is a synonym for `.puppet-bak`.)&#xA;      * If set to any other string, Puppet will try to back up to a filebucket&#xA;        with that title. See the `filebucket` resource type for more details.&#xA;        (This is the preferred method for backup, since it can be centralized&#xA;        and queried.)&#xA;&#xA;      Default value: `puppet`, which backs up to a filebucket of the same name.&#xA;      (Puppet automatically creates a **local** filebucket named `puppet` if one&#xA;      doesn't already exist.)&#xA;&#xA;      Backing up to a local filebucket isn't particularly useful. If you want&#xA;      to make organized use of backups, you will generally want to use the&#xA;      puppet master server's filebucket service. This requires declaring a&#xA;      filebucket resource and a resource default for the `backup` attribute&#xA;      in site.pp:&#xA;&#xA;          # /etc/puppet/manifests/site.pp&#xA;          filebucket { 'main':&#xA;            path   => false,                # This is required for remote filebuckets.&#xA;            server => 'puppet.example.com', # Optional; defaults to the configured puppet master.&#xA;          }&#xA;&#xA;          File { backup => main, }&#xA;&#xA;      If you are using multiple puppet master servers, you will want to&#xA;      centralize the contents of the filebucket. Either configure your load&#xA;      balancer to direct all filebucket traffic to a single master, or use&#xA;      something like an out-of-band rsync task to synchronize the content on all&#xA;      masters."/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="sshkey" documentation="Installs and manages ssh host keys.  At this point, this type&#xA;      only knows how to install keys into `/etc/ssh/ssh_known_hosts`.  See&#xA;      the `ssh_authorized_key` type to manage authorized keys.">
    <properties name="target" documentation="The file in which to store the ssh key.  Only used by&#xA;        the `parsed` provider."/>
    <properties name="type" documentation="The encryption type used.  Probably ssh-dss or ssh-rsa."/>
    <properties name="key" documentation="The key itself; generally a long string of uuencoded characters."/>
    <properties name="host_aliases" documentation="Any aliases the host might have.  Multiple values must be&#xA;        specified as an array."/>
    <parameters name="name" documentation="The host name that the key is associated with." namevar="true"/>
    <parameters name="ensure"/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="cron" documentation="Installs and manages cron jobs.  Every cron resource created by Puppet&#xA;    requires a command and at least one periodic attribute (hour, minute,&#xA;    month, monthday, weekday, or special).  While the name of the cron job is&#xA;    not part of the actual job, the name is stored in a comment beginning with&#xA;    `# Puppet Name: `. These comments are used to match crontab entries created&#xA;    by Puppet with cron resources.&#xA;&#xA;    If an existing crontab entry happens to match the scheduling and command of a&#xA;    cron resource that has never been synched, Puppet will defer to the existing&#xA;    crontab entry and will not create a new entry tagged with the `# Puppet Name: `&#xA;    comment.&#xA;&#xA;    Example:&#xA;&#xA;        cron { logrotate:&#xA;          command => &quot;/usr/sbin/logrotate&quot;,&#xA;          user    => root,&#xA;          hour    => 2,&#xA;          minute  => 0&#xA;        }&#xA;&#xA;    Note that all periodic attributes can be specified as an array of values:&#xA;&#xA;        cron { logrotate:&#xA;          command => &quot;/usr/sbin/logrotate&quot;,&#xA;          user    => root,&#xA;          hour    => [2, 4]&#xA;        }&#xA;&#xA;    ...or using ranges or the step syntax `*/2` (although there's no guarantee&#xA;    that your `cron` daemon supports these):&#xA;&#xA;        cron { logrotate:&#xA;          command => &quot;/usr/sbin/logrotate&quot;,&#xA;          user    => root,&#xA;          hour    => ['2-4'],&#xA;          minute  => '*/10'&#xA;        }&#xA;&#xA;    An important note: _the Cron type will not reset parameters that are&#xA;    removed from a manifest_. For example, removing a `minute => 10` parameter&#xA;    will not reset the minute component of the associated cronjob to `*`.&#xA;    These changes must be expressed by setting the parameter to&#xA;    `minute => absent` because Puppet only manages parameters that are out of&#xA;    sync with manifest entries.&#xA;&#xA;    **Autorequires:** If Puppet is managing the user account specified by the&#xA;    `user` property of a cron resource, then the cron resource will autorequire&#xA;    that user.">
    <properties name="minute" documentation="The minute at which to run the cron job.&#xA;      Optional; if specified, must be between 0 and 59, inclusive."/>
    <properties name="environment" documentation="Any environment settings associated with this cron job.  They&#xA;      will be stored between the header and the job in the crontab.  There&#xA;      can be no guarantees that other, earlier settings will not also&#xA;      affect a given cron job.&#xA;&#xA;&#xA;      Also, Puppet cannot automatically determine whether an existing,&#xA;      unmanaged environment setting is associated with a given cron&#xA;      job.  If you already have cron jobs with environment settings,&#xA;      then Puppet will keep those settings in the same place in the file,&#xA;      but will not associate them with a specific job.&#xA;&#xA;      Settings should be specified exactly as they should appear in&#xA;      the crontab, e.g., `PATH=/bin:/usr/bin:/usr/sbin`."/>
    <properties name="weekday" documentation="The weekday on which to run the command.&#xA;      Optional; if specified, must be between 0 and 7, inclusive, with&#xA;      0 (or 7) being Sunday, or must be the name of the day (e.g., Tuesday)."/>
    <properties name="monthday" documentation="The day of the month on which to run the&#xA;      command.  Optional; if specified, must be between 1 and 31."/>
    <properties name="target" documentation="The name of the crontab file in which the cron job should be stored.&#xA;&#xA;      This property defaults to the value of the `user` property if set, the&#xA;      user running Puppet or `root`.&#xA;&#xA;      For the default crontab provider, this property is functionally&#xA;      equivalent to the `user` property and should be avoided. In particular,&#xA;      setting both `user` and `target` to different values will result in&#xA;      undefined behavior."/>
    <properties name="month" documentation="The month of the year.  Optional; if specified&#xA;      must be between 1 and 12 or the month name (e.g., December)."/>
    <properties name="command" documentation="The command to execute in the cron job.  The environment&#xA;      provided to the command varies by local system rules, and it is&#xA;      best to always provide a fully qualified command.  The user's&#xA;      profile is not sourced when the command is run, so if the&#xA;      user's environment is desired it should be sourced manually.&#xA;&#xA;      All cron parameters support `absent` as a value; this will&#xA;      remove any existing values for that field."/>
    <properties name="special" documentation="A special value such as 'reboot' or 'annually'.&#xA;       Only available on supported systems such as Vixie Cron.&#xA;       Overrides more specific time of day/week settings.&#xA;       Set to 'absent' to make puppet revert to a plain numeric schedule."/>
    <properties name="hour" documentation="The hour at which to run the cron job. Optional;&#xA;      if specified, must be between 0 and 23, inclusive."/>
    <properties name="user" documentation="The user who owns the cron job.  This user must&#xA;      be allowed to run cron jobs, which is not currently checked by&#xA;      Puppet.&#xA;&#xA;      This property defaults to the user running Puppet or `root`.&#xA;&#xA;      The default crontab provider executes the system `crontab` using&#xA;      the user account specified by this property."/>
    <parameters name="name" documentation="The symbolic name of the cron job.  This name&#xA;      is used for human reference only and is generated automatically&#xA;      for cron jobs found on the system.  This generally won't&#xA;      matter, as Puppet will do its best to match existing cron jobs&#xA;      against specified jobs (and Puppet adds a comment to cron jobs it adds),&#xA;      but it is at least possible that converting from unmanaged jobs to&#xA;      managed jobs might require manual intervention." namevar="true"/>
    <parameters name="ensure"/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="service" documentation="Manage running services.  Service support unfortunately varies&#xA;      widely by platform --- some platforms have very little if any concept of a&#xA;      running service, and some have a very codified and powerful concept.&#xA;      Puppet's service support is usually capable of doing the right thing, but&#xA;      the more information you can provide, the better behaviour you will get.&#xA;&#xA;      Puppet 2.7 and newer expect init scripts to have a working status command.&#xA;      If this isn't the case for any of your services' init scripts, you will&#xA;      need to set `hasstatus` to false and possibly specify a custom status&#xA;      command in the `status` attribute. As a last resort, Puppet will attempt to&#xA;      search the process table by calling whatever command is listed in the `ps`&#xA;      fact. The default search pattern is the name of the service, but you can&#xA;      specify it with the `pattern` attribute.&#xA;&#xA;      **Refresh:** `service` resources can respond to refresh events (via&#xA;      `notify`, `subscribe`, or the `~>` arrow). If a `service` receives an&#xA;      event from another resource, Puppet will restart the service it manages.&#xA;      The actual command used to restart the service depends on the platform and&#xA;      can be configured:&#xA;&#xA;      * If you set `hasrestart` to true, Puppet will use the init script's restart command.&#xA;      * You can provide an explicit command for restarting with the `restart` attribute.&#xA;      * If you do neither, the service's stop and start commands will be used.">
    <properties name="flags" documentation="Specify a string of flags to pass to the startup script."/>
    <properties name="enable" documentation="Whether a service should be enabled to start at boot.&#xA;        This property behaves quite differently depending on the platform;&#xA;        wherever possible, it relies on local tools to enable or disable&#xA;        a given service."/>
    <properties name="ensure" documentation="Whether a service should be running."/>
    <parameters name="control" documentation="The control variable used to manage services (originally for HP-UX).&#xA;        Defaults to the upcased service name plus `START` replacing dots with&#xA;        underscores, for those providers that support the `controllable` feature."/>
    <parameters name="stop" documentation="Specify a *stop* command manually."/>
    <parameters name="restart" documentation="Specify a *restart* command manually.  If left&#xA;        unspecified, the service will be stopped and then started."/>
    <parameters name="binary" documentation="The path to the daemon.  This is only used for&#xA;        systems that do not support init scripts.  This binary will be&#xA;        used to start the service if no `start` parameter is&#xA;        provided."/>
    <parameters name="pattern" documentation="The pattern to search for in the process table.&#xA;        This is used for stopping services on platforms that do not&#xA;        support init scripts, and is also used for determining service&#xA;        status on those service whose init scripts do not include a status&#xA;        command.&#xA;&#xA;        Defaults to the name of the service. The pattern can be a simple string&#xA;        or any legal Ruby pattern, including regular expressions (which should&#xA;        be quoted without enclosing slashes)."/>
    <parameters name="status" documentation="Specify a *status* command manually.  This command must&#xA;        return 0 if the service is running and a nonzero value otherwise.&#xA;        Ideally, these exit codes should conform to [the LSB's&#xA;        specification][lsb-exit-codes] for init script status actions, but&#xA;        Puppet only considers the difference between 0 and nonzero to be&#xA;        relevant.&#xA;&#xA;        If left unspecified, the status of the service will be determined&#xA;        automatically, usually by looking for the service in the process&#xA;        table.&#xA;&#xA;        [lsb-exit-codes]: http://refspecs.linuxfoundation.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html"/>
    <parameters name="start" documentation="Specify a *start* command manually.  Most service subsystems&#xA;        support a `start` command, so this will not need to be&#xA;        specified."/>
    <parameters name="name" documentation="The name of the service to run.&#xA;&#xA;        This name is used to find the service; on platforms where services&#xA;        have short system names and long display names, this should be the&#xA;        short name. (To take an example from Windows, you would use &quot;wuauserv&quot;&#xA;        rather than &quot;Automatic Updates.&quot;)" namevar="true"/>
    <parameters name="manifest" documentation="Specify a command to config a service, or a path to a manifest to do so."/>
    <parameters name="path" documentation="The search path for finding init scripts.  Multiple values should&#xA;        be separated by colons or provided as an array."/>
    <parameters name="hasrestart" documentation="Specify that an init script has a `restart` command.  If this is&#xA;        false and you do not specify a command in the `restart` attribute,&#xA;        the init script's `stop` and `start` commands will be used.&#xA;&#xA;        Defaults to false."/>
    <parameters name="hasstatus" documentation="Declare whether the service's init script has a functional status&#xA;        command; defaults to `true`. This attribute's default value changed in&#xA;        Puppet 2.7.0.&#xA;&#xA;        The init script's status command must return 0 if the service is&#xA;        running and a nonzero value otherwise. Ideally, these exit codes&#xA;        should conform to [the LSB's specification][lsb-exit-codes] for init&#xA;        script status actions, but Puppet only considers the difference&#xA;        between 0 and nonzero to be relevant.&#xA;&#xA;        If a service's init script does not support any kind of status command,&#xA;        you should set `hasstatus` to false and either provide a specific&#xA;        command using the `status` attribute or expect that Puppet will look for&#xA;        the service name in the process table. Be aware that 'virtual' init&#xA;        scripts (like 'network' under Red Hat systems) will respond poorly to&#xA;        refresh events from other resources if you override the default behavior&#xA;        without providing a status command."/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="zfs" documentation="Manage zfs. Create destroy and set properties on zfs instances.&#xA;&#xA;**Autorequires:** If Puppet is managing the zpool at the root of this zfs&#xA;instance, the zfs resource will autorequire it. If Puppet is managing any&#xA;parent zfs instances, the zfs resource will autorequire them.">
    <properties name="sharenfs" documentation="The sharenfs property. Valid values are `on`, `off`, share(1M) options"/>
    <properties name="volsize" documentation="The volsize property. Valid values are `&lt;size>`"/>
    <properties name="atime" documentation="The atime property. Valid values are `on`, `off`."/>
    <properties name="aclmode" documentation="The aclmode property. Valid values are `discard`, `groupmask`, `passthrough`."/>
    <properties name="xattr" documentation="The xattr property. Valid values are `on`, `off`."/>
    <properties name="checksum" documentation="The checksum property. Valid values are `on`, `off`, `fletcher2`, `fletcher4`, `sha256`."/>
    <properties name="setuid" documentation="The setuid property. Valid values are `on`, `off`."/>
    <properties name="version" documentation="The version property. Valid values are `1`, `2`, `3`, `4`, `current`."/>
    <properties name="shareiscsi" documentation="The shareiscsi property. Valid values are `on`, `off`, `type=&lt;type>`."/>
    <properties name="recordsize" documentation="The recordsize property. Valid values are powers of two between 512 and 128k."/>
    <properties name="secondarycache" documentation="The secondarycache property. Valid values are `all`, `none`, `metadata`."/>
    <properties name="quota" documentation="The quota property. Valid values are `&lt;size>`, `none`."/>
    <properties name="zoned" documentation="The zoned property. Valid values are `on`, `off`."/>
    <properties name="aclinherit" documentation="The aclinherit property. Valid values are `discard`, `noallow`, `restricted`, `passthrough`, `passthrough-x`."/>
    <properties name="sharesmb" documentation="The sharesmb property. Valid values are `on`, `off`, sharemgr(1M) options"/>
    <properties name="canmount" documentation="The canmount property. Valid values are `on`, `off`, `noauto`."/>
    <properties name="compression" documentation="The compression property. Valid values are `on`, `off`, `lzjb`, `gzip`, `gzip-[1-9]`, `zle`."/>
    <properties name="primarycache" documentation="The primarycache property. Valid values are `all`, `none`, `metadata`."/>
    <properties name="dedup" documentation="The dedup property. Valid values are `on`, `off`."/>
    <properties name="nbmand" documentation="The nbmand property. Valid values are `on`, `off`."/>
    <properties name="snapdir" documentation="The snapdir property. Valid values are `hidden`, `visible`."/>
    <properties name="copies" documentation="The copies property. Valid values are `1`, `2`, `3`."/>
    <properties name="mountpoint" documentation="The mountpoint property. Valid values are `&lt;path>`, `legacy`, `none`."/>
    <properties name="logbias" documentation="The logbias property. Valid values are `latency`, `throughput`."/>
    <properties name="reservation" documentation="The reservation property. Valid values are `&lt;size>`, `none`."/>
    <properties name="refquota" documentation="The refquota property. Valid values are `&lt;size>`, `none`."/>
    <properties name="refreservation" documentation="The refreservation property. Valid values are `&lt;size>`, `none`."/>
    <properties name="exec" documentation="The exec property. Valid values are `on`, `off`."/>
    <properties name="devices" documentation="The devices property. Valid values are `on`, `off`."/>
    <properties name="vscan" documentation="The vscan property. Valid values are `on`, `off`."/>
    <properties name="readonly" documentation="The readonly property. Valid values are `on`, `off`."/>
    <parameters name="name" documentation="The full name for this filesystem (including the zpool)."/>
    <parameters name="ensure"/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="mcx" documentation="MCX object management using DirectoryService on OS X.&#xA;&#xA;The default provider of this type merely manages the XML plist as&#xA;reported by the `dscl -mcxexport` command.  This is similar to the&#xA;content property of the file type in Puppet.&#xA;&#xA;The recommended method of using this type is to use Work Group Manager&#xA;to manage users and groups on the local computer, record the resulting&#xA;puppet manifest using the command `puppet resource mcx`, then deploy it&#xA;to other machines.&#xA;&#xA;**Autorequires:** If Puppet is managing the user, group, or computer that these&#xA;MCX settings refer to, the MCX resource will autorequire that user, group, or computer.">
    <properties name="content" documentation="The XML Plist used as the value of MCXSettings in DirectoryService.&#xA;    This is the standard output from the system command:&#xA;&#xA;        dscl localhost -mcxexport /Local/Default/&lt;ds_type>/ds_name&#xA;&#xA;    Note that `ds_type` is capitalized and plural in the dscl command."/>
    <parameters name="name" documentation="The name of the resource being managed.&#xA;    The default naming convention follows Directory Service paths:&#xA;&#xA;        /Computers/localhost&#xA;        /Groups/admin&#xA;        /Users/localadmin&#xA;&#xA;    The `ds_type` and `ds_name` type parameters are not necessary if the&#xA;    default naming convention is followed." namevar="true"/>
    <parameters name="ds_type" documentation="The DirectoryService type this MCX setting attaches to."/>
    <parameters name="ds_name" documentation="The name to attach the MCX Setting to. (For example, `localhost`&#xA;    when `ds_type => computer`.) This setting is not required, as it can be&#xA;    automatically discovered when the resource name is parseable.  (For&#xA;    example, in `/Groups/admin`, `group` will be used as the dstype.)"/>
    <parameters name="ensure" documentation="Create or remove the MCX setting."/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="selboolean" documentation="Manages SELinux booleans on systems with SELinux support.  The supported booleans&#xA;      are any of the ones found in `/selinux/booleans/`.">
    <properties name="value" documentation="Whether the SELinux boolean should be enabled or disabled."/>
    <parameters name="persistent" documentation="If set true, SELinux booleans will be written to disk and persist accross reboots.&#xA;        The default is `false`."/>
    <parameters name="name" documentation="The name of the SELinux boolean to be managed." namevar="true"/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="user" documentation="Manage users.  This type is mostly built to manage system&#xA;      users, so it is lacking some features useful for managing normal&#xA;      users.&#xA;&#xA;      This resource type uses the prescribed native tools for creating&#xA;      groups and generally uses POSIX APIs for retrieving information&#xA;      about them.  It does not directly modify `/etc/passwd` or anything.&#xA;&#xA;      **Autorequires:** If Puppet is managing the user's primary group (as&#xA;      provided in the `gid` attribute), the user resource will autorequire&#xA;      that group. If Puppet is managing any role accounts corresponding to the&#xA;      user's roles, the user resource will autorequire those role accounts.">
    <properties name="uid" documentation="The user ID; must be specified numerically. If no user ID is&#xA;        specified when creating a new user, then one will be chosen&#xA;        automatically. This will likely result in the same user having&#xA;        different UIDs on different systems, which is not recommended. This is&#xA;        especially noteworthy when managing the same user on both Darwin and&#xA;        other platforms, since Puppet does UID generation on Darwin, but&#xA;        the underlying tools do so on other platforms.&#xA;&#xA;        On Windows, this property is read-only and will return the user's&#xA;        security identifier (SID)."/>
    <properties name="password_min_age" documentation="The minimum number of days a password must be used before it may be changed."/>
    <properties name="home" documentation="The home directory of the user.  The directory must be created&#xA;        separately and is not currently checked for existence."/>
    <properties name="shell" documentation="The user's login shell.  The shell must exist and be&#xA;        executable.&#xA;&#xA;        This attribute cannot be managed on Windows systems."/>
    <properties name="auths" documentation="The auths the user has.  Multiple auths should be&#xA;        specified as an array."/>
    <properties name="keys" documentation="Specify user attributes in an array of key = value pairs."/>
    <properties name="iterations" documentation="This is the number of iterations of a chained computation of the&#xA;            password hash (http://en.wikipedia.org/wiki/PBKDF2).  This parameter&#xA;            is used in OS X. This field is required for managing passwords on OS X >= 10.8."/>
    <properties name="password" documentation="The user's password, in whatever encrypted format the local&#xA;        system requires.&#xA;&#xA;        * Most modern Unix-like systems use salted SHA1 password hashes. You can use&#xA;          Puppet's built-in `sha1` function to generate a hash from a password.&#xA;        * Mac OS X 10.5 and 10.6 also use salted SHA1 hashes.&#xA;        * Mac OS X 10.7 (Lion) uses salted SHA512 hashes. The Puppet Labs [stdlib][]&#xA;          module contains a `str2saltedsha512` function which can generate password&#xA;          hashes for Lion.&#xA;        * Mac OS X 10.8 and higher use salted SHA512 PBKDF2 hashes. When&#xA;          managing passwords on these systems the salt and iterations properties&#xA;          need to be specified as well as the password.&#xA;        * Windows passwords can only be managed in cleartext, as there is no Windows API&#xA;          for setting the password hash.&#xA;&#xA;        [stdlib]: https://github.com/puppetlabs/puppetlabs-stdlib/&#xA;&#xA;        Be sure to enclose any value that includes a dollar sign ($) in single&#xA;        quotes (') to avoid accidental variable interpolation."/>
    <properties name="expiry" documentation="The expiry date for this user. Must be provided in&#xA;           a zero-padded YYYY-MM-DD format --- e.g. 2010-02-19.&#xA;           If you want to make sure the user account does never&#xA;           expire, you can pass the special value `absent`."/>
    <properties name="project" documentation="The name of the project associated with a user."/>
    <properties name="password_max_age" documentation="The maximum number of days a password may be used before it must be changed."/>
    <properties name="roles" documentation="The roles the user has.  Multiple roles should be&#xA;        specified as an array."/>
    <properties name="gid" documentation="The user's primary group.  Can be specified numerically or by name.&#xA;&#xA;        This attribute is not supported on Windows systems; use the `groups`&#xA;        attribute instead. (On Windows, designating a primary group is only&#xA;        meaningful for domain accounts, which Puppet does not currently manage.)"/>
    <properties name="attributes" documentation="Specify AIX attributes for the user in an array of attribute = value pairs."/>
    <properties name="profiles" documentation="The profiles the user has.  Multiple profiles should be&#xA;        specified as an array."/>
    <properties name="comment" documentation="A description of the user.  Generally the user's full name."/>
    <properties name="groups" documentation="The groups to which the user belongs.  The primary group should&#xA;        not be listed, and groups should be identified by name rather than by&#xA;        GID.  Multiple groups should be specified as an array."/>
    <properties name="salt" documentation="This is the 32 byte salt used to generate the PBKDF2 password used in&#xA;            OS X. This field is required for managing passwords on OS X >= 10.8."/>
    <properties name="ensure" documentation="The basic state that the object should be in."/>
    <parameters name="attribute_membership" documentation="Whether specified attribute value pairs should be treated as the&#xA;        **complete list** (`inclusive`) or the **minimum list** (`minimum`) of&#xA;        attribute/value pairs for the user. Defaults to `minimum`."/>
    <parameters name="system" documentation="Whether the user is a system user, according to the OS's criteria;&#xA;      on most platforms, a UID less than or equal to 500 indicates a system&#xA;      user. This parameter is only used when the resource is created and will&#xA;      not affect the UID when the user is present. Defaults to `false`."/>
    <parameters name="key_membership" documentation="Whether specified key/value pairs should be considered the&#xA;        **complete list** (`inclusive`) or the **minimum list** (`minimum`) of&#xA;        the user's attributes. Defaults to `minimum`."/>
    <parameters name="membership" documentation="Whether specified groups should be considered the **complete list**&#xA;        (`inclusive`) or the **minimum list** (`minimum`) of groups to which&#xA;        the user belongs. Defaults to `minimum`."/>
    <parameters name="forcelocal" documentation="Forces the management of local accounts when accounts are also&#xA;            being managed by some other NSS"/>
    <parameters name="profile_membership" documentation="Whether specified roles should be treated as the **complete list**&#xA;        (`inclusive`) or the **minimum list** (`minimum`) of roles&#xA;        of which the user is a member. Defaults to `minimum`."/>
    <parameters name="name" documentation="The user name. While naming limitations vary by operating system,&#xA;        it is advisable to restrict names to the lowest common denominator,&#xA;        which is a maximum of 8 characters beginning with a letter.&#xA;&#xA;        Note that Puppet considers user names to be case-sensitive, regardless&#xA;        of the platform's own rules; be sure to always use the same case when&#xA;        referring to a given user." namevar="true"/>
    <parameters name="allowdupe" documentation="Whether to allow duplicate UIDs. Defaults to `false`."/>
    <parameters name="auth_membership" documentation="Whether specified auths should be considered the **complete list**&#xA;        (`inclusive`) or the **minimum list** (`minimum`) of auths the user&#xA;        has. Defaults to `minimum`."/>
    <parameters name="role_membership" documentation="Whether specified roles should be considered the **complete list**&#xA;        (`inclusive`) or the **minimum list** (`minimum`) of roles the user&#xA;        has. Defaults to `minimum`."/>
    <parameters name="purge_ssh_keys" documentation="Whether to purge authorized SSH keys for this user if they are not managed&#xA;        with the `ssh_authorized_key` resource type. Allowed values are:&#xA;&#xA;        * `false` (default) --- don't purge SSH keys for this user.&#xA;        * `true` --- look for keys in the `.ssh/authorized_keys` file in the user's&#xA;          home directory. Purge any keys that aren't managed as `ssh_authorized_key`&#xA;          resources.&#xA;        * An array of file paths --- look for keys in all of the files listed. Purge&#xA;          any keys that aren't managed as `ssh_authorized_key` resources. If any of&#xA;          these paths starts with `~` or `%h`, that token will be replaced with&#xA;          the user's home directory."/>
    <parameters name="ia_load_module" documentation="The name of the I&amp;A module to use to manage this user."/>
    <parameters name="managehome" documentation="Whether to manage the home directory when managing the user.&#xA;        This will create the home directory when `ensure => present`, and&#xA;        delete the home directory when `ensure => absent`. Defaults to `false`."/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="whit" documentation="Whits are internal artifacts of Puppet's current implementation, and&#xA;    Puppet suppresses their appearance in all logs. We make no guarantee of&#xA;    the whit's continued existence, and it should never be used in an actual&#xA;    manifest. Use the `anchor` type from the puppetlabs-stdlib module if you&#xA;    need arbitrary whit-like no-op resources.">
    <parameters name="name" documentation="The name of the whit, because it must have one."/>
  </types>
  <types name="tidy" documentation="Remove unwanted files based on specific criteria.  Multiple&#xA;    criteria are OR'd together, so a file that is too large but is not&#xA;    old enough will still get tidied.&#xA;&#xA;    If you don't specify either `age` or `size`, then all files will&#xA;    be removed.&#xA;&#xA;    This resource type works by generating a file resource for every file&#xA;    that should be deleted and then letting that resource perform the&#xA;    actual deletion.">
    <parameters name="matches" documentation="One or more (shell type) file glob patterns, which restrict&#xA;      the list of files to be tidied to those whose basenames match&#xA;      at least one of the patterns specified. Multiple patterns can&#xA;      be specified using an array.&#xA;&#xA;      Example:&#xA;&#xA;          tidy { &quot;/tmp&quot;:&#xA;            age     => &quot;1w&quot;,&#xA;            recurse => 1,&#xA;            matches => [ &quot;[0-9]pub*.tmp&quot;, &quot;*.temp&quot;, &quot;tmpfile?&quot; ]&#xA;          }&#xA;&#xA;      This removes files from `/tmp` if they are one week old or older,&#xA;      are not in a subdirectory and match one of the shell globs given.&#xA;&#xA;      Note that the patterns are matched against the basename of each&#xA;      file -- that is, your glob patterns should not have any '/'&#xA;      characters in them, since you are only specifying against the last&#xA;      bit of the file.&#xA;&#xA;      Finally, note that you must now specify a non-zero/non-false value&#xA;      for recurse if matches is used, as matches only apply to files found&#xA;      by recursion (there's no reason to use static patterns match against&#xA;      a statically determined path).  Requiering explicit recursion clears&#xA;      up a common source of confusion."/>
    <parameters name="age" documentation="Tidy files whose age is equal to or greater than&#xA;      the specified time.  You can choose seconds, minutes,&#xA;      hours, days, or weeks by specifying the first letter of any&#xA;      of those words (e.g., '1w').&#xA;&#xA;      Specifying 0 will remove all files."/>
    <parameters name="path" documentation="The path to the file or directory to manage.  Must be fully&#xA;      qualified." namevar="true"/>
    <parameters name="rmdirs" documentation="Tidy directories in addition to files; that is, remove&#xA;      directories whose age is older than the specified criteria.&#xA;      This will only remove empty directories, so all contained&#xA;      files must also be tidied before a directory gets removed."/>
    <parameters name="type" documentation="Set the mechanism for determining age. Default: atime."/>
    <parameters name="recurse" documentation="If target is a directory, recursively descend&#xA;      into the directory looking for files to tidy."/>
    <parameters name="size" documentation="Tidy files whose size is equal to or greater than&#xA;      the specified size.  Unqualified values are in kilobytes, but&#xA;      *b*, *k*, *m*, *g*, and *t* can be appended to specify *bytes*,&#xA;      *kilobytes*, *megabytes*, *gigabytes*, and *terabytes*, respectively.&#xA;      Only the first character is significant, so the full word can also&#xA;      be used."/>
    <parameters name="backup" documentation="Whether tidied files should be backed up.  Any values are passed&#xA;      directly to the file resources used for actual file deletion, so consult&#xA;      the `file` type's backup documentation to determine valid values."/>
  </types>
  <types name="resources" documentation="This is a metatype that can manage other resource types.  Any&#xA;    metaparams specified here will be passed on to any generated resources,&#xA;    so you can purge umanaged resources but set `noop` to true so the&#xA;    purging is only logged and does not actually happen.">
    <parameters name="name" documentation="The name of the type to be managed."/>
    <parameters name="unless_system_user" documentation="This keeps system users from being purged.  By default, it&#xA;      does not purge users whose UIDs are less than the minimum UID for the system (typically 500 or 1000), but you can specify&#xA;      a different UID as the inclusive limit."/>
    <parameters name="unless_uid" documentation="This keeps specific uids or ranges of uids from being purged when purge is true.&#xA;      Accepts integers, integer strings, and arrays of integers or integer strings.&#xA;      To specify a range of uids, consider using the range() function from stdlib."/>
    <parameters name="purge" documentation="Whether to purge unmanaged resources.  When set to `true`, this will&#xA;      delete any resource that is not specified in your configuration and is not&#xA;      autorequired by any managed resources. **Note:** The `ssh_authorized_key`&#xA;      resource type can't be purged this way; instead, see the `purge_ssh_keys`&#xA;      attribute of the `user` type."/>
  </types>
  <types name="interface" documentation="This represents a router or switch interface. It is possible to manage&#xA;    interface mode (access or trunking, native vlan and encapsulation) and&#xA;    switchport characteristics (speed, duplex).">
    <properties name="allowed_trunk_vlans" documentation="Allowed list of Vlans that this trunk can forward."/>
    <properties name="etherchannel" documentation="Channel group this interface is part of."/>
    <properties name="speed" documentation="Interface speed."/>
    <properties name="native_vlan" documentation="Interface native vlan (for access mode only)."/>
    <properties name="description" documentation="Interface description."/>
    <properties name="ipaddress" documentation="IP Address of this interface. Note that it might not be possible to set&#xA;      an interface IP address; it depends on the interface type and device type.&#xA;&#xA;      Valid format of ip addresses are:&#xA;&#xA;      * IPV4, like 127.0.0.1&#xA;      * IPV4/prefixlength like 127.0.1.1/24&#xA;      * IPV6/prefixlength like FE80::21A:2FFF:FE30:ECF0/128&#xA;      * an optional suffix for IPV6 addresses from this list: `eui-64`, `link-local`&#xA;&#xA;      It is also possible to supply an array of values."/>
    <properties name="duplex" documentation="Interface duplex."/>
    <properties name="mode" documentation="Interface switchport mode."/>
    <properties name="encapsulation" documentation="Interface switchport encapsulation."/>
    <parameters name="name" documentation="The interface's name."/>
    <parameters name="device_url" documentation="The URL at which the router or switch can be reached."/>
    <parameters name="ensure"/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="mount" documentation="Manages mounted filesystems, including putting mount&#xA;      information into the mount table. The actual behavior depends&#xA;      on the value of the 'ensure' parameter.&#xA;&#xA;      **Refresh:** `mount` resources can respond to refresh events (via&#xA;      `notify`, `subscribe`, or the `~>` arrow). If a `mount` receives an event&#xA;      from another resource **and** its `ensure` attribute is set to `mounted`,&#xA;      Puppet will try to unmount then remount that filesystem.&#xA;&#xA;      **Autorequires:** If Puppet is managing any parents of a mount resource ---&#xA;      that is, other mount points higher up in the filesystem --- the child&#xA;      mount will autorequire them.">
    <properties name="dump" documentation="Whether to dump the mount.  Not all platform support this.&#xA;        Valid values are `1` or `0` (or `2` on FreeBSD). Default is `0`."/>
    <properties name="fstype" documentation="The mount type.  Valid values depend on the&#xA;        operating system.  This is a required option."/>
    <properties name="blockdevice" documentation="The device to fsck.  This is property is only valid&#xA;        on Solaris, and in most cases will default to the correct&#xA;        value."/>
    <properties name="atboot" documentation="Whether to mount the mount at boot.  Not all platforms&#xA;        support this."/>
    <properties name="target" documentation="The file in which to store the mount table.  Only used by&#xA;        those providers that write to disk."/>
    <properties name="device" documentation="The device providing the mount.  This can be whatever&#xA;        device is supporting by the mount, including network&#xA;        devices or devices specified by UUID rather than device&#xA;        path, depending on the operating system."/>
    <properties name="pass" documentation="The pass in which the mount is checked."/>
    <properties name="options" documentation="Mount options for the mounts, as they would&#xA;        appear in the fstab."/>
    <properties name="ensure" documentation="Control what to do with this mount. Set this attribute to&#xA;        `unmounted` to make sure the filesystem is in the filesystem table&#xA;        but not mounted (if the filesystem is currently mounted, it will be&#xA;        unmounted).  Set it to `absent` to unmount (if necessary) and remove&#xA;        the filesystem from the fstab.  Set to `mounted` to add it to the&#xA;        fstab and mount it. Set to `present` to add to fstab but not change&#xA;        mount/unmount status."/>
    <parameters name="name" documentation="The mount path for the mount." namevar="true"/>
    <parameters name="remounts" documentation="Whether the mount can be remounted  `mount -o remount`.  If&#xA;        this is false, then the filesystem will be unmounted and remounted&#xA;        manually, which is prone to failure."/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="maillist" documentation="Manage email lists.  This resource type can only create&#xA;      and remove lists; it cannot currently reconfigure them.">
    <parameters name="mailserver" documentation="The name of the host handling email for the list."/>
    <parameters name="admin" documentation="The email address of the administrator."/>
    <parameters name="description" documentation="The description of the mailing list."/>
    <parameters name="name" documentation="The name of the email list."/>
    <parameters name="webserver" documentation="The name of the host providing web archives and the administrative interface."/>
    <parameters name="password" documentation="The admin password."/>
    <parameters name="ensure"/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="group" documentation="Manage groups. On most platforms this can only create groups.&#xA;      Group membership must be managed on individual users.&#xA;&#xA;      On some platforms such as OS X, group membership is managed as an&#xA;      attribute of the group, not the user record. Providers must have&#xA;      the feature 'manages_members' to manage the 'members' property of&#xA;      a group record.">
    <properties name="gid" documentation="The group ID.  Must be specified numerically.  If no group ID is&#xA;        specified when creating a new group, then one will be chosen&#xA;        automatically according to local system standards. This will likely&#xA;        result in the same group having different GIDs on different systems,&#xA;        which is not recommended.&#xA;&#xA;        On Windows, this property is read-only and will return the group's security&#xA;        identifier (SID)."/>
    <properties name="attributes" documentation="Specify group AIX attributes in an array of `key=value` pairs."/>
    <properties name="members" documentation="The members of the group. For directory services where group&#xA;      membership is stored in the group objects, not the users."/>
    <parameters name="attribute_membership" documentation="Whether specified attribute value pairs should be treated as the only attributes&#xA;        of the user or whether they should merely&#xA;        be treated as the minimum list."/>
    <parameters name="system" documentation="Whether the group is a system group with lower GID."/>
    <parameters name="forcelocal" documentation="Forces the management of local accounts when accounts are also&#xA;            being managed by some other NSS"/>
    <parameters name="name" documentation="The group name. While naming limitations vary by operating system,&#xA;        it is advisable to restrict names to the lowest common denominator,&#xA;        which is a maximum of 8 characters beginning with a letter.&#xA;&#xA;        Note that Puppet considers group names to be case-sensitive, regardless&#xA;        of the platform's own rules; be sure to always use the same case when&#xA;        referring to a given group." namevar="true"/>
    <parameters name="allowdupe" documentation="Whether to allow duplicate GIDs. Defaults to `false`."/>
    <parameters name="auth_membership" documentation="whether the provider is authoritative for group membership."/>
    <parameters name="ia_load_module" documentation="The name of the I&amp;A module to use to manage this user"/>
    <parameters name="ensure" documentation="Create or remove the group."/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="zpool" documentation="Manage zpools. Create and delete zpools. The provider WILL NOT SYNC, only report differences.&#xA;&#xA;      Supports vdevs with mirrors, raidz, logs and spares.">
    <properties name="mirror" documentation="List of all the devices to mirror for this pool. Each mirror should be a&#xA;      space separated string:&#xA;&#xA;          mirror => [&quot;disk1 disk2&quot;, &quot;disk3 disk4&quot;],"/>
    <properties name="raidz" documentation="List of all the devices to raid for this pool. Should be an array of&#xA;      space separated strings:&#xA;&#xA;          raidz => [&quot;disk1 disk2&quot;, &quot;disk3 disk4&quot;],"/>
    <properties name="spare" documentation="Spare disk(s) for this pool."/>
    <properties name="disk" documentation="The disk(s) for this pool. Can be an array or a space separated string."/>
    <properties name="log" documentation="Log disks for this pool. This type does not currently support mirroring of log disks."/>
    <parameters name="pool" documentation="The name for this pool." namevar="true"/>
    <parameters name="raid_parity" documentation="Determines parity when using the `raidz` parameter."/>
    <parameters name="ensure"/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="schedule" documentation="Define schedules for Puppet. Resources can be limited to a schedule by using the&#xA;      [`schedule`](http://docs.puppetlabs.com/references/latest/metaparameter.html#schedule)&#xA;      metaparameter.&#xA;&#xA;      Currently, **schedules can only be used to stop a resource from being&#xA;      applied;** they cannot cause a resource to be applied when it otherwise&#xA;      wouldn't be, and they cannot accurately specify a time when a resource&#xA;      should run.&#xA;&#xA;      Every time Puppet applies its configuration, it will apply the&#xA;      set of resources whose schedule does not eliminate them from&#xA;      running right then, but there is currently no system in place to&#xA;      guarantee that a given resource runs at a given time.  If you&#xA;      specify a very  restrictive schedule and Puppet happens to run at a&#xA;      time within that schedule, then the resources will get applied;&#xA;      otherwise, that work may never get done.&#xA;&#xA;      Thus, it is advisable to use wider scheduling (e.g., over a couple of&#xA;      hours) combined with periods and repetitions.  For instance, if you&#xA;      wanted to restrict certain resources to only running once, between&#xA;      the hours of two and 4 AM, then you would use this schedule:&#xA;&#xA;          schedule { 'maint':&#xA;            range  => &quot;2 - 4&quot;,&#xA;            period => daily,&#xA;            repeat => 1,&#xA;          }&#xA;&#xA;      With this schedule, the first time that Puppet runs between 2 and 4 AM,&#xA;      all resources with this schedule will get applied, but they won't&#xA;      get applied again between 2 and 4 because they will have already&#xA;      run once that day, and they won't get applied outside that schedule&#xA;      because they will be outside the scheduled range.&#xA;&#xA;      Puppet automatically creates a schedule for each of the valid periods&#xA;      with the same name as that period (e.g., hourly and daily).&#xA;      Additionally, a schedule named `puppet` is created and used as the&#xA;      default, with the following attributes:&#xA;&#xA;          schedule { 'puppet':&#xA;            period => hourly,&#xA;            repeat => 2,&#xA;          }&#xA;&#xA;      This will cause resources to be applied every 30 minutes by default.">
    <parameters name="weekday" documentation="The days of the week in which the schedule should be valid.&#xA;        You may specify the full day name (Tuesday), the three character&#xA;        abbreviation (Tue), or a number corresponding to the day of the&#xA;        week where 0 is Sunday, 1 is Monday, etc. Multiple days can be specified&#xA;        as an array. If not specified, the day of the week will not be&#xA;        considered in the schedule.&#xA;&#xA;        If you are also using a range match that spans across midnight&#xA;        then this parameter will match the day that it was at the start&#xA;        of the range, not necessarily the day that it is when it matches.&#xA;        For example, consider this schedule:&#xA;&#xA;            schedule { 'maintenance_window':&#xA;              range   => '22:00 - 04:00',&#xA;              weekday => 'Saturday',&#xA;            }&#xA;&#xA;        This will match at 11 PM on Saturday and 2 AM on Sunday, but not&#xA;        at 2 AM on Saturday."/>
    <parameters name="range" documentation="The earliest and latest that a resource can be applied.  This is&#xA;        always a hyphen-separated range within a 24 hour period, and hours&#xA;        must be specified in numbers between 0 and 23, inclusive.  Minutes and&#xA;        seconds can optionally be provided, using the normal colon as a&#xA;        separator. For instance:&#xA;&#xA;            schedule { 'maintenance':&#xA;              range => &quot;1:30 - 4:30&quot;,&#xA;            }&#xA;&#xA;        This is mostly useful for restricting certain resources to being&#xA;        applied in maintenance windows or during off-peak hours. Multiple&#xA;        ranges can be applied in array context. As a convenience when specifying&#xA;        ranges, you may cross midnight (e.g.: range => &quot;22:00 - 04:00&quot;)."/>
    <parameters name="name" documentation="The name of the schedule.  This name is used when assigning the schedule&#xA;        to a resource with the `schedule` metaparameter:&#xA;&#xA;            schedule { 'everyday':&#xA;              period => daily,&#xA;              range  => &quot;2 - 4&quot;,&#xA;            }&#xA;&#xA;            exec { &quot;/usr/bin/apt-get update&quot;:&#xA;              schedule => 'everyday',&#xA;            }" namevar="true"/>
    <parameters name="repeat" documentation="How often a given resource may be applied in this schedule's `period`.&#xA;        Defaults to 1; must be an integer."/>
    <parameters name="period" documentation="The period of repetition for resources on this schedule. The default is&#xA;        for resources to get applied every time Puppet runs.&#xA;&#xA;        Note that the period defines how often a given resource will get&#xA;        applied but not when; if you would like to restrict the hours&#xA;        that a given resource can be applied (e.g., only at night during&#xA;        a maintenance window), then use the `range` attribute.&#xA;&#xA;        If the provided periods are not sufficient, you can provide a&#xA;        value to the *repeat* attribute, which will cause Puppet to&#xA;        schedule the affected resources evenly in the period the&#xA;        specified number of times.  Take this schedule:&#xA;&#xA;            schedule { 'veryoften':&#xA;              period => hourly,&#xA;              repeat => 6,&#xA;            }&#xA;&#xA;        This can cause Puppet to apply that resource up to every 10 minutes.&#xA;&#xA;        At the moment, Puppet cannot guarantee that level of repetition; that&#xA;        is, the resource can applied _up to_ every 10 minutes, but internal&#xA;        factors might prevent it from actually running that often (e.g. if a&#xA;        Puppet run is still in progress when the next run is scheduled to start,&#xA;        that next run will be suppressed).&#xA;&#xA;        See the `periodmatch` attribute for tuning whether to match&#xA;        times by their distance apart or by their specific value."/>
    <parameters name="periodmatch" documentation="Whether periods should be matched by number (e.g., the two times&#xA;        are in the same hour) or by distance (e.g., the two times are&#xA;        60 minutes apart)."/>
  </types>
  <types name="selmodule" documentation="Manages loading and unloading of SELinux policy modules&#xA;    on the system.  Requires SELinux support.  See man semodule(8)&#xA;    for more information on SELinux policy modules.&#xA;&#xA;    **Autorequires:** If Puppet is managing the file containing this SELinux&#xA;    policy module (which is either explicitly specified in the `selmodulepath`&#xA;    attribute or will be found at {`selmoduledir`}/{`name`}.pp), the selmodule&#xA;    resource will autorequire that file.">
    <properties name="syncversion" documentation="If set to `true`, the policy will be reloaded if the&#xA;    version found in the on-disk file differs from the loaded&#xA;    version.  If set to `false` (the default) the only check&#xA;    that will be made is if the policy is loaded at all or not."/>
    <parameters name="selmodulepath" documentation="The full path to the compiled .pp policy module.  You only need to use&#xA;      this if the module file is not in the `selmoduledir` directory."/>
    <parameters name="name" documentation="The name of the SELinux policy to be managed.  You should not&#xA;      include the customary trailing .pp extension." namevar="true"/>
    <parameters name="selmoduledir" documentation="The directory to look for the compiled pp module file in.&#xA;      Currently defaults to `/usr/share/selinux/targeted`.  If the&#xA;      `selmodulepath` attribute is not specified, Puppet will expect to find&#xA;      the module in `&lt;selmoduledir>/&lt;name>.pp`, where `name` is the value of the&#xA;      `name` parameter."/>
    <parameters name="ensure"/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="yumrepo" documentation="The client-side description of a yum repository. Repository&#xA;    configurations are found by parsing `/etc/yum.conf` and&#xA;    the files indicated by the `reposdir` option in that file&#xA;    (see `yum.conf(5)` for details).&#xA;&#xA;    Most parameters are identical to the ones documented&#xA;    in the `yum.conf(5)` man page.&#xA;&#xA;    Continuation lines that yum supports (for the `baseurl`, for example)&#xA;    are not supported. This type does not attempt to read or verify the&#xA;    exinstence of files listed in the `include` attribute.">
    <properties name="s3_enabled" documentation="Access the repo via S3.&#xA;      Valid values are: False/0/No or True/1/Yes.&#xA;      Set this to `absent` to remove it from the file completely."/>
    <properties name="metadata_expire" documentation="Number of seconds after which the metadata will expire.&#xA;      Set this to `absent` to remove it from the file completely."/>
    <properties name="throttle" documentation="Enable bandwidth throttling for downloads. This option&#xA;      can be expressed as a absolute data rate in bytes/sec or a&#xA;      percentage `60%`. An SI prefix (k, M or G) may be appended&#xA;      to the data rate values.&#xA;Set this to `absent` to remove it from the file completely."/>
    <properties name="repo_gpgcheck" documentation="Whether to check the GPG signature on repodata.&#xA;      Valid values are: False/0/No or True/1/Yes.&#xA;      Set this to `absent` to remove it from the file completely."/>
    <properties name="protect" documentation="Enable or disable protection for this repository. Requires&#xA;      that the `protectbase` plugin is installed and enabled.&#xA;      Valid values are: False/0/No or True/1/Yes.&#xA;      Set this to `absent` to remove it from the file completely."/>
    <properties name="includepkgs" documentation="List of shell globs. If this is set, only packages&#xA;      matching one of the globs will be considered for&#xA;      update or install from this repo. Set this to `absent` to remove it from the file completely."/>
    <properties name="gpgcakey" documentation="The URL for the GPG CA key for this repository. Set this to `absent` to remove it from the file completely."/>
    <properties name="bandwidth" documentation="Use to specify the maximum available network bandwidth&#xA;      in bytes/second. Used with the `throttle` option. If `throttle`&#xA;      is a percentage and `bandwidth` is `0` then bandwidth throttling&#xA;      will be disabled. If `throttle` is expressed as a data rate then&#xA;      this option is ignored.&#xA;Set this to `absent` to remove it from the file completely."/>
    <properties name="metalink" documentation="Metalink for mirrors. Set this to `absent` to remove it from the file completely."/>
    <properties name="proxy_username" documentation="Username for this proxy. Set this to `absent` to remove it from the file completely."/>
    <properties name="gpgcheck" documentation="Whether to check the GPG signature on packages installed&#xA;      from this repository.&#xA;      Valid values are: False/0/No or True/1/Yes.&#xA;      Set this to `absent` to remove it from the file completely."/>
    <properties name="gpgkey" documentation="The URL for the GPG key with which packages from this&#xA;      repository are signed. Set this to `absent` to remove it from the file completely."/>
    <properties name="priority" documentation="Priority of this repository from 1-99. Requires that&#xA;      the `priorities` plugin is installed and enabled.&#xA;      Set this to `absent` to remove it from the file completely."/>
    <properties name="sslverify" documentation="Should yum verify SSL certificates/hosts at all.&#xA;      Valid values are: False/0/No or True/1/Yes.&#xA;      Set this to `absent` to remove it from the file completely."/>
    <properties name="proxy" documentation="URL of a proxy server that Yum should use when accessing this repository.&#xA;      This attribute can also be set to `'_none_'`, which will make Yum bypass any&#xA;      global proxy settings when accessing this repository.&#xA;      Set this to `absent` to remove it from the file completely."/>
    <properties name="mirrorlist" documentation="The URL that holds the list of mirrors for this repository.&#xA;      Set this to `absent` to remove it from the file completely."/>
    <properties name="keepalive" documentation="Whether HTTP/1.1 keepalive should be used with this repository.&#xA;      Valid values are: False/0/No or True/1/Yes.&#xA;      Set this to `absent` to remove it from the file completely."/>
    <properties name="mirrorlist_expire" documentation="Time (in seconds) after which the mirrorlist locally cached&#xA;      will expire.&#xA;Set this to `absent` to remove it from the file completely."/>
    <properties name="proxy_password" documentation="Password for this proxy. Set this to `absent` to remove it from the file completely."/>
    <properties name="enabled" documentation="Whether this repository is enabled.&#xA;    Valid values are: False/0/No or True/1/Yes.&#xA;    Set this to `absent` to remove it from the file completely."/>
    <properties name="sslclientkey" documentation="Path to the SSL client key yum should use to connect&#xA;      to repos/remote sites. Set this to `absent` to remove it from the file completely."/>
    <properties name="exclude" documentation="List of shell globs. Matching packages will never be&#xA;      considered in updates or installs for this repo.&#xA;      Set this to `absent` to remove it from the file completely."/>
    <properties name="http_caching" documentation="What to cache from this repository. Set this to `absent` to remove it from the file completely."/>
    <properties name="cost" documentation="Cost of this repository. Set this to `absent` to remove it from the file completely."/>
    <properties name="include" documentation="The URL of a remote file containing additional yum configuration&#xA;      settings. Puppet does not check for this file's existence or validity.&#xA;      Set this to `absent` to remove it from the file completely."/>
    <properties name="sslcacert" documentation="Path to the directory containing the databases of the&#xA;      certificate authorities yum should use to verify SSL certificates.&#xA;      Set this to `absent` to remove it from the file completely."/>
    <properties name="skip_if_unavailable" documentation="Should yum skip this repository if unable to reach it.&#xA;      Valid values are: False/0/No or True/1/Yes.&#xA;      Set this to `absent` to remove it from the file completely."/>
    <properties name="retries" documentation="Set the number of times any attempt to retrieve a file should&#xA;      retry before returning an error. Setting this to `0` makes yum&#xA;     try forever.&#xA;Set this to `absent` to remove it from the file completely."/>
    <properties name="baseurl" documentation="The URL for this repository. Set this to `absent` to remove it from the file completely."/>
    <properties name="failovermethod" documentation="The failover method for this repository; should be either&#xA;      `roundrobin` or `priority`. Set this to `absent` to remove it from the file completely."/>
    <properties name="sslclientcert" documentation="Path  to the SSL client certificate yum should use to connect&#xA;      to repos/remote sites. Set this to `absent` to remove it from the file completely."/>
    <properties name="descr" documentation="A human-readable description of the repository.&#xA;      This corresponds to the name parameter in `yum.conf(5)`.&#xA;      Set this to `absent` to remove it from the file completely."/>
    <properties name="enablegroups" documentation="Whether yum will allow the use of package groups for this&#xA;      repository.&#xA;      Valid values are: False/0/No or True/1/Yes.&#xA;      Set this to `absent` to remove it from the file completely."/>
    <properties name="timeout" documentation="Number of seconds to wait for a connection before timing&#xA;      out. Set this to `absent` to remove it from the file completely."/>
    <parameters name="name" documentation="The name of the repository.  This corresponds to the&#xA;     `repositoryid` parameter in `yum.conf(5)`."/>
    <parameters name="target" documentation="The filename to write the yum repository to."/>
    <parameters name="ensure"/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="vlan" documentation="Manages a VLAN on a router or switch.">
    <properties name="description" documentation="The VLAN's name."/>
    <parameters name="name" documentation="The numeric VLAN ID." namevar="true"/>
    <parameters name="device_url" documentation="The URL of the router or switch maintaining this VLAN."/>
    <parameters name="ensure"/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="router" documentation="Manages connected router.">
    <parameters name="url" documentation="An SSH or telnet URL at which to access the router, in the form&#xA;        `ssh://user:pass:enable@host/` or `telnet://user:pass:enable@host/`." namevar="true"/>
  </types>
  <types name="exec" documentation="Executes external commands.&#xA;&#xA;      Any command in an `exec` resource **must** be able to run multiple times&#xA;      without causing harm --- that is, it must be *idempotent*. There are three&#xA;      main ways for an exec to be idempotent:&#xA;&#xA;      * The command itself is already idempotent. (For example, `apt-get update`.)&#xA;      * The exec has an `onlyif`, `unless`, or `creates` attribute, which prevents&#xA;        Puppet from running the command unless some condition is met.&#xA;      * The exec has `refreshonly => true`, which only allows Puppet to run the&#xA;        command when some other resource is changed. (See the notes on refreshing&#xA;        below.)&#xA;&#xA;      A caution: There's a widespread tendency to use collections of execs to&#xA;      manage resources that aren't covered by an existing resource type. This&#xA;      works fine for simple tasks, but once your exec pile gets complex enough&#xA;      that you really have to think to understand what's happening, you should&#xA;      consider developing a custom resource type instead, as it will be much&#xA;      more predictable and maintainable.&#xA;&#xA;      **Refresh:** `exec` resources can respond to refresh events (via&#xA;      `notify`, `subscribe`, or the `~>` arrow). The refresh behavior of execs&#xA;      is non-standard, and can be affected by the `refresh` and&#xA;      `refreshonly` attributes:&#xA;&#xA;      * If `refreshonly` is set to true, the exec will _only_ run when it receives an&#xA;        event. This is the most reliable way to use refresh with execs.&#xA;      * If the exec already would have run and receives an event, it will run its&#xA;        command **up to two times.** (If an `onlyif`, `unless`, or `creates` condition&#xA;        is no longer met after the first run, the second run will not occur.)&#xA;      * If the exec already would have run, has a `refresh` command, and receives an&#xA;        event, it will run its normal command, then run its `refresh` command&#xA;        (as long as any `onlyif`, `unless`, or `creates` conditions are still met&#xA;        after the normal command finishes).&#xA;      * If the exec would **not** have run (due to an `onlyif`, `unless`, or `creates`&#xA;        attribute) and receives an event, it still will not run.&#xA;      * If the exec has `noop => true`, would otherwise have run, and receives&#xA;        an event from a non-noop resource, it will run once (or run its `refresh`&#xA;        command instead, if it has one).&#xA;&#xA;      In short: If there's a possibility of your exec receiving refresh events,&#xA;      it becomes doubly important to make sure the run conditions are restricted.&#xA;&#xA;      **Autorequires:** If Puppet is managing an exec's cwd or the executable&#xA;      file used in an exec's command, the exec resource will autorequire those&#xA;      files. If Puppet is managing the user that an exec should run as, the&#xA;      exec resource will autorequire that user.">
    <properties name="returns" documentation="The expected exit code(s).  An error will be returned if the&#xA;        executed command has some other exit code.  Defaults to 0. Can be&#xA;        specified as an array of acceptable exit codes or a single value.&#xA;&#xA;        On POSIX systems, exit codes are always integers between 0 and 255.&#xA;&#xA;        On Windows, **most** exit codes should be integers between 0&#xA;        and 2147483647.&#xA;&#xA;        Larger exit codes on Windows can behave inconsistently across different&#xA;        tools. The Win32 APIs define exit codes as 32-bit unsigned integers, but&#xA;        both the cmd.exe shell and the .NET runtime cast them to signed&#xA;        integers. This means some tools will report negative numbers for exit&#xA;        codes above 2147483647. (For example, cmd.exe reports 4294967295 as -1.)&#xA;        Since Puppet uses the plain Win32 APIs, it will report the very large&#xA;        number instead of the negative number, which might not be what you&#xA;        expect if you got the exit code from a cmd.exe session.&#xA;&#xA;        Microsoft recommends against using negative/very large exit codes, and&#xA;        you should avoid them when possible. To convert a negative exit code to&#xA;        the positive one Puppet will use, add it to 4294967296."/>
    <parameters name="logoutput" documentation="Whether to log command output in addition to logging the&#xA;        exit code.  Defaults to `on_failure`, which only logs the output&#xA;        when the command has an exit code that does not match any value&#xA;        specified by the `returns` attribute. As with any resource type,&#xA;        the log level can be controlled with the `loglevel` metaparameter."/>
    <parameters name="umask" documentation="Sets the umask to be used while executing this command"/>
    <parameters name="onlyif" documentation="If this parameter is set, then this `exec` will only run if&#xA;        the command has an exit code of 0.  For example:&#xA;&#xA;            exec { &quot;logrotate&quot;:&#xA;              path   => &quot;/usr/bin:/usr/sbin:/bin&quot;,&#xA;              onlyif => &quot;test `du /var/log/messages | cut -f1` -gt 100000&quot;&#xA;            }&#xA;&#xA;        This would run `logrotate` only if that test returned true.&#xA;&#xA;        Note that this command follows the same rules as the main command,&#xA;        which is to say that it must be fully qualified if the path is not set.&#xA;        It also uses the same provider as the main command, so any behavior&#xA;        that differs by provider will match.&#xA;&#xA;        Also note that onlyif can take an array as its value, e.g.:&#xA;&#xA;            onlyif => [&quot;test -f /tmp/file1&quot;, &quot;test -f /tmp/file2&quot;]&#xA;&#xA;        This will only run the exec if _all_ conditions in the array return true."/>
    <parameters name="cwd" documentation="The directory from which to run the command.  If&#xA;        this directory does not exist, the command will fail."/>
    <parameters name="creates" documentation="A file to look for before running the command. The command will&#xA;        only run if the file **doesn't exist.**&#xA;&#xA;        This parameter doesn't cause Puppet to create a file; it is only&#xA;        useful if **the command itself** creates a file.&#xA;&#xA;            exec { &quot;tar -xf /Volumes/nfs02/important.tar&quot;:&#xA;              cwd     => &quot;/var/tmp&quot;,&#xA;              creates => &quot;/var/tmp/myfile&quot;,&#xA;              path    => [&quot;/usr/bin&quot;, &quot;/usr/sbin&quot;]&#xA;            }&#xA;&#xA;        In this example, `myfile` is assumed to be a file inside&#xA;        `important.tar`. If it is ever deleted, the exec will bring it&#xA;        back by re-extracting the tarball. If `important.tar` does **not**&#xA;        actually contain `myfile`, the exec will keep running every time&#xA;        Puppet runs."/>
    <parameters name="refreshonly" documentation="The command should only be run as a&#xA;        refresh mechanism for when a dependent object is changed.  It only&#xA;        makes sense to use this option when this command depends on some&#xA;        other object; it is useful for triggering an action:&#xA;&#xA;            # Pull down the main aliases file&#xA;            file { &quot;/etc/aliases&quot;:&#xA;              source => &quot;puppet://server/module/aliases&quot;&#xA;            }&#xA;&#xA;            # Rebuild the database, but only when the file changes&#xA;            exec { newaliases:&#xA;              path        => [&quot;/usr/bin&quot;, &quot;/usr/sbin&quot;],&#xA;              subscribe   => File[&quot;/etc/aliases&quot;],&#xA;              refreshonly => true&#xA;            }&#xA;&#xA;        Note that only `subscribe` and `notify` can trigger actions, not `require`,&#xA;        so it only makes sense to use `refreshonly` with `subscribe` or `notify`."/>
    <parameters name="environment" documentation="Any additional environment variables you want to set for a&#xA;        command.  Note that if you use this to set PATH, it will override&#xA;        the `path` attribute.  Multiple environment variables should be&#xA;        specified as an array."/>
    <parameters name="unless" documentation="If this parameter is set, then this `exec` will run unless&#xA;        the command has an exit code of 0.  For example:&#xA;&#xA;            exec { &quot;/bin/echo root >> /usr/lib/cron/cron.allow&quot;:&#xA;              path   => &quot;/usr/bin:/usr/sbin:/bin&quot;,&#xA;              unless => &quot;grep root /usr/lib/cron/cron.allow 2>/dev/null&quot;&#xA;            }&#xA;&#xA;        This would add `root` to the cron.allow file (on Solaris) unless&#xA;        `grep` determines it's already there.&#xA;&#xA;        Note that this command follows the same rules as the main command,&#xA;        which is to say that it must be fully qualified if the path is not set.&#xA;        It also uses the same provider as the main command, so any behavior&#xA;        that differs by provider will match."/>
    <parameters name="try_sleep" documentation="The time to sleep in seconds between 'tries'."/>
    <parameters name="command" documentation="The actual command to execute.  Must either be fully qualified&#xA;        or a search path for the command must be provided.  If the command&#xA;        succeeds, any output produced will be logged at the instance's&#xA;        normal log level (usually `notice`), but if the command fails&#xA;        (meaning its return code does not match the specified code) then&#xA;        any output is logged at the `err` log level." namevar="true"/>
    <parameters name="path" documentation="The search path used for command execution.&#xA;        Commands must be fully qualified if no path is specified.  Paths&#xA;        can be specified as an array or as a ':' separated list."/>
    <parameters name="tries" documentation="The number of times execution of the command should be tried.&#xA;        Defaults to '1'. This many attempts will be made to execute&#xA;        the command until an acceptable return code is returned.&#xA;        Note that the timeout paramater applies to each try rather than&#xA;        to the complete set of tries."/>
    <parameters name="group" documentation="The group to run the command as.  This seems to work quite&#xA;        haphazardly on different platforms -- it is a platform issue&#xA;        not a Ruby or Puppet one, since the same variety exists when&#xA;        running commands as different users in the shell."/>
    <parameters name="user" documentation="The user to run the command as.  Note that if you&#xA;        use this then any error output is not currently captured.  This&#xA;        is because of a bug within Ruby.  If you are using Puppet to&#xA;        create this user, the exec will automatically require the user,&#xA;        as long as it is specified by name.&#xA;&#xA;        Please note that the $HOME environment variable is not automatically set&#xA;        when using this attribute."/>
    <parameters name="refresh" documentation="How to refresh this command.  By default, the exec is just&#xA;        called again when it receives an event from another resource,&#xA;        but this parameter allows you to define a different command&#xA;        for refreshing."/>
    <parameters name="timeout" documentation="The maximum time the command should take.  If the command takes&#xA;        longer than the timeout, the command is considered to have failed&#xA;        and will be stopped. The timeout is specified in seconds. The default&#xA;        timeout is 300 seconds and you can set it to 0 to disable the timeout."/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="package" documentation="Manage packages.  There is a basic dichotomy in package&#xA;      support right now:  Some package types (e.g., yum and apt) can&#xA;      retrieve their own package files, while others (e.g., rpm and sun)&#xA;      cannot.  For those package formats that cannot retrieve their own files,&#xA;      you can use the `source` parameter to point to the correct file.&#xA;&#xA;      Puppet will automatically guess the packaging format that you are&#xA;      using based on the platform you are on, but you can override it&#xA;      using the `provider` parameter; each provider defines what it&#xA;      requires in order to function, and you must meet those requirements&#xA;      to use a given provider.&#xA;&#xA;      **Autorequires:** If Puppet is managing the files specified as a&#xA;      package's `adminfile`, `responsefile`, or `source`, the package&#xA;      resource will autorequire those files.">
    <properties name="package_settings" documentation="Settings that can change the contents or configuration of a package.&#xA;&#xA;        The formatting and effects of package_settings are provider-specific; any&#xA;        provider that implements them must explain how to use them in its&#xA;        documentation. (Our general expectation is that if a package is&#xA;        installed but its settings are out of sync, the provider should&#xA;        re-install that package with the desired settings.)&#xA;&#xA;        An example of how package_settings could be used is FreeBSD's port build&#xA;        options --- a future version of the provider could accept a hash of options,&#xA;        and would reinstall the port if the installed version lacked the correct&#xA;        settings.&#xA;&#xA;            package { 'www/apache22':&#xA;              package_settings => { 'SUEXEC' => false }&#xA;            }&#xA;&#xA;        Again, check the documentation of your platform's package provider to see&#xA;        the actual usage."/>
    <parameters name="platform" documentation="A read-only parameter set by the package."/>
    <parameters name="status" documentation="A read-only parameter set by the package."/>
    <parameters name="root" documentation="A read-only parameter set by the package."/>
    <parameters name="vendor" documentation="A read-only parameter set by the package."/>
    <parameters name="flavor" documentation="OpenBSD supports 'flavors', which are further specifications for&#xA;        which type of package you want."/>
    <parameters name="allowcdrom" documentation="Tells apt to allow cdrom sources in the sources.list file.&#xA;        Normally apt will bail if you try this."/>
    <parameters name="configfiles" documentation="Whether configfiles should be kept or replaced.  Most packages&#xA;        types do not support this parameter. Defaults to `keep`."/>
    <parameters name="uninstall_options" documentation="An array of additional options to pass when uninstalling a package. These&#xA;        options are package-specific, and should be documented by the software&#xA;        vendor.  For example:&#xA;&#xA;            package { 'VMware Tools':&#xA;              ensure            => absent,&#xA;              uninstall_options => [ { 'REMOVE' => 'Sync,VSS' } ],&#xA;            }&#xA;&#xA;        Each option in the array can either be a string or a hash, where each&#xA;        key and value pair are interpreted in a provider specific way.  Each&#xA;        option will automatically be quoted when passed to the uninstall&#xA;        command.&#xA;&#xA;        On Windows, this is the **only** place in Puppet where backslash&#xA;        separators should be used.  Note that backslashes in double-quoted&#xA;        strings _must_ be double-escaped and backslashes in single-quoted&#xA;        strings _may_ be double-escaped."/>
    <parameters name="install_options" documentation="An array of additional options to pass when installing a package. These&#xA;        options are package-specific, and should be documented by the software&#xA;        vendor.  One commonly implemented option is `INSTALLDIR`:&#xA;&#xA;            package { 'mysql':&#xA;              ensure          => installed,&#xA;              source          => 'N:/packages/mysql-5.5.16-winx64.msi',&#xA;              install_options => [ '/S', { 'INSTALLDIR' => 'C:\mysql-5.5' } ],&#xA;            }&#xA;&#xA;        Each option in the array can either be a string or a hash, where each&#xA;        key and value pair are interpreted in a provider specific way.  Each&#xA;        option will automatically be quoted when passed to the install command.&#xA;&#xA;        On Windows, this is the **only** place in Puppet where backslash&#xA;        separators should be used.  Note that backslashes in double-quoted&#xA;        strings _must_ be double-escaped and backslashes in single-quoted&#xA;        strings _may_ be double-escaped."/>
    <parameters name="category" documentation="A read-only parameter set by the package."/>
    <parameters name="source" documentation="Where to find the actual package. This must be a local file&#xA;        (or on a network file system) or a URL that your specific&#xA;        packaging type understands; Puppet will not retrieve files for you,&#xA;        although you can manage packages as `file` resources."/>
    <parameters name="responsefile" documentation="A file containing any necessary answers to questions asked by&#xA;        the package.  This is currently used on Solaris and Debian.  The&#xA;        value will be validated according to system rules, but it should&#xA;        generally be a fully qualified path."/>
    <parameters name="description" documentation="A read-only parameter set by the package."/>
    <parameters name="allow_virtual" documentation="Specifies if virtual package names are allowed for install and uninstall."/>
    <parameters name="name" documentation="The package name.  This is the name that the packaging&#xA;      system uses internally, which is sometimes (especially on Solaris)&#xA;      a name that is basically useless to humans.  If you want to&#xA;      abstract package installation, then you can use aliases to provide&#xA;      a common name to packages:&#xA;&#xA;          # In the 'openssl' class&#xA;          $ssl = $operatingsystem ? {&#xA;            solaris => SMCossl,&#xA;            default => openssl&#xA;          }&#xA;&#xA;          # It is not an error to set an alias to the same value as the&#xA;          # object name.&#xA;          package { $ssl:&#xA;            ensure => installed,&#xA;            alias  => openssl&#xA;          }&#xA;&#xA;          . etc. .&#xA;&#xA;          $ssh = $operatingsystem ? {&#xA;            solaris => SMCossh,&#xA;            default => openssh&#xA;          }&#xA;&#xA;          # Use the alias to specify a dependency, rather than&#xA;          # having another selector to figure it out again.&#xA;          package { $ssh:&#xA;            ensure  => installed,&#xA;            alias   => openssh,&#xA;            require => Package[openssl]&#xA;          }" namevar="true"/>
    <parameters name="instance" documentation="A read-only parameter set by the package."/>
    <parameters name="adminfile" documentation="A file containing package defaults for installing packages.&#xA;        This is currently only used on Solaris.  The value will be&#xA;        validated according to system rules, which in the case of&#xA;        Solaris means that it should either be a fully qualified path&#xA;        or it should be in `/var/sadm/install/admin`."/>
    <parameters name="ensure" documentation="What state the package should be in. On packaging systems that can&#xA;        retrieve new packages on their own, you can choose which package to&#xA;        retrieve by specifying a version number or `latest` as the ensure&#xA;        value. On packaging systems that manage configuration files separately&#xA;        from &quot;normal&quot; system files, you can uninstall config files by&#xA;        specifying `purged` as the ensure value. This defaults to `installed`."/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="stage" documentation="A resource type for creating new run stages.  Once a stage is available,&#xA;    classes can be assigned to it by declaring them with the resource-like syntax&#xA;    and using&#xA;    [the `stage` metaparameter](http://docs.puppetlabs.com/references/latest/metaparameter.html#stage).&#xA;&#xA;    Note that new stages are not useful unless you also declare their order&#xA;    in relation to the default `main` stage.&#xA;&#xA;    A complete run stage example:&#xA;&#xA;        stage { 'pre':&#xA;          before => Stage['main'],&#xA;        }&#xA;&#xA;        class { 'apt-updates':&#xA;          stage => 'pre',&#xA;        }&#xA;&#xA;    Individual resources cannot be assigned to run stages; you can only set stages&#xA;    for classes.">
    <parameters name="name" documentation="The name of the stage. Use this as the value for the `stage` metaparameter&#xA;      when assigning classes to this stage."/>
  </types>
  <types name="augeas" documentation="Apply a change or an array of changes to the filesystem&#xA;    using the augeas tool.&#xA;&#xA;    Requires:&#xA;&#xA;    - [Augeas](http://www.augeas.net)&#xA;    - The ruby-augeas bindings&#xA;&#xA;    Sample usage with a string:&#xA;&#xA;        augeas{&quot;test1&quot; :&#xA;          context => &quot;/files/etc/sysconfig/firstboot&quot;,&#xA;          changes => &quot;set RUN_FIRSTBOOT YES&quot;,&#xA;          onlyif  => &quot;match other_value size > 0&quot;,&#xA;        }&#xA;&#xA;    Sample usage with an array and custom lenses:&#xA;&#xA;        augeas{&quot;jboss_conf&quot;:&#xA;          context   => &quot;/files&quot;,&#xA;          changes   => [&#xA;              &quot;set etc/jbossas/jbossas.conf/JBOSS_IP $ipaddress&quot;,&#xA;              &quot;set etc/jbossas/jbossas.conf/JAVA_HOME /usr&quot;,&#xA;            ],&#xA;          load_path => &quot;$/usr/share/jbossas/lenses&quot;,&#xA;        }">
    <properties name="returns" documentation="The expected return code from the augeas command. Should not be set."/>
    <parameters name="incl" documentation="Load only a specific file, e.g. `/etc/hosts`. This can greatly speed&#xA;      up the execution the resource. When this parameter is set, you must also&#xA;      set the `lens` parameter to indicate which lens to use."/>
    <parameters name="show_diff" documentation="Whether to display differences when the file changes, defaulting to&#xA;        true.  This parameter is useful for files that may contain passwords or&#xA;        other secret data, which might otherwise be included in Puppet reports or&#xA;        other insecure outputs.  If the global `show_diff` setting&#xA;        is false, then no diffs will be shown even if this parameter is true."/>
    <parameters name="type_check" documentation="Whether augeas should perform typechecking. Defaults to false."/>
    <parameters name="load_path" documentation="Optional colon-separated list or array of directories; these directories are searched for schema definitions. The agent's `$libdir/augeas/lenses` path will always be added to support pluginsync."/>
    <parameters name="root" documentation="A file system path; all files loaded by Augeas are loaded underneath `root`."/>
    <parameters name="onlyif" documentation="Optional augeas command and comparisons to control the execution of this type.&#xA;      Supported onlyif syntax:&#xA;&#xA;      * `get &lt;AUGEAS_PATH> &lt;COMPARATOR> &lt;STRING>`&#xA;      * `match &lt;MATCH_PATH> size &lt;COMPARATOR> &lt;INT>`&#xA;      * `match &lt;MATCH_PATH> include &lt;STRING>`&#xA;      * `match &lt;MATCH_PATH> not_include &lt;STRING>`&#xA;      * `match &lt;MATCH_PATH> == &lt;AN_ARRAY>`&#xA;      * `match &lt;MATCH_PATH> != &lt;AN_ARRAY>`&#xA;&#xA;      where:&#xA;&#xA;      * `AUGEAS_PATH` is a valid path scoped by the context&#xA;      * `MATCH_PATH` is a valid match syntax scoped by the context&#xA;      * `COMPARATOR` is one of `>, >=, !=, ==, &lt;=,` or `&lt;`&#xA;      * `STRING` is a string&#xA;      * `INT` is a number&#xA;      * `AN_ARRAY` is in the form `['a string', 'another']`"/>
    <parameters name="name" documentation="The name of this task. Used for uniqueness." namevar="true"/>
    <parameters name="context" documentation="Optional context path. This value is prepended to the paths of all&#xA;      changes if the path is relative. If the `incl` parameter is set,&#xA;      defaults to `/files + incl`; otherwise, defaults to the empty string."/>
    <parameters name="force" documentation="Optional command to force the augeas type to execute even if it thinks changes&#xA;    will not be made. This does not overide the `onlyif` parameter."/>
    <parameters name="lens" documentation="Use a specific lens, e.g. `Hosts.lns`. When this parameter is set, you&#xA;      must also set the `incl` parameter to indicate which file to load.&#xA;      The Augeas documentation includes [a list of available lenses](http://augeas.net/stock_lenses.html)."/>
    <parameters name="changes" documentation="The changes which should be applied to the filesystem. This&#xA;    can be a command or an array of commands. The following commands are supported:&#xA;&#xA;    * `set &lt;PATH> &lt;VALUE>` --- Sets the value `VALUE` at loction `PATH`&#xA;    * `setm &lt;PATH> &lt;SUB> &lt;VALUE>` --- Sets multiple nodes (matching `SUB` relative to `PATH`) to `VALUE`&#xA;    * `rm &lt;PATH>` --- Removes the node at location `PATH`&#xA;    * `remove &lt;PATH>` --- Synonym for `rm`&#xA;    * `clear &lt;PATH>` --- Sets the node at `PATH` to `NULL`, creating it if needed&#xA;    * `clearm &lt;PATH> &lt;SUB>` --- Sets multiple nodes (matching `SUB` relative to `PATH`) to `NULL`&#xA;    * `ins &lt;LABEL> (before|after) &lt;PATH>` --- Inserts an empty node `LABEL` either before or after `PATH`.&#xA;    * `insert &lt;LABEL> &lt;WHERE> &lt;PATH>` --- Synonym for `ins`&#xA;    * `mv &lt;PATH> &lt;OTHER PATH>` --- Moves a node at `PATH` to the new location `OTHER PATH`&#xA;    * `move &lt;PATH> &lt;OTHER PATH>` --- Synonym for `mv`&#xA;    * `defvar &lt;NAME> &lt;PATH>` --- Sets Augeas variable `$NAME` to `PATH`&#xA;    * `defnode &lt;NAME> &lt;PATH> &lt;VALUE>` --- Sets Augeas variable `$NAME` to `PATH`, creating it with `VALUE` if needed&#xA;&#xA;    If the `context` parameter is set, that value is prepended to any relative `PATH`s."/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="k5login" documentation="Manage the `.k5login` file for a user.  Specify the full path to&#xA;    the `.k5login` file as the name, and an array of principals as the&#xA;    `principals` attribute.">
    <properties name="principals" documentation="The principals present in the `.k5login` file. This should be specified as an array."/>
    <properties name="mode" documentation="The desired permissions mode of the `.k5login` file. Defaults to `644`."/>
    <parameters name="path" documentation="The path to the `.k5login` file to manage.  Must be fully qualified." namevar="true"/>
    <parameters name="ensure"/>
  </types>
  <types name="mailalias" documentation="Creates an email alias in the local alias database.">
    <properties name="target" documentation="The file in which to store the aliases.  Only used by&#xA;        those providers that write to disk."/>
    <properties name="recipient" documentation="Where email should be sent.  Multiple values&#xA;        should be specified as an array."/>
    <parameters name="name" documentation="The alias name."/>
    <parameters name="ensure"/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="component">
    <parameters name="name" documentation="The name of the component.  Generally optional." namevar="true"/>
  </types>
  <types name="scheduled_task" documentation="Installs and manages Windows Scheduled Tasks.  All attributes&#xA;    except `name`, `command`, and `trigger` are optional; see the description&#xA;    of the `trigger` attribute for details on setting schedules.">
    <properties name="trigger" documentation="One or more triggers defining when the task should run. A single trigger is&#xA;      represented as a hash, and multiple triggers can be specified with an array of&#xA;      hashes.&#xA;&#xA;      A trigger can contain the following keys:&#xA;&#xA;      * For all triggers:&#xA;          * `schedule` **(Required)** --- The schedule type. Valid values are&#xA;            `daily`, `weekly`, `monthly`, or `once`.&#xA;          * `start_time` **(Required)** --- The time of day when the trigger should&#xA;            first become active. Several time formats will work, but we&#xA;            suggest 24-hour time formatted as HH:MM.&#xA;          * `start_date` ---  The date when the trigger should first become active.&#xA;            Defaults to the current date. You should format dates as YYYY-MM-DD,&#xA;            although other date formats may work. (Under the hood, this uses `Date.parse`.)&#xA;      * For daily triggers:&#xA;          * `every` --- How often the task should run, as a number of days. Defaults&#xA;            to 1. (&quot;2&quot; means every other day, &quot;3&quot; means every three days, etc.)&#xA;      * For weekly triggers:&#xA;          * `every` --- How often the task should run, as a number of weeks. Defaults&#xA;            to 1. (&quot;2&quot; means every other week, &quot;3&quot; means every three weeks, etc.)&#xA;          * `day_of_week` --- Which days of the week the task should run, as an array.&#xA;            Defaults to all days. Each day must be one of `mon`, `tues`,&#xA;            `wed`, `thurs`, `fri`, `sat`, `sun`, or `all`.&#xA;      * For monthly-by-date triggers:&#xA;          * `months` --- Which months the task should run, as an array. Defaults to&#xA;            all months. Each month must be an integer between 1 and 12.&#xA;          * `on` **(Required)** --- Which days of the month the task should run,&#xA;            as an array. Each day must beeither an integer between 1 and 31,&#xA;            or the special value `last,` which is always the last day of the month.&#xA;      * For monthly-by-weekday triggers:&#xA;          * `months` --- Which months the task should run, as an array. Defaults to&#xA;            all months. Each month must be an integer between 1 and 12.&#xA;          * `day_of_week` **(Required)** --- Which day of the week the task should&#xA;            run, as an array with only one element. Each day must be one of `mon`,&#xA;            `tues`, `wed`, `thurs`, `fri`, `sat`, `sun`, or `all`.&#xA;          * `which_occurrence` **(Required)** --- The occurrence of the chosen weekday&#xA;            when the task should run. Must be one of `first`, `second`, `third`,&#xA;            `fourth`, `fifth`, or `last`.&#xA;&#xA;      Examples:&#xA;&#xA;          # Run at 8am on the 1st, 15th, and last day of the month in January, March,&#xA;          # May, July, September, and November, starting after August 31st, 2011.&#xA;          trigger => {&#xA;            schedule   => monthly,&#xA;            start_date => '2011-08-31',   # Defaults to current date&#xA;            start_time => '08:00',        # Must be specified&#xA;            months     => [1,3,5,7,9,11], # Defaults to all&#xA;            on         => [1, 15, last],  # Must be specified&#xA;          }&#xA;&#xA;          # Run at 8am on the first Monday of the month for January, March, and May,&#xA;          # starting after August 31st, 2011.&#xA;          trigger => {&#xA;            schedule         => monthly,&#xA;            start_date       => '2011-08-31', # Defaults to current date&#xA;            start_time       => '08:00',      # Must be specified&#xA;            months           => [1,3,5],      # Defaults to all&#xA;            which_occurrence => first,        # Must be specified&#xA;            day_of_week      => [mon],        # Must be specified&#xA;          }"/>
    <properties name="enabled" documentation="Whether the triggers for this task should be enabled. This attribute&#xA;      affects every trigger for the task; triggers cannot be enabled or&#xA;      disabled individually."/>
    <properties name="arguments" documentation="Any arguments or flags that should be passed to the command. Multiple arguments&#xA;      should be specified as a space-separated string."/>
    <properties name="command" documentation="The full path to the application to run, without any arguments."/>
    <properties name="working_dir" documentation="The full path of the directory in which to start the command."/>
    <properties name="user" documentation="The user to run the scheduled task as.  Please note that not&#xA;      all security configurations will allow running a scheduled task&#xA;      as 'SYSTEM', and saving the scheduled task under these&#xA;      conditions will fail with a reported error of 'The operation&#xA;      completed successfully'.  It is recommended that you either&#xA;      choose another user to run the scheduled task, or alter the&#xA;      security policy to allow v1 scheduled tasks to run as the&#xA;      'SYSTEM' account.  Defaults to 'SYSTEM'.&#xA;&#xA;      Please also note that Puppet must be running as a privileged user&#xA;      in order to manage `scheduled_task` resources. Running as an&#xA;      unprivileged user will result in 'access denied' errors."/>
    <parameters name="name" documentation="The name assigned to the scheduled task.  This will uniquely&#xA;      identify the task on the system." namevar="true"/>
    <parameters name="password" documentation="The password for the user specified in the 'user' attribute.&#xA;      This is only used if specifying a user other than 'SYSTEM'.&#xA;      Since there is no way to retrieve the password used to set the&#xA;      account information for a task, this parameter will not be used&#xA;      to determine if a scheduled task is in sync or not."/>
    <parameters name="ensure"/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="macauthorization" documentation="Manage the Mac OS X authorization database. See the&#xA;    [Apple developer site](http://developer.apple.com/documentation/Security/Conceptual/Security_Overview/Security_Services/chapter_4_section_5.html)&#xA;    for more information.&#xA;&#xA;    Note that authorization store directives with hyphens in their names have&#xA;    been renamed to use underscores, as Puppet does not react well to hyphens&#xA;    in identifiers.&#xA;&#xA;    **Autorequires:** If Puppet is managing the `/etc/authorization` file, each&#xA;    macauthorization resource will autorequire it.">
    <properties name="shared" documentation="Whether the Security Server should mark the credentials used to gain&#xA;    this right as shared. The Security Server may use any shared credentials&#xA;    to authorize this right. For maximum security, set sharing to false so&#xA;    credentials stored by the Security Server for one application may not be&#xA;    used by another application."/>
    <properties name="session_owner" documentation="Whether the session owner automatically matches this rule or right.&#xA;    Corresponds to `session-owner` in the authorization store."/>
    <properties name="allow_root" documentation="Corresponds to `allow-root` in the authorization store. Specifies&#xA;    whether a right should be allowed automatically if the requesting process&#xA;    is running with `uid == 0`.  AuthorizationServices defaults this attribute&#xA;    to false if not specified."/>
    <properties name="k_of_n" documentation="How large a subset of rule mechanisms must succeed for successful&#xA;    authentication. If there are 'n' mechanisms, then 'k' (the integer value&#xA;    of this parameter) mechanisms must succeed. The most common setting for&#xA;    this parameter is `1`. If `k-of-n` is not set, then every mechanism ---&#xA;    that is, 'n-of-n' --- must succeed."/>
    <properties name="authenticate_user" documentation="Corresponds to `authenticate-user` in the authorization store."/>
    <properties name="auth_class" documentation="Corresponds to `class` in the authorization store; renamed due&#xA;    to 'class' being a reserved word in Puppet."/>
    <properties name="auth_type" documentation="Type --- this can be a `right` or a `rule`. The `comment` type has&#xA;    not yet been implemented."/>
    <properties name="rule" documentation="The rule(s) that this right refers to."/>
    <properties name="tries" documentation="The number of tries allowed."/>
    <properties name="group" documentation="A group which the user must authenticate as a member of. This&#xA;    must be a single group."/>
    <properties name="comment" documentation="The `comment` attribute for authorization resources."/>
    <properties name="mechanisms" documentation="An array of suitable mechanisms."/>
    <properties name="timeout" documentation="The number of seconds in which the credential used by this rule will&#xA;    expire. For maximum security where the user must authenticate every time,&#xA;    set the timeout to 0. For minimum security, remove the timeout attribute&#xA;    so the user authenticates only once per session."/>
    <parameters name="name" documentation="The name of the right or rule to be managed.&#xA;    Corresponds to `key` in Authorization Services. The key is the name&#xA;    of a rule. A key uses the same naming conventions as a right. The&#xA;    Security Server uses a rule's key to match the rule with a right.&#xA;    Wildcard keys end with a '.'. The generic rule has an empty key value.&#xA;    Any rights that do not match a specific rule use the generic rule." namevar="true"/>
    <parameters name="ensure"/>
    <parameters name="provider" documentation=""/>
  </types>
  <types name="filebucket" documentation="A repository for storing and retrieving file content by MD5 checksum. Can&#xA;      be local to each agent node, or centralized on a puppet master server. All&#xA;      puppet masters provide a filebucket service that agent nodes can access&#xA;      via HTTP, but you must declare a filebucket resource before any agents&#xA;      will do so.&#xA;&#xA;      Filebuckets are used for the following features:&#xA;&#xA;      - **Content backups.** If the `file` type's `backup` attribute is set to&#xA;        the name of a filebucket, Puppet will back up the _old_ content whenever&#xA;        it rewrites a file; see the documentation for the `file` type for more&#xA;        details. These backups can be used for manual recovery of content, but&#xA;        are more commonly used to display changes and differences in a tool like&#xA;        Puppet Dashboard.&#xA;      - **Content distribution.** The optional static compiler populates the&#xA;        puppet master's filebucket with the _desired_ content for each file,&#xA;        then instructs the agent to retrieve the content for a specific&#xA;        checksum. For more details,&#xA;        [see the `static_compiler` section in the catalog indirection docs](http://docs.puppetlabs.com/references/latest/indirection.html#catalog).&#xA;&#xA;      To use a central filebucket for backups, you will usually want to declare&#xA;      a filebucket resource and a resource default for the `backup` attribute&#xA;      in site.pp:&#xA;&#xA;          # /etc/puppet/manifests/site.pp&#xA;          filebucket { 'main':&#xA;            path   => false,                # This is required for remote filebuckets.&#xA;            server => 'puppet.example.com', # Optional; defaults to the configured puppet master.&#xA;          }&#xA;&#xA;          File { backup => main, }&#xA;&#xA;      Puppet master servers automatically provide the filebucket service, so&#xA;      this will work in a default configuration. If you have a heavily&#xA;      restricted `auth.conf` file, you may need to allow access to the&#xA;      `file_bucket_file` endpoint.">
    <parameters name="port"/>
    <parameters name="name" documentation="The name of the filebucket." namevar="true"/>
    <parameters name="path" documentation="The path to the _local_ filebucket; defaults to the value of the&#xA;        `clientbucketdir` setting.  To use a remote filebucket, you _must_ set&#xA;        this attribute to `false`."/>
    <parameters name="server" documentation="The server providing the remote filebucket service. Defaults to the&#xA;        value of the `server` setting (that is, the currently configured&#xA;        puppet master server).&#xA;&#xA;        This setting is _only_ consulted if the `path` attribute is set to `false`."/>
  </types>
  <types name="nagios_host">
    <parameters name="notification_period"/>
    <parameters name="icon_image"/>
    <parameters name="check_interval"/>
    <parameters name="max_check_attempts"/>
    <parameters name="contacts"/>
    <parameters name="passive_checks_enabled"/>
    <parameters name="realm"/>
    <parameters name="check_freshness"/>
    <parameters name="action_url"/>
    <parameters name="event_handler_enabled"/>
    <parameters name="stalking_options"/>
    <parameters name="3d_coords"/>
    <parameters name="retry_interval"/>
    <parameters name="first_notification_delay"/>
    <parameters name="display_name"/>
    <parameters name="initial_state"/>
    <parameters name="retain_nonstatus_information"/>
    <parameters name="check_command"/>
    <parameters name="parents"/>
    <parameters name="process_perf_data"/>
    <parameters name="vrml_image"/>
    <parameters name="use"/>
    <parameters name="obsess_over_host"/>
    <parameters name="poller_tag"/>
    <parameters name="freshness_threshold"/>
    <parameters name="failure_prediction_enabled"/>
    <parameters name="notes_url"/>
    <parameters name="high_flap_threshold"/>
    <parameters name="active_checks_enabled"/>
    <parameters name="notifications_enabled"/>
    <parameters name="hostgroups"/>
    <parameters name="flap_detection_enabled"/>
    <parameters name="2d_coords"/>
    <parameters name="icon_image_alt"/>
    <parameters name="notification_options"/>
    <parameters name="notification_interval"/>
    <parameters name="ensure"/>
    <parameters name="statusmap_image"/>
    <parameters name="low_flap_threshold"/>
    <parameters name="business_impact"/>
    <parameters name="alias"/>
    <parameters name="flap_detection_options"/>
    <parameters name="check_period"/>
    <parameters name="host_name"/>
    <parameters name="register"/>
    <parameters name="address"/>
    <parameters name="event_handler"/>
    <parameters name="target"/>
    <parameters name="retain_status_information"/>
    <parameters name="notes"/>
    <parameters name="contact_groups"/>
  </types>
  <types name="nagios_hostgroup">
    <parameters name="register"/>
    <parameters name="notes_url"/>
    <parameters name="realm"/>
    <parameters name="alias"/>
    <parameters name="target"/>
    <parameters name="use"/>
    <parameters name="hostgroup_members"/>
    <parameters name="notes"/>
    <parameters name="action_url"/>
    <parameters name="members"/>
    <parameters name="hostgroup_name"/>
    <parameters name="ensure"/>
  </types>
  <types name="nagios_service">
    <parameters name="notification_period"/>
    <parameters name="servicegroups"/>
    <parameters name="icon_image"/>
    <parameters name="check_interval"/>
    <parameters name="max_check_attempts"/>
    <parameters name="contacts"/>
    <parameters name="passive_checks_enabled"/>
    <parameters name="check_freshness"/>
    <parameters name="action_url"/>
    <parameters name="event_handler_enabled"/>
    <parameters name="stalking_options"/>
    <parameters name="_naginator_name"/>
    <parameters name="retry_interval"/>
    <parameters name="first_notification_delay"/>
    <parameters name="display_name"/>
    <parameters name="initial_state"/>
    <parameters name="retain_nonstatus_information"/>
    <parameters name="check_command"/>
    <parameters name="process_perf_data"/>
    <parameters name="use"/>
    <parameters name="poller_tag"/>
    <parameters name="freshness_threshold"/>
    <parameters name="failure_prediction_enabled"/>
    <parameters name="hostgroup_name"/>
    <parameters name="notes_url"/>
    <parameters name="active_checks_enabled"/>
    <parameters name="normal_check_interval"/>
    <parameters name="is_volatile"/>
    <parameters name="high_flap_threshold"/>
    <parameters name="notifications_enabled"/>
    <parameters name="obsess_over_service"/>
    <parameters name="flap_detection_enabled"/>
    <parameters name="icon_image_alt"/>
    <parameters name="notification_options"/>
    <parameters name="notification_interval"/>
    <parameters name="ensure"/>
    <parameters name="low_flap_threshold"/>
    <parameters name="business_impact"/>
    <parameters name="retry_check_interval"/>
    <parameters name="flap_detection_options"/>
    <parameters name="check_period"/>
    <parameters name="host_name"/>
    <parameters name="parallelize_check"/>
    <parameters name="register"/>
    <parameters name="event_handler"/>
    <parameters name="target"/>
    <parameters name="retain_status_information"/>
    <parameters name="notes"/>
    <parameters name="service_description"/>
    <parameters name="contact_groups"/>
  </types>
  <types name="nagios_servicegroup">
    <parameters name="register"/>
    <parameters name="notes_url"/>
    <parameters name="alias"/>
    <parameters name="servicegroup_members"/>
    <parameters name="servicegroup_name"/>
    <parameters name="target"/>
    <parameters name="use"/>
    <parameters name="notes"/>
    <parameters name="action_url"/>
    <parameters name="members"/>
    <parameters name="ensure"/>
  </types>
  <types name="nagios_contact">
    <parameters name="host_notification_period"/>
    <parameters name="host_notification_commands"/>
    <parameters name="service_notification_period"/>
    <parameters name="use"/>
    <parameters name="address1"/>
    <parameters name="address2"/>
    <parameters name="address3"/>
    <parameters name="contact_name"/>
    <parameters name="service_notifications_enabled"/>
    <parameters name="contactgroups"/>
    <parameters name="ensure"/>
    <parameters name="pager"/>
    <parameters name="host_notification_options"/>
    <parameters name="alias"/>
    <parameters name="service_notification_options"/>
    <parameters name="register"/>
    <parameters name="address6"/>
    <parameters name="host_notifications_enabled"/>
    <parameters name="address5"/>
    <parameters name="service_notification_commands"/>
    <parameters name="address4"/>
    <parameters name="email"/>
    <parameters name="target"/>
    <parameters name="retain_nonstatus_information"/>
    <parameters name="retain_status_information"/>
    <parameters name="can_submit_commands"/>
  </types>
  <types name="nagios_contactgroup">
    <parameters name="register"/>
    <parameters name="contactgroup_members"/>
    <parameters name="alias"/>
    <parameters name="target"/>
    <parameters name="use"/>
    <parameters name="members"/>
    <parameters name="contactgroup_name"/>
    <parameters name="ensure"/>
  </types>
  <types name="nagios_timeperiod">
    <parameters name="register"/>
    <parameters name="timeperiod_name"/>
    <parameters name="wednesday"/>
    <parameters name="alias"/>
    <parameters name="thursday"/>
    <parameters name="monday"/>
    <parameters name="sunday"/>
    <parameters name="target"/>
    <parameters name="use"/>
    <parameters name="exclude"/>
    <parameters name="saturday"/>
    <parameters name="friday"/>
    <parameters name="tuesday"/>
    <parameters name="ensure"/>
  </types>
  <types name="nagios_command">
    <parameters name="command_name"/>
    <parameters name="target"/>
    <parameters name="poller_tag"/>
    <parameters name="command_line"/>
    <parameters name="ensure"/>
  </types>
  <types name="nagios_servicedependency">
    <parameters name="_naginator_name"/>
    <parameters name="inherits_parent"/>
    <parameters name="notification_failure_criteria"/>
    <parameters name="use"/>
    <parameters name="host_name"/>
    <parameters name="hostgroup_name"/>
    <parameters name="register"/>
    <parameters name="dependent_service_description"/>
    <parameters name="dependent_host_name"/>
    <parameters name="execution_failure_criteria"/>
    <parameters name="target"/>
    <parameters name="dependency_period"/>
    <parameters name="service_description"/>
    <parameters name="dependent_hostgroup_name"/>
    <parameters name="ensure"/>
  </types>
  <types name="nagios_serviceescalation">
    <parameters name="escalation_options"/>
    <parameters name="first_notification"/>
    <parameters name="_naginator_name"/>
    <parameters name="servicegroup_name"/>
    <parameters name="use"/>
    <parameters name="host_name"/>
    <parameters name="hostgroup_name"/>
    <parameters name="contacts"/>
    <parameters name="register"/>
    <parameters name="escalation_period"/>
    <parameters name="target"/>
    <parameters name="service_description"/>
    <parameters name="last_notification"/>
    <parameters name="notification_interval"/>
    <parameters name="ensure"/>
    <parameters name="contact_groups"/>
  </types>
  <types name="nagios_hostdependency">
    <parameters name="register"/>
    <parameters name="dependent_host_name"/>
    <parameters name="_naginator_name"/>
    <parameters name="notification_failure_criteria"/>
    <parameters name="execution_failure_criteria"/>
    <parameters name="inherits_parent"/>
    <parameters name="dependency_period"/>
    <parameters name="target"/>
    <parameters name="use"/>
    <parameters name="host_name"/>
    <parameters name="dependent_hostgroup_name"/>
    <parameters name="hostgroup_name"/>
    <parameters name="ensure"/>
  </types>
  <types name="nagios_hostescalation">
    <parameters name="register"/>
    <parameters name="escalation_options"/>
    <parameters name="first_notification"/>
    <parameters name="_naginator_name"/>
    <parameters name="escalation_period"/>
    <parameters name="target"/>
    <parameters name="use"/>
    <parameters name="host_name"/>
    <parameters name="last_notification"/>
    <parameters name="notification_interval"/>
    <parameters name="contact_groups"/>
    <parameters name="contacts"/>
    <parameters name="hostgroup_name"/>
    <parameters name="ensure"/>
  </types>
  <types name="nagios_hostextinfo">
    <parameters name="statusmap_image"/>
    <parameters name="icon_image"/>
    <parameters name="vrml_image"/>
    <parameters name="use"/>
    <parameters name="3d_coords"/>
    <parameters name="host_name"/>
    <parameters name="notes_url"/>
    <parameters name="register"/>
    <parameters name="target"/>
    <parameters name="2d_coords"/>
    <parameters name="icon_image_alt"/>
    <parameters name="notes"/>
    <parameters name="ensure"/>
  </types>
  <types name="nagios_serviceextinfo">
    <parameters name="register"/>
    <parameters name="notes_url"/>
    <parameters name="_naginator_name"/>
    <parameters name="icon_image"/>
    <parameters name="target"/>
    <parameters name="use"/>
    <parameters name="icon_image_alt"/>
    <parameters name="notes"/>
    <parameters name="host_name"/>
    <parameters name="service_description"/>
    <parameters name="action_url"/>
    <parameters name="ensure"/>
  </types>
  <typeFragments name="file">
    <properties name="owner" documentation="The user to whom the file should belong.  Argument can be a user name or a&#xA;      user ID.&#xA;&#xA;      On Windows, a group (such as &quot;Administrators&quot;) can be set as a file's owner&#xA;      and a user (such as &quot;Administrator&quot;) can be set as a file's group; however,&#xA;      a file's owner and group shouldn't be the same. (If the owner is also&#xA;      the group, files with modes like `0640` will cause log churn, as they&#xA;      will always appear out of sync.)"/>
  </typeFragments>
  <typeFragments name="file">
    <parameters name="checksum" documentation="The checksum type to use when determining whether to replace a file's contents.&#xA;&#xA;    The default checksum type is md5."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="content" documentation="The desired contents of a file, as a string. This attribute is mutually&#xA;      exclusive with `source` and `target`.&#xA;&#xA;      Newlines and tabs can be specified in double-quoted strings using&#xA;      standard escaped syntax --- \n for a newline, and \t for a tab.&#xA;&#xA;      With very small files, you can construct content strings directly in&#xA;      the manifest...&#xA;&#xA;          define resolve(nameserver1, nameserver2, domain, search) {&#xA;              $str = &quot;search $search&#xA;                  domain $domain&#xA;                  nameserver $nameserver1&#xA;                  nameserver $nameserver2&#xA;                  &quot;&#xA;&#xA;              file { &quot;/etc/resolv.conf&quot;:&#xA;                content => &quot;$str&quot;,&#xA;              }&#xA;          }&#xA;&#xA;      ...but for larger files, this attribute is more useful when combined with the&#xA;      [template](http://docs.puppetlabs.com/references/latest/function.html#template)&#xA;      or [file](http://docs.puppetlabs.com/references/latest/function.html#file)&#xA;      function."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="ctime" documentation="A read-only state to check the file ctime. On most modern \*nix-like&#xA;      systems, this is the time of the most recent change to the owner, group,&#xA;      permissions, or content of the file."/>
  </typeFragments>
  <typeFragments name="file">
    <parameters name="source" documentation="A source file, which will be copied into place on the local system.&#xA;      Values can be URIs pointing to remote files, or fully qualified paths to&#xA;      files available on the local system (including files on NFS shares or&#xA;      Windows mapped drives). This attribute is mutually exclusive with&#xA;      `content` and `target`.&#xA;&#xA;      The available URI schemes are *puppet* and *file*. *Puppet*&#xA;      URIs will retrieve files from Puppet's built-in file server, and are&#xA;      usually formatted as:&#xA;&#xA;      `puppet:///modules/name_of_module/filename`&#xA;&#xA;      This will fetch a file from a module on the puppet master (or from a&#xA;      local module when using puppet apply). Given a `modulepath` of&#xA;      `/etc/puppetlabs/puppet/modules`, the example above would resolve to&#xA;      `/etc/puppetlabs/puppet/modules/name_of_module/files/filename`.&#xA;&#xA;      Unlike `content`, the `source` attribute can be used to recursively copy&#xA;      directories if the `recurse` attribute is set to `true` or `remote`. If&#xA;      a source directory contains symlinks, use the `links` attribute to&#xA;      specify whether to recreate links or follow them.&#xA;&#xA;      Multiple `source` values can be specified as an array, and Puppet will&#xA;      use the first source that exists. This can be used to serve different&#xA;      files to different system types:&#xA;&#xA;          file { &quot;/etc/nfs.conf&quot;:&#xA;            source => [&#xA;              &quot;puppet:///modules/nfs/conf.$host&quot;,&#xA;              &quot;puppet:///modules/nfs/conf.$operatingsystem&quot;,&#xA;              &quot;puppet:///modules/nfs/conf&quot;&#xA;            ]&#xA;          }&#xA;&#xA;      Alternately, when serving directories recursively, multiple sources can&#xA;      be combined by setting the `sourceselect` attribute to `all`."/>
  </typeFragments>
  <typeFragments name="file">
    <parameters name="source_permissions" documentation="Whether (and how) Puppet should copy owner, group, and mode permissions from&#xA;      the `source` to `file` resources when the permissions are not explicitly&#xA;      specified. (In all cases, explicit permissions will take precedence.)&#xA;      Valid values are `use`, `use_when_creating`, and `ignore`:&#xA;&#xA;      * `use` (the default) will cause Puppet to apply the owner, group,&#xA;        and mode from the `source` to any files it is managing.&#xA;      * `use_when_creating` will only apply the owner, group, and mode from the&#xA;        `source` when creating a file; existing files will not have their permissions&#xA;        overwritten.&#xA;      * `ignore` will never apply the owner, group, or mode from the `source` when&#xA;        managing a file. When creating new files without explicit permissions,&#xA;        the permissions they receive will depend on platform-specific behavior.&#xA;        On POSIX, Puppet will use the umask of the user it is running as. On&#xA;        Windows, Puppet will use the default DACL associated with the user it is&#xA;        running as."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="group" documentation="Which group should own the file.  Argument can be either a group&#xA;      name or a group ID.&#xA;&#xA;      On Windows, a user (such as &quot;Administrator&quot;) can be set as a file's group&#xA;      and a group (such as &quot;Administrators&quot;) can be set as a file's owner;&#xA;      however, a file's owner and group shouldn't be the same. (If the owner&#xA;      is also the group, files with modes like `0640` will cause log churn, as&#xA;      they will always appear out of sync.)"/>
  </typeFragments>
  <typeFragments name="file">
    <parameters name="selinux_ignore_defaults" documentation="If this is set then Puppet will not ask SELinux (via matchpathcon) to&#xA;      supply defaults for the SELinux attributes (seluser, selrole,&#xA;      seltype, and selrange). In general, you should leave this set at its&#xA;      default and only set it to true when you need Puppet to not try to fix&#xA;      SELinux labels automatically."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="seluser" documentation="What the SELinux user component of the context of the file should be.&#xA;      Any valid SELinux user component is accepted.  For example `user_u`.&#xA;      If not specified it defaults to the value returned by matchpathcon for&#xA;      the file, if any exists.  Only valid on systems with SELinux support&#xA;      enabled."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="selrole" documentation="What the SELinux role component of the context of the file should be.&#xA;      Any valid SELinux role component is accepted.  For example `role_r`.&#xA;      If not specified it defaults to the value returned by matchpathcon for&#xA;      the file, if any exists.  Only valid on systems with SELinux support&#xA;      enabled."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="seltype" documentation="What the SELinux type component of the context of the file should be.&#xA;      Any valid SELinux type component is accepted.  For example `tmp_t`.&#xA;      If not specified it defaults to the value returned by matchpathcon for&#xA;      the file, if any exists.  Only valid on systems with SELinux support&#xA;      enabled."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="selrange" documentation="What the SELinux range component of the context of the file should be.&#xA;      Any valid SELinux range component is accepted.  For example `s0` or&#xA;      `SystemHigh`.  If not specified it defaults to the value returned by&#xA;      matchpathcon for the file, if any exists.  Only valid on systems with&#xA;      SELinux support enabled and that have support for MCS (Multi-Category&#xA;      Security)."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="mode" documentation="The desired permissions mode for the file, in symbolic or numeric&#xA;      notation. This value should be specified as a quoted string; do not use&#xA;      un-quoted numbers to represent file modes.&#xA;&#xA;      The `file` type uses traditional Unix permission schemes and translates&#xA;      them to equivalent permissions for systems which represent permissions&#xA;      differently, including Windows. For detailed ACL controls on Windows,&#xA;      you can leave `mode` unmanaged and use&#xA;      [the puppetlabs/acl module.](https://forge.puppetlabs.com/puppetlabs/acl)&#xA;&#xA;      Numeric modes should use the standard four-digit octal notation of&#xA;      `&lt;setuid/setgid/sticky>&lt;owner>&lt;group>&lt;other>` (e.g. 0644). Each of the&#xA;      &quot;owner,&quot; &quot;group,&quot; and &quot;other&quot; digits should be a sum of the&#xA;      permissions for that class of users, where read = 4, write = 2, and&#xA;      execute/search = 1. When setting numeric permissions for&#xA;      directories, Puppet sets the search permission wherever the read&#xA;      permission is set.&#xA;&#xA;      Symbolic modes should be represented as a string of comma-separated&#xA;      permission clauses, in the form `&lt;who>&lt;op>&lt;perm>`:&#xA;&#xA;      * &quot;Who&quot; should be u (user), g (group), o (other), and/or a (all)&#xA;      * &quot;Op&quot; should be = (set exact permissions), + (add select permissions),&#xA;        or - (remove select permissions)&#xA;      * &quot;Perm&quot; should be one or more of:&#xA;          * r (read)&#xA;          * w (write)&#xA;          * x (execute/search)&#xA;          * t (sticky)&#xA;          * s (setuid/setgid)&#xA;          * X (execute/search if directory or if any one user can execute)&#xA;          * u (user's current permissions)&#xA;          * g (group's current permissions)&#xA;          * o (other's current permissions)&#xA;&#xA;      Thus, mode `0664` could be represented symbolically as either `a=r,ug+w`&#xA;      or `ug=rw,o=r`.  However, symbolic modes are more expressive than numeric&#xA;      modes: a mode only affects the specified bits, so `mode => 'ug+w'` will&#xA;      set the user and group write bits, without affecting any other bits.&#xA;&#xA;      See the manual page for GNU or BSD `chmod` for more details&#xA;      on numeric and symbolic modes.&#xA;&#xA;      On Windows, permissions are translated as follows:&#xA;&#xA;      * Owner and group names are mapped to Windows SIDs&#xA;      * The &quot;other&quot; class of users maps to the &quot;Everyone&quot; SID&#xA;      * The read/write/execute permissions map to the `FILE_GENERIC_READ`,&#xA;        `FILE_GENERIC_WRITE`, and `FILE_GENERIC_EXECUTE` access rights; a&#xA;        file's owner always has the `FULL_CONTROL` right&#xA;      * &quot;Other&quot; users can't have any permissions a file's group lacks,&#xA;        and its group can't have any permissions its owner lacks; that is, 0644&#xA;        is an acceptable mode, but 0464 is not."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="type" documentation="A read-only state to check the file type."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="ensure" documentation="Whether the file should exist, and if so what kind of file it should be.&#xA;      Possible values are `present`, `absent`, `file`, `directory`, and `link`.&#xA;&#xA;      * `present` will accept any form of file existence, and will create a&#xA;        normal file if the file is missing. (The file will have no content&#xA;        unless the `content` or `source` attribute is used.)&#xA;      * `absent` will make sure the file doesn't exist, deleting it&#xA;        if necessary.&#xA;      * `file` will make sure it's a normal file, and enables use of the&#xA;        `content` or `source` attribute.&#xA;      * `directory` will make sure it's a directory, and enables use of the&#xA;        `source`, `recurse`, `recurselimit`, `ignore`, and `purge` attributes.&#xA;      * `link` will make sure the file is a symlink, and **requires** that you&#xA;        also set the `target` attribute. Symlinks are supported on all Posix&#xA;        systems and on Windows Vista / 2008 and higher. On Windows, managing&#xA;        symlinks requires puppet agent's user account to have the &quot;Create&#xA;        Symbolic Links&quot; privilege; this can be configured in the &quot;User Rights&#xA;        Assignment&quot; section in the Windows policy editor. By default, puppet&#xA;        agent runs as the Administrator account, which does have this privilege.&#xA;&#xA;      Puppet avoids destroying directories unless the `force` attribute is set&#xA;      to `true`. This means that if a file is currently a directory, setting&#xA;      `ensure` to anything but `directory` or `present` will cause Puppet to&#xA;      skip managing the resource and log either a notice or an error.&#xA;&#xA;      There is one other non-standard value for `ensure`. If you specify the&#xA;      path to another file as the ensure value, it is equivalent to specifying&#xA;      `link` and using that path as the `target`:&#xA;&#xA;          # Equivalent resources:&#xA;&#xA;          file { &quot;/etc/inetd.conf&quot;:&#xA;            ensure => &quot;/etc/inet/inetd.conf&quot;,&#xA;          }&#xA;&#xA;          file { &quot;/etc/inetd.conf&quot;:&#xA;            ensure => link,&#xA;            target => &quot;/etc/inet/inetd.conf&quot;,&#xA;          }&#xA;&#xA;      However, we recommend using `link` and `target` explicitly, since this&#xA;      behavior can be harder to read."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="target" documentation="The target for creating a link.  Currently, symlinks are the&#xA;      only type supported. This attribute is mutually exclusive with `source`&#xA;      and `content`.&#xA;&#xA;      Symlink targets can be relative, as well as absolute:&#xA;&#xA;          # (Useful on Solaris)&#xA;          file { &quot;/etc/inetd.conf&quot;:&#xA;            ensure => link,&#xA;            target => &quot;inet/inetd.conf&quot;,&#xA;          }&#xA;&#xA;      Directories of symlinks can be served recursively by instead using the&#xA;      `source` attribute, setting `ensure` to `directory`, and setting the&#xA;      `links` attribute to `manage`."/>
  </typeFragments>
  <typeFragments name="file">
    <properties name="mtime" documentation="A read-only state to check the file mtime. On \*nix-like systems, this&#xA;      is the time of the most recent change to the content of the file."/>
  </typeFragments>
  <metaType name="Type">
    <parameters name="loglevel" documentation="Sets the level that information will be logged.&#xA;      The log levels have the biggest impact when logs are sent to&#xA;      syslog (which is currently the default).&#xA;&#xA;      The order of the log levels, in decreasing priority, is:&#xA;&#xA;      * `crit`&#xA;      * `emerg`&#xA;      * `alert`&#xA;      * `err`&#xA;      * `warning`&#xA;      * `notice`&#xA;      * `info` / `verbose`&#xA;      * `debug`"/>
    <parameters name="schedule" documentation="A schedule to govern when Puppet is allowed to manage this resource.&#xA;      The value of this metaparameter must be the `name` of a `schedule`&#xA;      resource. This means you must declare a schedule resource, then&#xA;      refer to it by name; see&#xA;      [the docs for the `schedule` type](http://docs.puppetlabs.com/references/latest/type.html#schedule)&#xA;      for more info.&#xA;&#xA;          schedule { 'everyday':&#xA;            period => daily,&#xA;            range  => &quot;2-4&quot;&#xA;          }&#xA;&#xA;          exec { &quot;/usr/bin/apt-get update&quot;:&#xA;            schedule => 'everyday'&#xA;          }&#xA;&#xA;      Note that you can declare the schedule resource anywhere in your&#xA;      manifests, as long as it ends up in the final compiled catalog."/>
    <parameters name="subscribe" documentation="One or more resources that this resource depends on, expressed as&#xA;      [resource references](http://docs.puppetlabs.com/puppet/latest/reference/lang_datatypes.html#resource-references).&#xA;      Multiple resources can be specified as an array of references. When this&#xA;      attribute is present:&#xA;&#xA;      * The subscribed resource(s) will be applied _before_ this resource.&#xA;      * If Puppet makes changes to any of the subscribed resources, it will cause&#xA;        this resource to _refresh._ (Refresh behavior varies by resource&#xA;        type: services will restart, mounts will unmount and re-mount, etc. Not&#xA;        all types can refresh.)&#xA;&#xA;      This is one of the four relationship metaparameters, along with&#xA;      `before`, `require`, and `notify`. For more context, including the&#xA;      alternate chaining arrow (`->` and `~>`) syntax, see&#xA;      [the language page on relationships](http://docs.puppetlabs.com/puppet/latest/reference/lang_relationships.html)."/>
    <parameters name="alias" documentation="Creates an alias for the resource.  Puppet uses this internally when you&#xA;      provide a symbolic title and an explicit namevar value:&#xA;&#xA;          file { 'sshdconfig':&#xA;            path => $operatingsystem ? {&#xA;              solaris => '/usr/local/etc/ssh/sshd_config',&#xA;              default => '/etc/ssh/sshd_config',&#xA;            },&#xA;            source => '...'&#xA;          }&#xA;&#xA;          service { 'sshd':&#xA;            subscribe => File['sshdconfig'],&#xA;          }&#xA;&#xA;      When you use this feature, the parser sets `sshdconfig` as the title,&#xA;      and the library sets that as an alias for the file so the dependency&#xA;      lookup in `Service['sshd']` works.  You can use this metaparameter yourself,&#xA;      but note that aliases generally only work for creating relationships; anything&#xA;      else that refers to an existing resource (such as amending or overriding&#xA;      resource attributes in an inherited class) must use the resource's exact&#xA;      title. For example, the following code will not work:&#xA;&#xA;          file { '/etc/ssh/sshd_config':&#xA;            owner => root,&#xA;            group => root,&#xA;            alias => 'sshdconfig',&#xA;          }&#xA;&#xA;          File['sshdconfig'] {&#xA;            mode => 644,&#xA;          }&#xA;&#xA;      There's no way here for the Puppet parser to know that these two stanzas&#xA;      should be affecting the same file."/>
    <parameters name="before" documentation="One or more resources that depend on this resource, expressed as&#xA;      [resource references](http://docs.puppetlabs.com/puppet/latest/reference/lang_datatypes.html#resource-references).&#xA;      Multiple resources can be specified as an array of references. When this&#xA;      attribute is present:&#xA;&#xA;      * This resource will be applied _before_ the dependent resource(s).&#xA;&#xA;      This is one of the four relationship metaparameters, along with&#xA;      `require`, `notify`, and `subscribe`. For more context, including the&#xA;      alternate chaining arrow (`->` and `~>`) syntax, see&#xA;      [the language page on relationships](http://docs.puppetlabs.com/puppet/latest/reference/lang_relationships.html)."/>
    <parameters name="tag" documentation="Add the specified tags to the associated resource.  While all resources&#xA;      are automatically tagged with as much information as possible&#xA;      (e.g., each class and definition containing the resource), it can&#xA;      be useful to add your own tags to a given resource.&#xA;&#xA;      Multiple tags can be specified as an array:&#xA;&#xA;          file {'/etc/hosts':&#xA;            ensure => file,&#xA;            source => 'puppet:///modules/site/hosts',&#xA;            mode   => 0644,&#xA;            tag    => ['bootstrap', 'minimumrun', 'mediumrun'],&#xA;          }&#xA;&#xA;      Tags are useful for things like applying a subset of a host's configuration&#xA;      with [the `tags` setting](/references/latest/configuration.html#tags)&#xA;      (e.g. `puppet agent --test --tags bootstrap`) or filtering alerts with&#xA;      [the `tagmail` report processor](http://docs.puppetlabs.com/references/latest/report.html#tagmail)."/>
    <parameters name="noop" documentation="Whether to apply this resource in noop mode.&#xA;&#xA;      When applying a resource in noop mode, Puppet will check whether it is in sync,&#xA;      like it does when running normally. However, if a resource attribute is not in&#xA;      the desired state (as declared in the catalog), Puppet will take no&#xA;      action, and will instead report the changes it _would_ have made. These&#xA;      simulated changes will appear in the report sent to the puppet master, or&#xA;      be shown on the console if running puppet agent or puppet apply in the&#xA;      foreground. The simulated changes will not send refresh events to any&#xA;      subscribing or notified resources, although Puppet will log that a refresh&#xA;      event _would_ have been sent.&#xA;&#xA;      **Important note:**&#xA;      [The `noop` setting](http://docs.puppetlabs.com/references/latest/configuration.html#noop)&#xA;      allows you to globally enable or disable noop mode, but it will _not_ override&#xA;      the `noop` metaparameter on individual resources. That is, the value of the&#xA;      global `noop` setting will _only_ affect resources that do not have an explicit&#xA;      value set for their `noop` attribute."/>
    <parameters name="notify" documentation="One or more resources that depend on this resource, expressed as&#xA;      [resource references](http://docs.puppetlabs.com/puppet/latest/reference/lang_datatypes.html#resource-references).&#xA;      Multiple resources can be specified as an array of references. When this&#xA;      attribute is present:&#xA;&#xA;      * This resource will be applied _before_ the notified resource(s).&#xA;      * If Puppet makes changes to this resource, it will cause all of the&#xA;        notified resources to _refresh._ (Refresh behavior varies by resource&#xA;        type: services will restart, mounts will unmount and re-mount, etc. Not&#xA;        all types can refresh.)&#xA;&#xA;      This is one of the four relationship metaparameters, along with&#xA;      `before`, `require`, and `subscribe`. For more context, including the&#xA;      alternate chaining arrow (`->` and `~>`) syntax, see&#xA;      [the language page on relationships](http://docs.puppetlabs.com/puppet/latest/reference/lang_relationships.html)."/>
    <parameters name="audit" documentation="Marks a subset of this resource's unmanaged attributes for auditing. Accepts an&#xA;      attribute name, an array of attribute names, or `all`.&#xA;&#xA;      Auditing a resource attribute has two effects: First, whenever a catalog&#xA;      is applied with puppet apply or puppet agent, Puppet will check whether&#xA;      that attribute of the resource has been modified, comparing its current&#xA;      value to the previous run; any change will be logged alongside any actions&#xA;      performed by Puppet while applying the catalog.&#xA;&#xA;      Secondly, marking a resource attribute for auditing will include that&#xA;      attribute in inspection reports generated by puppet inspect; see the&#xA;      puppet inspect documentation for more details.&#xA;&#xA;      Managed attributes for a resource can also be audited, but note that&#xA;      changes made by Puppet will be logged as additional modifications. (I.e.&#xA;      if a user manually edits a file whose contents are audited and managed,&#xA;      puppet agent's next two runs will both log an audit notice: the first run&#xA;      will log the user's edit and then revert the file to the desired state,&#xA;      and the second run will log the edit made by Puppet.)"/>
    <parameters name="require" documentation="One or more resources that this resource depends on, expressed as&#xA;      [resource references](http://docs.puppetlabs.com/puppet/latest/reference/lang_datatypes.html#resource-references).&#xA;      Multiple resources can be specified as an array of references. When this&#xA;      attribute is present:&#xA;&#xA;      * The required resource(s) will be applied **before** this resource.&#xA;&#xA;      This is one of the four relationship metaparameters, along with&#xA;      `before`, `notify`, and `subscribe`. For more context, including the&#xA;      alternate chaining arrow (`->` and `~>`) syntax, see&#xA;      [the language page on relationships](http://docs.puppetlabs.com/puppet/latest/reference/lang_relationships.html)."/>
    <parameters name="stage" documentation="Which run stage this class should reside in.&#xA;&#xA;      **Note: This metaparameter can only be used on classes,** and only when&#xA;      declaring them with the resource-like syntax. It cannot be used on normal&#xA;      resources or on classes declared with `include`.&#xA;&#xA;      By default, all classes are declared in the `main` stage. To assign a class&#xA;      to a different stage, you must:&#xA;&#xA;      * Declare the new stage as a [`stage` resource](http://docs.puppetlabs.com/references/latest/type.html#stage).&#xA;      * Declare an order relationship between the new stage and the `main` stage.&#xA;      * Use the resource-like syntax to declare the class, and set the `stage`&#xA;        metaparameter to the name of the desired stage.&#xA;&#xA;      For example:&#xA;&#xA;          stage { 'pre':&#xA;            before => Stage['main'],&#xA;          }&#xA;&#xA;          class { 'apt-updates':&#xA;            stage => 'pre',&#xA;          }"/>
  </metaType>
  <metaVariables name="name" documentation=""/>
  <metaVariables name="title" documentation=""/>
  <metaVariables name="module_name" documentation="&lt;p>The name of the containing module&lt;/p>"/>
  <metaVariables name="caller_module_name" documentation="&lt;p>The name of the calling module&lt;/p>"/>
</pptp:PuppetDistribution>
